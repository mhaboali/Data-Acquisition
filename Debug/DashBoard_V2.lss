
DashBoard_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000010b0  00001144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080011c  0080011c  00001160  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bed  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004951  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00004980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001144  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000341  00000000  00000000  00005bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004b3  00000000  00000000  00005ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ac  00000000  00000000  000063a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000432  00000000  00000000  00006654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000055f  00000000  00000000  00006a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00006fe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 eb       	ldi	r30, 0xB0	; 176
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 34       	cpi	r26, 0x4F	; 79
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 41 05 	call	0xa82	; 0xa82 <main>
      9e:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_2>:
	move_servo();
	Display_throttle();
	sbi(ADCSRA,ADSC);
}					
ISR(INT1_vect)							//on place 2 in interrupt vector table
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	8f 93       	push	r24
      b2:	9f 93       	push	r25
	total_spokes_counter++;
      b4:	80 91 36 01 	lds	r24, 0x0136
      b8:	90 91 37 01 	lds	r25, 0x0137
      bc:	01 96       	adiw	r24, 0x01	; 1
      be:	90 93 37 01 	sts	0x0137, r25
      c2:	80 93 36 01 	sts	0x0136, r24
	inst_spokes_counter++;
      c6:	80 91 34 01 	lds	r24, 0x0134
      ca:	90 91 35 01 	lds	r25, 0x0135
      ce:	01 96       	adiw	r24, 0x01	; 1
      d0:	90 93 35 01 	sts	0x0135, r25
      d4:	80 93 34 01 	sts	0x0134, r24
	
}
      d8:	9f 91       	pop	r25
      da:	8f 91       	pop	r24
      dc:	0f 90       	pop	r0
      de:	0f be       	out	0x3f, r0	; 63
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
      e6:	1f 92       	push	r1
      e8:	0f 92       	push	r0
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	0f 92       	push	r0
      ee:	11 24       	eor	r1, r1
      f0:	8f 93       	push	r24
      f2:	9f 93       	push	r25
	couter_prescaling++;
      f4:	80 91 1c 01 	lds	r24, 0x011C
      f8:	90 91 1d 01 	lds	r25, 0x011D
      fc:	01 96       	adiw	r24, 0x01	; 1
      fe:	90 93 1d 01 	sts	0x011D, r25
     102:	80 93 1c 01 	sts	0x011C, r24
	if(couter_prescaling==243)		//240 for actual timing
     106:	80 91 1c 01 	lds	r24, 0x011C
     10a:	90 91 1d 01 	lds	r25, 0x011D
     10e:	83 3f       	cpi	r24, 0xF3	; 243
     110:	91 05       	cpc	r25, r1
     112:	69 f4       	brne	.+26     	; 0x12e <__vector_16+0x48>
	{
		seconds++;
     114:	80 91 20 01 	lds	r24, 0x0120
     118:	90 91 21 01 	lds	r25, 0x0121
     11c:	01 96       	adiw	r24, 0x01	; 1
     11e:	90 93 21 01 	sts	0x0121, r25
     122:	80 93 20 01 	sts	0x0120, r24
		couter_prescaling=0;
     126:	10 92 1d 01 	sts	0x011D, r1
     12a:	10 92 1c 01 	sts	0x011C, r1
	}
	if(seconds==60)
     12e:	80 91 20 01 	lds	r24, 0x0120
     132:	90 91 21 01 	lds	r25, 0x0121
     136:	cc 97       	sbiw	r24, 0x3c	; 60
     138:	69 f4       	brne	.+26     	; 0x154 <__vector_16+0x6e>
	{
		minutes++;
     13a:	80 91 1e 01 	lds	r24, 0x011E
     13e:	90 91 1f 01 	lds	r25, 0x011F
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	90 93 1f 01 	sts	0x011F, r25
     148:	80 93 1e 01 	sts	0x011E, r24
		seconds=0;
     14c:	10 92 21 01 	sts	0x0121, r1
     150:	10 92 20 01 	sts	0x0120, r1
	}
}
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	0f 90       	pop	r0
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	0f 90       	pop	r0
     15e:	1f 90       	pop	r1
     160:	18 95       	reti

00000162 <__vector_7>:
ISR(TIMER2_COMPA_vect)
{
     162:	1f 92       	push	r1
     164:	0f 92       	push	r0
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
	TCNT2=0;
     170:	10 92 b2 00 	sts	0x00B2, r1
	inst_16ms_counter++;					//for counting how many 16ms through one cycle
     174:	80 91 32 01 	lds	r24, 0x0132
     178:	90 91 33 01 	lds	r25, 0x0133
     17c:	01 96       	adiw	r24, 0x01	; 1
     17e:	90 93 33 01 	sts	0x0133, r25
     182:	80 93 32 01 	sts	0x0132, r24
	total_16ms_counter++;				//counting total time through a number of cycles
     186:	80 91 30 01 	lds	r24, 0x0130
     18a:	90 91 31 01 	lds	r25, 0x0131
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	90 93 31 01 	sts	0x0131, r25
     194:	80 93 30 01 	sts	0x0130, r24
}
     198:	9f 91       	pop	r25
     19a:	8f 91       	pop	r24
     19c:	0f 90       	pop	r0
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	0f 90       	pop	r0
     1a2:	1f 90       	pop	r1
     1a4:	18 95       	reti

000001a6 <init_timer2>:

//================Speed Sensor functions implementation 
 void init_timer2()			//CALCUTE TIME FOR SPEED CALCULATIONS
{  
  //ctc mode
   sbi(TCCR2A,WGM21);
     1a6:	e0 eb       	ldi	r30, 0xB0	; 176
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	82 60       	ori	r24, 0x02	; 2
     1ae:	80 83       	st	Z, r24
   //Prescaler 1024
   sbi(TCCR2B,CS20);
     1b0:	e1 eb       	ldi	r30, 0xB1	; 177
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	81 60       	ori	r24, 0x01	; 1
     1b8:	80 83       	st	Z, r24
   sbi(TCCR2B,CS21);
     1ba:	80 81       	ld	r24, Z
     1bc:	82 60       	ori	r24, 0x02	; 2
     1be:	80 83       	st	Z, r24
   sbi(TCCR2B,CS22);
     1c0:	80 81       	ld	r24, Z
     1c2:	84 60       	ori	r24, 0x04	; 4
     1c4:	80 83       	st	Z, r24
   //ENALBE outcompare interrupt:
   sbi(TIMSK2,OCIE2A);
     1c6:	e0 e7       	ldi	r30, 0x70	; 112
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	82 60       	ori	r24, 0x02	; 2
     1ce:	80 83       	st	Z, r24
   TCNT2=0x00;
     1d0:	10 92 b2 00 	sts	0x00B2, r1
   OCR2A=255;				//will overflow every 16ms
     1d4:	8f ef       	ldi	r24, 0xFF	; 255
     1d6:	80 93 b3 00 	sts	0x00B3, r24
     1da:	08 95       	ret

000001dc <init_ext_interrupts>:
} 
void init_ext_interrupts()
{
   cbi(DDRD,PD3);			//sensor input
     1dc:	53 98       	cbi	0x0a, 3	; 10
   sbi(PORTD,PD3);			//enable pull up resistor
     1de:	5b 9a       	sbi	0x0b, 3	; 11
   //EICRA|=(1<<ISC01)|(1<<ISC00);	//set triger INT0 for rising edge mode
   EICRA|=(1<<ISC11);			//set trigger INT0 for falling edge mode
     1e0:	e9 e6       	ldi	r30, 0x69	; 105
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	88 60       	ori	r24, 0x08	; 8
     1e8:	80 83       	st	Z, r24
   //EIMSK|=(1<<INT0);			//turn on INT0
   EIMSK|=(1<<INT1);			//turn on INT1
     1ea:	e9 9a       	sbi	0x1d, 1	; 29
     1ec:	08 95       	ret

000001ee <Speeds_Calculation>:
}
void Speeds_Calculation()
{
	//For Average Speed
	if(total_spokes_counter==1)
     1ee:	80 91 36 01 	lds	r24, 0x0136
     1f2:	90 91 37 01 	lds	r25, 0x0137
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	49 f4       	brne	.+18     	; 0x20c <Speeds_Calculation+0x1e>
	{
		count_avg_t1=total_16ms_counter;
     1fa:	80 91 30 01 	lds	r24, 0x0130
     1fe:	90 91 31 01 	lds	r25, 0x0131
     202:	90 93 45 01 	sts	0x0145, r25
     206:	80 93 44 01 	sts	0x0144, r24
     20a:	33 c0       	rjmp	.+102    	; 0x272 <Speeds_Calculation+0x84>
		
	}
	else if(total_spokes_counter==200)
     20c:	80 91 36 01 	lds	r24, 0x0136
     210:	90 91 37 01 	lds	r25, 0x0137
     214:	88 3c       	cpi	r24, 0xC8	; 200
     216:	91 05       	cpc	r25, r1
     218:	61 f5       	brne	.+88     	; 0x272 <Speeds_Calculation+0x84>
	{
		count_avg_t2=total_16ms_counter;
     21a:	80 91 30 01 	lds	r24, 0x0130
     21e:	90 91 31 01 	lds	r25, 0x0131
     222:	90 93 43 01 	sts	0x0143, r25
     226:	80 93 42 01 	sts	0x0142, r24
		avg_time=ceil((count_avg_t2-count_avg_t1)*0.016);	//time counters difference * 16ms
     22a:	60 91 42 01 	lds	r22, 0x0142
     22e:	70 91 43 01 	lds	r23, 0x0143
     232:	80 91 44 01 	lds	r24, 0x0144
     236:	90 91 45 01 	lds	r25, 0x0145
     23a:	68 1b       	sub	r22, r24
     23c:	79 0b       	sbc	r23, r25
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
     246:	2f e6       	ldi	r18, 0x6F	; 111
     248:	32 e1       	ldi	r19, 0x12	; 18
     24a:	43 e8       	ldi	r20, 0x83	; 131
     24c:	5c e3       	ldi	r21, 0x3C	; 60
     24e:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     252:	0e 94 e5 05 	call	0xbca	; 0xbca <ceil>
     256:	0e 94 65 06 	call	0xcca	; 0xcca <__fixunssfsi>
     25a:	70 93 39 01 	sts	0x0139, r23
     25e:	60 93 38 01 	sts	0x0138, r22
		total_16ms_counter=0;				//reset time counter
     262:	10 92 31 01 	sts	0x0131, r1
     266:	10 92 30 01 	sts	0x0130, r1
		total_spokes_counter=0;				//reset spokes counter
     26a:	10 92 37 01 	sts	0x0137, r1
     26e:	10 92 36 01 	sts	0x0136, r1
	}
	//for instantaneous speed
	if(inst_spokes_counter==0)				//here completing one cycle
     272:	80 91 34 01 	lds	r24, 0x0134
     276:	90 91 35 01 	lds	r25, 0x0135
     27a:	89 2b       	or	r24, r25
     27c:	91 f4       	brne	.+36     	; 0x2a2 <Speeds_Calculation+0xb4>
	{
		count_t1=inst_16ms_counter;
     27e:	80 91 32 01 	lds	r24, 0x0132
     282:	90 91 33 01 	lds	r25, 0x0133
     286:	90 93 49 01 	sts	0x0149, r25
     28a:	80 93 48 01 	sts	0x0148, r24
		inst_spokes_counter++;
     28e:	80 91 34 01 	lds	r24, 0x0134
     292:	90 91 35 01 	lds	r25, 0x0135
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	90 93 35 01 	sts	0x0135, r25
     29c:	80 93 34 01 	sts	0x0134, r24
     2a0:	08 95       	ret
	}
	else if(inst_spokes_counter==10)
     2a2:	80 91 34 01 	lds	r24, 0x0134
     2a6:	90 91 35 01 	lds	r25, 0x0135
     2aa:	0a 97       	sbiw	r24, 0x0a	; 10
     2ac:	f1 f4       	brne	.+60     	; 0x2ea <Speeds_Calculation+0xfc>
	{
		count_t2=inst_16ms_counter;
     2ae:	80 91 32 01 	lds	r24, 0x0132
     2b2:	90 91 33 01 	lds	r25, 0x0133
     2b6:	90 93 47 01 	sts	0x0147, r25
     2ba:	80 93 46 01 	sts	0x0146, r24
		inst_16ms_counter=0;				//reset instantaneous time counter
     2be:	10 92 33 01 	sts	0x0133, r1
     2c2:	10 92 32 01 	sts	0x0132, r1
		inst_spokes_counter=0;				//reset instantaneous spokes counter
     2c6:	10 92 35 01 	sts	0x0135, r1
     2ca:	10 92 34 01 	sts	0x0134, r1
		elapsed_distance_cm+=perimeter_cm;			//every 10 pulses"one cycle" increase elasped distance by 157cm
     2ce:	80 91 2e 01 	lds	r24, 0x012E
     2d2:	90 91 2f 01 	lds	r25, 0x012F
     2d6:	83 56       	subi	r24, 0x63	; 99
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	90 93 2f 01 	sts	0x012F, r25
     2de:	80 93 2e 01 	sts	0x012E, r24
		if(elapsed_distance_cm>=120000)
     2e2:	80 91 2e 01 	lds	r24, 0x012E
     2e6:	90 91 2f 01 	lds	r25, 0x012F
     2ea:	08 95       	ret

000002ec <Calculate_speeds_distance>:
		}
	}
}
void Calculate_speeds_distance()
{
	if(inst_16ms_counter<35)
     2ec:	80 91 32 01 	lds	r24, 0x0132
     2f0:	90 91 33 01 	lds	r25, 0x0133
     2f4:	83 97       	sbiw	r24, 0x23	; 35
     2f6:	08 f0       	brcs	.+2      	; 0x2fa <Calculate_speeds_distance+0xe>
     2f8:	9b c0       	rjmp	.+310    	; 0x430 <Calculate_speeds_distance+0x144>
	{
		period=(count_t2-count_t1)*16;					//to calculate difference in time between two pulses.....16 standing for 16ms
     2fa:	60 91 46 01 	lds	r22, 0x0146
     2fe:	70 91 47 01 	lds	r23, 0x0147
     302:	80 91 48 01 	lds	r24, 0x0148
     306:	90 91 49 01 	lds	r25, 0x0149
     30a:	68 1b       	sub	r22, r24
     30c:	79 0b       	sbc	r23, r25
     30e:	62 95       	swap	r22
     310:	72 95       	swap	r23
     312:	70 7f       	andi	r23, 0xF0	; 240
     314:	76 27       	eor	r23, r22
     316:	60 7f       	andi	r22, 0xF0	; 240
     318:	76 27       	eor	r23, r22
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
     322:	60 93 3a 01 	sts	0x013A, r22
     326:	70 93 3b 01 	sts	0x013B, r23
     32a:	80 93 3c 01 	sts	0x013C, r24
     32e:	90 93 3d 01 	sts	0x013D, r25
		if(period>0)
     332:	60 91 3a 01 	lds	r22, 0x013A
     336:	70 91 3b 01 	lds	r23, 0x013B
     33a:	80 91 3c 01 	lds	r24, 0x013C
     33e:	90 91 3d 01 	lds	r25, 0x013D
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	a9 01       	movw	r20, r18
     348:	0e 94 72 07 	call	0xee4	; 0xee4 <__gesf2>
     34c:	18 16       	cp	r1, r24
     34e:	dc f4       	brge	.+54     	; 0x386 <Calculate_speeds_distance+0x9a>
		freq=(1000.00/period);						//freq=1/period...but 1000/period in HZ
     350:	20 91 3a 01 	lds	r18, 0x013A
     354:	30 91 3b 01 	lds	r19, 0x013B
     358:	40 91 3c 01 	lds	r20, 0x013C
     35c:	50 91 3d 01 	lds	r21, 0x013D
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	8a e7       	ldi	r24, 0x7A	; 122
     366:	94 e4       	ldi	r25, 0x44	; 68
     368:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     36c:	46 2f       	mov	r20, r22
     36e:	57 2f       	mov	r21, r23
     370:	68 2f       	mov	r22, r24
     372:	79 2f       	mov	r23, r25
     374:	40 93 3e 01 	sts	0x013E, r20
     378:	50 93 3f 01 	sts	0x013F, r21
     37c:	60 93 40 01 	sts	0x0140, r22
     380:	70 93 41 01 	sts	0x0141, r23
     384:	08 c0       	rjmp	.+16     	; 0x396 <Calculate_speeds_distance+0xaa>
		else
		freq=0;
     386:	10 92 3e 01 	sts	0x013E, r1
     38a:	10 92 3f 01 	sts	0x013F, r1
     38e:	10 92 40 01 	sts	0x0140, r1
     392:	10 92 41 01 	sts	0x0141, r1
		inst_speed=ceil((perimeter_cm*freq/100)*3.6);			//instantaneous speed in km/hour
     396:	60 91 3e 01 	lds	r22, 0x013E
     39a:	70 91 3f 01 	lds	r23, 0x013F
     39e:	80 91 40 01 	lds	r24, 0x0140
     3a2:	90 91 41 01 	lds	r25, 0x0141
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	4d e1       	ldi	r20, 0x1D	; 29
     3ac:	53 e4       	ldi	r21, 0x43	; 67
     3ae:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	48 ec       	ldi	r20, 0xC8	; 200
     3b8:	52 e4       	ldi	r21, 0x42	; 66
     3ba:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     3be:	26 e6       	ldi	r18, 0x66	; 102
     3c0:	36 e6       	ldi	r19, 0x66	; 102
     3c2:	46 e6       	ldi	r20, 0x66	; 102
     3c4:	50 e4       	ldi	r21, 0x40	; 64
     3c6:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     3ca:	0e 94 e5 05 	call	0xbca	; 0xbca <ceil>
     3ce:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixsfsi>
     3d2:	70 93 2b 01 	sts	0x012B, r23
     3d6:	60 93 2a 01 	sts	0x012A, r22
		avg_speed=ceil((avg_distance_m/avg_time)*3.6); 			//average speed in km/hour
     3da:	60 91 38 01 	lds	r22, 0x0138
     3de:	70 91 39 01 	lds	r23, 0x0139
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
     3ea:	9b 01       	movw	r18, r22
     3ec:	ac 01       	movw	r20, r24
     3ee:	63 e3       	ldi	r22, 0x33	; 51
     3f0:	73 e3       	ldi	r23, 0x33	; 51
     3f2:	8b ef       	ldi	r24, 0xFB	; 251
     3f4:	91 e4       	ldi	r25, 0x41	; 65
     3f6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     3fa:	26 e6       	ldi	r18, 0x66	; 102
     3fc:	36 e6       	ldi	r19, 0x66	; 102
     3fe:	46 e6       	ldi	r20, 0x66	; 102
     400:	50 e4       	ldi	r21, 0x40	; 64
     402:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     406:	0e 94 e5 05 	call	0xbca	; 0xbca <ceil>
     40a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixsfsi>
     40e:	70 93 29 01 	sts	0x0129, r23
     412:	60 93 28 01 	sts	0x0128, r22
		elapsed_distance_m=(int)elapsed_distance_cm/100;
     416:	80 91 2e 01 	lds	r24, 0x012E
     41a:	90 91 2f 01 	lds	r25, 0x012F
     41e:	64 e6       	ldi	r22, 0x64	; 100
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	0e 94 fd 07 	call	0xffa	; 0xffa <__divmodhi4>
     426:	70 93 2d 01 	sts	0x012D, r23
     42a:	60 93 2c 01 	sts	0x012C, r22
     42e:	08 95       	ret
	}
	else
	{
		inst_speed=0;
     430:	10 92 2b 01 	sts	0x012B, r1
     434:	10 92 2a 01 	sts	0x012A, r1
     438:	08 95       	ret

0000043a <send_cmd_4bits>:
	send_cmd_4bits(0x80);			// Move the Cursor to First line First Position
	//send_cmd_4bits(0x01);
}
void send_cmd_4bits( char cmd)
{
	databus=(cmd & 0xf0)|(databus&0x0f);				// Send the Higher Nibble of the command to LCD
     43a:	9b b1       	in	r25, 0x0b	; 11
     43c:	28 2f       	mov	r18, r24
     43e:	20 7f       	andi	r18, 0xF0	; 240
     440:	9f 70       	andi	r25, 0x0F	; 15
     442:	92 2b       	or	r25, r18
     444:	9b b9       	out	0x0b, r25	; 11
	control_bus &=~(1<<rs);								// Select the Command Register by pulling RS LOW
     446:	40 98       	cbi	0x08, 0	; 8
	control_bus &=~(1<<rw);								// Select the Write Operation  by pulling RW LOW
     448:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;								// Send a High-to-Low Pulse at Enable Pin
     44a:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44c:	35 e0       	ldi	r19, 0x05	; 5
     44e:	3a 95       	dec	r19
     450:	f1 f7       	brne	.-4      	; 0x44e <send_cmd_4bits+0x14>
     452:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     454:	42 98       	cbi	0x08, 2	; 8
     456:	95 e3       	ldi	r25, 0x35	; 53
     458:	9a 95       	dec	r25
     45a:	f1 f7       	brne	.-4      	; 0x458 <send_cmd_4bits+0x1e>
     45c:	00 00       	nop
	
	_delay_us(10);										// wait for some time
	
	databus=((cmd<<4) & 0xf0)|(databus&0x0f);			// Send the Lower Nibble of the command to LCD
     45e:	2b b1       	in	r18, 0x0b	; 11
     460:	30 e1       	ldi	r19, 0x10	; 16
     462:	83 9f       	mul	r24, r19
     464:	c0 01       	movw	r24, r0
     466:	11 24       	eor	r1, r1
     468:	92 2f       	mov	r25, r18
     46a:	9f 70       	andi	r25, 0x0F	; 15
     46c:	89 2b       	or	r24, r25
     46e:	8b b9       	out	0x0b, r24	; 11
	control_bus &=~(1<<rs);								// Select the Command Register by pulling RS LOW
     470:	40 98       	cbi	0x08, 0	; 8
	control_bus &=~(1<<rw);								// Select the Write Operation  by pulling RW LOW
     472:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;								// Send a High-to-Low Pulse at Enable Pin
     474:	42 9a       	sbi	0x08, 2	; 8
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	8a 95       	dec	r24
     47a:	f1 f7       	brne	.-4      	; 0x478 <send_cmd_4bits+0x3e>
     47c:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);	
     47e:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	8f e9       	ldi	r24, 0x9F	; 159
     482:	9f e0       	ldi	r25, 0x0F	; 15
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <send_cmd_4bits+0x4a>
     488:	00 c0       	rjmp	.+0      	; 0x48a <send_cmd_4bits+0x50>
     48a:	00 00       	nop
     48c:	08 95       	ret

0000048e <lcd_init_4bits>:
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	85 ea       	ldi	r24, 0xA5	; 165
     492:	9e e0       	ldi	r25, 0x0E	; 14
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <lcd_init_4bits+0x6>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_init_4bits+0x10>
     49e:	00 00       	nop

//==================LCD Functions Implementation
void lcd_init_4bits()
{
	_delay_ms(300);
	data_pinsmode|=0xf0;			// Configure both databus and controlbus as output
     4a0:	8a b1       	in	r24, 0x0a	; 10
     4a2:	80 6f       	ori	r24, 0xF0	; 240
     4a4:	8a b9       	out	0x0a, r24	; 10
	control_pinsmode|=0x07;
     4a6:	87 b1       	in	r24, 0x07	; 7
     4a8:	87 60       	ori	r24, 0x07	; 7
     4aa:	87 b9       	out	0x07, r24	; 7
	databus=0x00;  					//initialize data bus port
     4ac:	1b b8       	out	0x0b, r1	; 11
     4ae:	2f ef       	ldi	r18, 0xFF	; 255
     4b0:	89 ef       	ldi	r24, 0xF9	; 249
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	80 40       	sbci	r24, 0x00	; 0
     4b8:	90 40       	sbci	r25, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <lcd_init_4bits+0x26>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <lcd_init_4bits+0x30>
     4be:	00 00       	nop
	_delay_ms(20);
	send_cmd_4bits(0x30);
     4c0:	80 e3       	ldi	r24, 0x30	; 48
     4c2:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     4c6:	8f e1       	ldi	r24, 0x1F	; 31
     4c8:	9e e4       	ldi	r25, 0x4E	; 78
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_init_4bits+0x3c>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <lcd_init_4bits+0x42>
     4d0:	00 00       	nop
	_delay_ms(5);
	send_cmd_4bits(0x30);
     4d2:	80 e3       	ldi	r24, 0x30	; 48
     4d4:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     4d8:	8f e9       	ldi	r24, 0x9F	; 159
     4da:	9f e0       	ldi	r25, 0x0F	; 15
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <lcd_init_4bits+0x4e>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <lcd_init_4bits+0x54>
     4e2:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x30);
     4e4:	80 e3       	ldi	r24, 0x30	; 48
     4e6:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     4ea:	8f e9       	ldi	r24, 0x9F	; 159
     4ec:	9f e0       	ldi	r25, 0x0F	; 15
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_init_4bits+0x60>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <lcd_init_4bits+0x66>
     4f4:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x02);			 //Initialize the LCD in 4bit Mode
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     4fc:	8f e9       	ldi	r24, 0x9F	; 159
     4fe:	9f e0       	ldi	r25, 0x0F	; 15
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <lcd_init_4bits+0x72>
     504:	00 c0       	rjmp	.+0      	; 0x506 <lcd_init_4bits+0x78>
     506:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x28);
     508:	88 e2       	ldi	r24, 0x28	; 40
     50a:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     50e:	8f e9       	ldi	r24, 0x9F	; 159
     510:	9f e0       	ldi	r25, 0x0F	; 15
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <lcd_init_4bits+0x84>
     516:	00 c0       	rjmp	.+0      	; 0x518 <lcd_init_4bits+0x8a>
     518:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x06);			//entry mode set: increment cursor & without shifting entire display
     51a:	86 e0       	ldi	r24, 0x06	; 6
     51c:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     520:	8f e9       	ldi	r24, 0x9F	; 159
     522:	9f e0       	ldi	r25, 0x0F	; 15
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <lcd_init_4bits+0x96>
     528:	00 c0       	rjmp	.+0      	; 0x52a <lcd_init_4bits+0x9c>
     52a:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x14);			//cursor or display shift: only cursor shifted right
     52c:	84 e1       	ldi	r24, 0x14	; 20
     52e:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     532:	8f e9       	ldi	r24, 0x9F	; 159
     534:	9f e0       	ldi	r25, 0x0F	; 15
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <lcd_init_4bits+0xa8>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_init_4bits+0xae>
     53c:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x0E);			// Display ON cursor ON
     53e:	8e e0       	ldi	r24, 0x0E	; 14
     540:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     544:	8f e9       	ldi	r24, 0x9F	; 159
     546:	9f e0       	ldi	r25, 0x0F	; 15
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <lcd_init_4bits+0xba>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <lcd_init_4bits+0xc0>
     54e:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x40);			//enable CGRAM
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     556:	8f e9       	ldi	r24, 0x9F	; 159
     558:	9f e0       	ldi	r25, 0x0F	; 15
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <lcd_init_4bits+0xcc>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <lcd_init_4bits+0xd2>
     560:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x80);			// Move the Cursor to First line First Position
     562:	80 e8       	ldi	r24, 0x80	; 128
     564:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     568:	08 95       	ret

0000056a <send_char_4bits>:
	_delay_ms(1);
}
void send_char_4bits( char dat)
{
	//check_busy();
	databus=(dat & 0xf0)|(databus&0x0f);			// Send the Higher Nibble of the Data to LCD
     56a:	9b b1       	in	r25, 0x0b	; 11
     56c:	28 2f       	mov	r18, r24
     56e:	20 7f       	andi	r18, 0xF0	; 240
     570:	9f 70       	andi	r25, 0x0F	; 15
     572:	92 2b       	or	r25, r18
     574:	9b b9       	out	0x0b, r25	; 11
	control_bus |=1<<rs;							// Select the Data Register by pulling RS HIGH
     576:	40 9a       	sbi	0x08, 0	; 8
	control_bus &=~(1<<rw);							// Select the Write Operation  by pulling RW LOW
     578:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
     57a:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57c:	35 e0       	ldi	r19, 0x05	; 5
     57e:	3a 95       	dec	r19
     580:	f1 f7       	brne	.-4      	; 0x57e <send_char_4bits+0x14>
     582:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     584:	42 98       	cbi	0x08, 2	; 8
     586:	95 e3       	ldi	r25, 0x35	; 53
     588:	9a 95       	dec	r25
     58a:	f1 f7       	brne	.-4      	; 0x588 <send_char_4bits+0x1e>
     58c:	00 00       	nop
	_delay_us(10);
	
	databus=((dat <<4) & 0xf0)|(databus&0x0f);		// Send the Lower Nibble of the Data to LCD
     58e:	2b b1       	in	r18, 0x0b	; 11
     590:	30 e1       	ldi	r19, 0x10	; 16
     592:	83 9f       	mul	r24, r19
     594:	c0 01       	movw	r24, r0
     596:	11 24       	eor	r1, r1
     598:	92 2f       	mov	r25, r18
     59a:	9f 70       	andi	r25, 0x0F	; 15
     59c:	89 2b       	or	r24, r25
     59e:	8b b9       	out	0x0b, r24	; 11
	control_bus |=1<<rs;							// Select the Data Register by pulling RS HIGH
     5a0:	40 9a       	sbi	0x08, 0	; 8
	control_bus &=~(1<<rw);							// Select the Write Operation  by pulling RW LOW
     5a2:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
     5a4:	42 9a       	sbi	0x08, 2	; 8
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	8a 95       	dec	r24
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <send_char_4bits+0x3e>
     5ac:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     5ae:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b0:	8f e9       	ldi	r24, 0x9F	; 159
     5b2:	9f e0       	ldi	r25, 0x0F	; 15
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <send_char_4bits+0x4a>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <send_char_4bits+0x50>
     5ba:	00 00       	nop
     5bc:	08 95       	ret

000005be <send_str_4bits>:
	_delay_ms(1);
}
void send_str_4bits(char *string)
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
	while(*string!='\0')
     5c4:	88 81       	ld	r24, Y
     5c6:	88 23       	and	r24, r24
     5c8:	31 f0       	breq	.+12     	; 0x5d6 <send_str_4bits+0x18>
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
	_delay_us(1);
	control_bus &=~(1<<en);
	_delay_ms(1);
}
void send_str_4bits(char *string)
     5ca:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string!='\0')
	{
		send_char_4bits(*string++);
     5cc:	0e 94 b5 02 	call	0x56a	; 0x56a <send_char_4bits>
	control_bus &=~(1<<en);
	_delay_ms(1);
}
void send_str_4bits(char *string)
{
	while(*string!='\0')
     5d0:	89 91       	ld	r24, Y+
     5d2:	81 11       	cpse	r24, r1
     5d4:	fb cf       	rjmp	.-10     	; 0x5cc <send_str_4bits+0xe>
	{
		send_char_4bits(*string++);
	}
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <goto_XY_4bits>:
void goto_XY_4bits(uint8_t x,uint8_t y)
{
	if (y==1)
     5dc:	61 30       	cpi	r22, 0x01	; 1
     5de:	21 f4       	brne	.+8      	; 0x5e8 <goto_XY_4bits+0xc>
	{
		send_cmd_4bits(firstline+x);
     5e0:	80 58       	subi	r24, 0x80	; 128
     5e2:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     5e6:	08 95       	ret
	}
	else if(y==2)
     5e8:	62 30       	cpi	r22, 0x02	; 2
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <goto_XY_4bits+0x16>
	{
		send_cmd_4bits(secondline+x);
     5ec:	80 54       	subi	r24, 0x40	; 64
     5ee:	0e 94 1d 02 	call	0x43a	; 0x43a <send_cmd_4bits>
     5f2:	08 95       	ret

000005f4 <send_str_4bits_withXY>:
	}
}
void send_str_4bits_withXY(uint8_t x,uint8_t y,char *string)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ea 01       	movw	r28, r20
	goto_XY_4bits(x,y);
     5fa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <goto_XY_4bits>
	send_str_4bits(string);
     5fe:	ce 01       	movw	r24, r28
     600:	0e 94 df 02 	call	0x5be	; 0x5be <send_str_4bits>
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <send_int_withXY>:
void send_int_withXY(uint8_t x,uint8_t y,int value,uint8_t no_digits)
{
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	d8 2e       	mov	r13, r24
     620:	c6 2e       	mov	r12, r22
     622:	ca 01       	movw	r24, r20
	char stringToDisplay[no_digits];
	itoa(value,stringToDisplay,10);
	send_str_4bits_withXY(x,y,stringToDisplay);
	//send_str_4bits(" ");
}
     624:	ed b6       	in	r14, 0x3d	; 61
     626:	fe b6       	in	r15, 0x3e	; 62
	goto_XY_4bits(x,y);
	send_str_4bits(string);
}
void send_int_withXY(uint8_t x,uint8_t y,int value,uint8_t no_digits)
{
	char stringToDisplay[no_digits];
     628:	4d b7       	in	r20, 0x3d	; 61
     62a:	5e b7       	in	r21, 0x3e	; 62
     62c:	42 1b       	sub	r20, r18
     62e:	51 09       	sbc	r21, r1
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	5e bf       	out	0x3e, r21	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	4d bf       	out	0x3d, r20	; 61
     63a:	0d b7       	in	r16, 0x3d	; 61
     63c:	1e b7       	in	r17, 0x3e	; 62
     63e:	0f 5f       	subi	r16, 0xFF	; 255
     640:	1f 4f       	sbci	r17, 0xFF	; 255
	itoa(value,stringToDisplay,10);
     642:	4a e0       	ldi	r20, 0x0A	; 10
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	60 2f       	mov	r22, r16
     648:	71 2f       	mov	r23, r17
     64a:	0e 94 25 08 	call	0x104a	; 0x104a <itoa>
	send_str_4bits_withXY(x,y,stringToDisplay);
     64e:	40 2f       	mov	r20, r16
     650:	51 2f       	mov	r21, r17
     652:	6c 2d       	mov	r22, r12
     654:	8d 2d       	mov	r24, r13
     656:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	//send_str_4bits(" ");
}
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	fe be       	out	0x3e, r15	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	ed be       	out	0x3d, r14	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <Display_speeds_distance>:
		inst_speed=0;
	}
}
void Display_speeds_distance()
{
		Calculate_speeds_distance();
     676:	0e 94 76 01 	call	0x2ec	; 0x2ec <Calculate_speeds_distance>
	
	if(inst_speed>9)
     67a:	80 91 2a 01 	lds	r24, 0x012A
     67e:	90 91 2b 01 	lds	r25, 0x012B
     682:	0a 97       	sbiw	r24, 0x0a	; 10
     684:	54 f0       	brlt	.+20     	; 0x69a <Display_speeds_distance+0x24>
	{
		send_int_withXY(0,1,inst_speed,2);
     686:	40 91 2a 01 	lds	r20, 0x012A
     68a:	50 91 2b 01 	lds	r21, 0x012B
     68e:	22 e0       	ldi	r18, 0x02	; 2
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     698:	0f c0       	rjmp	.+30     	; 0x6b8 <Display_speeds_distance+0x42>
	}
	else
	{
		send_str_4bits_withXY(0,1,"0");
     69a:	48 e0       	ldi	r20, 0x08	; 8
     69c:	51 e0       	ldi	r21, 0x01	; 1
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
		send_int_withXY(1,1,inst_speed,1);
     6a6:	40 91 2a 01 	lds	r20, 0x012A
     6aa:	50 91 2b 01 	lds	r21, 0x012B
     6ae:	21 e0       	ldi	r18, 0x01	; 1
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
	}
	if(avg_speed>9)
     6b8:	80 91 28 01 	lds	r24, 0x0128
     6bc:	90 91 29 01 	lds	r25, 0x0129
     6c0:	0a 97       	sbiw	r24, 0x0a	; 10
     6c2:	54 f0       	brlt	.+20     	; 0x6d8 <Display_speeds_distance+0x62>
	{
		send_int_withXY(9,1,avg_speed,2);
     6c4:	40 91 28 01 	lds	r20, 0x0128
     6c8:	50 91 29 01 	lds	r21, 0x0129
     6cc:	22 e0       	ldi	r18, 0x02	; 2
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	89 e0       	ldi	r24, 0x09	; 9
     6d2:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <Display_speeds_distance+0x80>
	}
	else
	{
		send_str_4bits_withXY(9,1,"0");
     6d8:	48 e0       	ldi	r20, 0x08	; 8
     6da:	51 e0       	ldi	r21, 0x01	; 1
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	89 e0       	ldi	r24, 0x09	; 9
     6e0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
		send_int_withXY(10,1,avg_speed,1);
     6e4:	40 91 28 01 	lds	r20, 0x0128
     6e8:	50 91 29 01 	lds	r21, 0x0129
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	8a e0       	ldi	r24, 0x0A	; 10
     6f2:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
	}
	if(laps>9)
     6f6:	80 91 4a 01 	lds	r24, 0x014A
     6fa:	8a 30       	cpi	r24, 0x0A	; 10
     6fc:	48 f0       	brcs	.+18     	; 0x710 <Display_speeds_distance+0x9a>
	{
		send_int_withXY(6,2,laps,2);
     6fe:	40 91 4a 01 	lds	r20, 0x014A
     702:	22 e0       	ldi	r18, 0x02	; 2
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	62 e0       	ldi	r22, 0x02	; 2
     708:	86 e0       	ldi	r24, 0x06	; 6
     70a:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     70e:	08 95       	ret
	}
	else
	{
		send_str_4bits_withXY(6,2,"0");
     710:	48 e0       	ldi	r20, 0x08	; 8
     712:	51 e0       	ldi	r21, 0x01	; 1
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
		send_int_withXY(7,2,laps,1);
     71c:	40 91 4a 01 	lds	r20, 0x014A
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	62 e0       	ldi	r22, 0x02	; 2
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     72c:	08 95       	ret

0000072e <Display_constants>:
	send_cmd_4bits(0x01);
	_delay_ms(2);
}
void Display_constants()
{
	 send_str_4bits_withXY(2,1," Km/h");		//for instantaneous speed
     72e:	4a e0       	ldi	r20, 0x0A	; 10
     730:	51 e0       	ldi	r21, 0x01	; 1
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(7,1,"  ");
     73a:	40 e1       	ldi	r20, 0x10	; 16
     73c:	51 e0       	ldi	r21, 0x01	; 1
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	87 e0       	ldi	r24, 0x07	; 7
     742:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(8,2,"LAPs");
     746:	43 e1       	ldi	r20, 0x13	; 19
     748:	51 e0       	ldi	r21, 0x01	; 1
     74a:	62 e0       	ldi	r22, 0x02	; 2
     74c:	88 e0       	ldi	r24, 0x08	; 8
     74e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(11,1," Km/h");
     752:	4a e0       	ldi	r20, 0x0A	; 10
     754:	51 e0       	ldi	r21, 0x01	; 1
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	8b e0       	ldi	r24, 0x0B	; 11
     75a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(2,2,":");		//for stopwatch
     75e:	48 e1       	ldi	r20, 0x18	; 24
     760:	51 e0       	ldi	r21, 0x01	; 1
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(15,2,"%");		//for Throttle
     76a:	4a e1       	ldi	r20, 0x1A	; 26
     76c:	51 e0       	ldi	r21, 0x01	; 1
     76e:	62 e0       	ldi	r22, 0x02	; 2
     770:	8f e0       	ldi	r24, 0x0F	; 15
     772:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
     776:	08 95       	ret

00000778 <init_ThrottleThump>:

//================Thumb Throttle Functions implementation
void init_ThrottleThump()
{  
   //voltage reference:(with AVCC reference):
    sbi(ADMUX,REFS0);   
     778:	ec e7       	ldi	r30, 0x7C	; 124
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	80 64       	ori	r24, 0x40	; 64
     780:	80 83       	st	Z, r24
    //cbi(ADMUX,REFS1);

    //select ADC3 Channel:
    sbi(ADMUX,MUX0);
     782:	80 81       	ld	r24, Z
     784:	81 60       	ori	r24, 0x01	; 1
     786:	80 83       	st	Z, r24
    sbi(ADMUX,MUX1);
     788:	80 81       	ld	r24, Z
     78a:	82 60       	ori	r24, 0x02	; 2
     78c:	80 83       	st	Z, r24
    cbi(ADMUX,MUX2);
     78e:	80 81       	ld	r24, Z
     790:	8b 7f       	andi	r24, 0xFB	; 251
     792:	80 83       	st	Z, r24
    cbi(ADMUX,MUX3);
     794:	80 81       	ld	r24, Z
     796:	87 7f       	andi	r24, 0xF7	; 247
     798:	80 83       	st	Z, r24

    cbi(ADMUX,ADLAR);    //right adjustment
     79a:	80 81       	ld	r24, Z
     79c:	8f 7d       	andi	r24, 0xDF	; 223
     79e:	80 83       	st	Z, r24

    //prescaler selector: (128 division factor):
    sbi(ADCSRA,ADPS0);
     7a0:	ea e7       	ldi	r30, 0x7A	; 122
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	81 60       	ori	r24, 0x01	; 1
     7a8:	80 83       	st	Z, r24
    sbi(ADCSRA,ADPS1);
     7aa:	80 81       	ld	r24, Z
     7ac:	82 60       	ori	r24, 0x02	; 2
     7ae:	80 83       	st	Z, r24
    sbi(ADCSRA,ADPS2);
     7b0:	80 81       	ld	r24, Z
     7b2:	84 60       	ori	r24, 0x04	; 4
     7b4:	80 83       	st	Z, r24
    sbi(ADCSRA,ADEN);	   //enable ADC
     7b6:	80 81       	ld	r24, Z
     7b8:	80 68       	ori	r24, 0x80	; 128
     7ba:	80 83       	st	Z, r24
	sbi(ADCSRA,ADIE);	   //enable ADC interrupt
     7bc:	80 81       	ld	r24, Z
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	80 83       	st	Z, r24
	sbi(ADCSRA,ADSC);	   //start first conversion
     7c2:	80 81       	ld	r24, Z
     7c4:	80 64       	ori	r24, 0x40	; 64
     7c6:	80 83       	st	Z, r24

    //consumption reduction:
        //disable digital inputs:
        DIDR0=0xff;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	80 93 7e 00 	sts	0x007E, r24
        //POWER reduction:
        sbi(SMCR,SE);   //ENABLE SLEEP MODE
     7ce:	83 b7       	in	r24, 0x33	; 51
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	83 bf       	out	0x33, r24	; 51
        sbi(SMCR,SM0);  //ADC noise cancellation
     7d4:	83 b7       	in	r24, 0x33	; 51
     7d6:	82 60       	ori	r24, 0x02	; 2
     7d8:	83 bf       	out	0x33, r24	; 51
     7da:	08 95       	ret

000007dc <Read_Throttle>:
	/* adcx is the analog pin we want to use.  ADMUX's first few bits are
	 * the binary representations of the numbers of the pins so we can
	 * just 'OR' the pin's number with ADMUX to select that pin.
	 * We first zero the four bits by setting ADMUX equal to its higher
	 * four bits. */
	ADMUX	&=	0xf0;
     7dc:	ec e7       	ldi	r30, 0x7C	; 124
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	90 81       	ld	r25, Z
     7e2:	90 7f       	andi	r25, 0xF0	; 240
     7e4:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
     7e6:	90 81       	ld	r25, Z
     7e8:	89 2b       	or	r24, r25
     7ea:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     7ec:	ea e7       	ldi	r30, 0x7A	; 122
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	80 64       	ori	r24, 0x40	; 64
     7f4:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
     7f6:	80 81       	ld	r24, Z
     7f8:	86 fd       	sbrc	r24, 6
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <Read_Throttle+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     7fc:	20 91 78 00 	lds	r18, 0x0078
     800:	30 91 79 00 	lds	r19, 0x0079
}
     804:	82 2f       	mov	r24, r18
     806:	93 2f       	mov	r25, r19
     808:	08 95       	ret

0000080a <Display_throttle>:
void Display_throttle()
{
   digital_throt_sensor_read=Read_Throttle(3);
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Read_Throttle>
     810:	90 93 23 01 	sts	0x0123, r25
     814:	80 93 22 01 	sts	0x0122, r24
   lcd_throttle_value=floorf(((digital_throt_sensor_read-161)/(1023.0))*99*1.45);
     818:	60 91 22 01 	lds	r22, 0x0122
     81c:	70 91 23 01 	lds	r23, 0x0123
     820:	61 5a       	subi	r22, 0xA1	; 161
     822:	71 09       	sbc	r23, r1
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 ec       	ldi	r19, 0xC0	; 192
     830:	4f e7       	ldi	r20, 0x7F	; 127
     832:	54 e4       	ldi	r21, 0x44	; 68
     834:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	46 ec       	ldi	r20, 0xC6	; 198
     83e:	52 e4       	ldi	r21, 0x42	; 66
     840:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     844:	2a e9       	ldi	r18, 0x9A	; 154
     846:	39 e9       	ldi	r19, 0x99	; 153
     848:	49 eb       	ldi	r20, 0xB9	; 185
     84a:	5f e3       	ldi	r21, 0x3F	; 63
     84c:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     850:	0e 94 ce 06 	call	0xd9c	; 0xd9c <floor>
     854:	60 93 24 01 	sts	0x0124, r22
     858:	70 93 25 01 	sts	0x0125, r23
     85c:	80 93 26 01 	sts	0x0126, r24
     860:	90 93 27 01 	sts	0x0127, r25
   
   if(lcd_throttle_value>9)
     864:	60 91 24 01 	lds	r22, 0x0124
     868:	70 91 25 01 	lds	r23, 0x0125
     86c:	80 91 26 01 	lds	r24, 0x0126
     870:	90 91 27 01 	lds	r25, 0x0127
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e1       	ldi	r20, 0x10	; 16
     87a:	51 e4       	ldi	r21, 0x41	; 65
     87c:	0e 94 72 07 	call	0xee4	; 0xee4 <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	8c f4       	brge	.+34     	; 0x8a6 <Display_throttle+0x9c>
   {
	   send_int_withXY(13,2,lcd_throttle_value,2);
     884:	60 91 24 01 	lds	r22, 0x0124
     888:	70 91 25 01 	lds	r23, 0x0125
     88c:	80 91 26 01 	lds	r24, 0x0126
     890:	90 91 27 01 	lds	r25, 0x0127
     894:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixsfsi>
     898:	22 e0       	ldi	r18, 0x02	; 2
     89a:	ab 01       	movw	r20, r22
     89c:	62 e0       	ldi	r22, 0x02	; 2
     89e:	8d e0       	ldi	r24, 0x0D	; 13
     8a0:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     8a4:	08 95       	ret
   }
   else
   {
	   send_str_4bits_withXY(13,2,"0");
     8a6:	48 e0       	ldi	r20, 0x08	; 8
     8a8:	51 e0       	ldi	r21, 0x01	; 1
     8aa:	62 e0       	ldi	r22, 0x02	; 2
     8ac:	8d e0       	ldi	r24, 0x0D	; 13
     8ae:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
	   send_int_withXY(14,2,lcd_throttle_value,1);
     8b2:	60 91 24 01 	lds	r22, 0x0124
     8b6:	70 91 25 01 	lds	r23, 0x0125
     8ba:	80 91 26 01 	lds	r24, 0x0126
     8be:	90 91 27 01 	lds	r25, 0x0127
     8c2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixsfsi>
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	ab 01       	movw	r20, r22
     8ca:	62 e0       	ldi	r22, 0x02	; 2
     8cc:	8e e0       	ldi	r24, 0x0E	; 14
     8ce:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     8d2:	08 95       	ret

000008d4 <init_servo>:

//===============Servo Functions implementation
void init_servo()
{
	//set OC1A FOR generating PWM
	sbi(DDRB,PB1);
     8d4:	21 9a       	sbi	0x04, 1	; 4
	cbi(PORTB,PB1);
     8d6:	29 98       	cbi	0x05, 1	; 5

	//SELECT MODE:
	//fast PWM: (with top = ICR1 & update its value @ BOTTOM , TOV flag set on TOP)
	sbi(TCCR1A,WGM11);
     8d8:	e0 e8       	ldi	r30, 0x80	; 128
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	82 60       	ori	r24, 0x02	; 2
     8e0:	80 83       	st	Z, r24
	cbi(TCCR1A,WGM10);
     8e2:	80 81       	ld	r24, Z
     8e4:	8e 7f       	andi	r24, 0xFE	; 254
     8e6:	80 83       	st	Z, r24
	sbi(TCCR1B,WGM13);
     8e8:	a1 e8       	ldi	r26, 0x81	; 129
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	8c 91       	ld	r24, X
     8ee:	80 61       	ori	r24, 0x10	; 16
     8f0:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM12);
     8f2:	8c 91       	ld	r24, X
     8f4:	88 60       	ori	r24, 0x08	; 8
     8f6:	8c 93       	st	X, r24
	// non inverting mode : to control on servo motion @ last 2ms in period
	sbi(TCCR1A,COM1A0);
     8f8:	80 81       	ld	r24, Z
     8fa:	80 64       	ori	r24, 0x40	; 64
     8fc:	80 83       	st	Z, r24
	sbi(TCCR1A,COM1A1);
     8fe:	80 81       	ld	r24, Z
     900:	80 68       	ori	r24, 0x80	; 128
     902:	80 83       	st	Z, r24

	//PRECALING (64):(to have 40000 cycle per second which means that every ms has 250 cycles)
	sbi(TCCR1B,CS11);
     904:	8c 91       	ld	r24, X
     906:	82 60       	ori	r24, 0x02	; 2
     908:	8c 93       	st	X, r24
	//sbi(TCCR1B,CS10);
	//setting top value equal 39999 @which starting a new clock
	ICR1=39999;
     90a:	8f e3       	ldi	r24, 0x3F	; 63
     90c:	9c e9       	ldi	r25, 0x9C	; 156
     90e:	90 93 87 00 	sts	0x0087, r25
     912:	80 93 86 00 	sts	0x0086, r24
     916:	08 95       	ret

00000918 <move_servo>:
	
}
void move_servo()
{
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
	
	OCR1A=(ICR1-max_deg)+(duty_cycle*(digital_throt_sensor_read-150));
     924:	60 91 86 00 	lds	r22, 0x0086
     928:	70 91 87 00 	lds	r23, 0x0087
     92c:	c0 91 22 01 	lds	r28, 0x0122
     930:	d0 91 23 01 	lds	r29, 0x0123
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
     93c:	20 91 00 01 	lds	r18, 0x0100
     940:	30 91 01 01 	lds	r19, 0x0101
     944:	40 91 02 01 	lds	r20, 0x0102
     948:	50 91 03 01 	lds	r21, 0x0103
     94c:	0e 94 80 05 	call	0xb00	; 0xb00 <__subsf3>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
     954:	be 01       	movw	r22, r28
     956:	66 59       	subi	r22, 0x96	; 150
     958:	71 09       	sbc	r23, r1
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
     962:	20 91 4b 01 	lds	r18, 0x014B
     966:	30 91 4c 01 	lds	r19, 0x014C
     96a:	40 91 4d 01 	lds	r20, 0x014D
     96e:	50 91 4e 01 	lds	r21, 0x014E
     972:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	c7 01       	movw	r24, r14
     97c:	b6 01       	movw	r22, r12
     97e:	0e 94 81 05 	call	0xb02	; 0xb02 <__addsf3>
     982:	0e 94 65 06 	call	0xcca	; 0xcca <__fixunssfsi>
     986:	70 93 89 00 	sts	0x0089, r23
     98a:	60 93 88 00 	sts	0x0088, r22

}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	08 95       	ret

0000099c <__vector_21>:
	Display_speeds_distance();
}  
   return 0;
}
ISR(ADC_vect)							//on place 22 in interrupt vector table
{
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	move_servo();
     9be:	0e 94 8c 04 	call	0x918	; 0x918 <move_servo>
	Display_throttle();
     9c2:	0e 94 05 04 	call	0x80a	; 0x80a <Display_throttle>
	sbi(ADCSRA,ADSC);
     9c6:	ea e7       	ldi	r30, 0x7A	; 122
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	80 83       	st	Z, r24
}					
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	bf 91       	pop	r27
     9d6:	af 91       	pop	r26
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	7f 91       	pop	r23
     9de:	6f 91       	pop	r22
     9e0:	5f 91       	pop	r21
     9e2:	4f 91       	pop	r20
     9e4:	3f 91       	pop	r19
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <init_timer0>:
//=============================================

//=============Stop Watch Functions implementation
void init_timer0()
{
	sbi(TCCR0B,CS02); 		//PREscaler 256
     9f2:	85 b5       	in	r24, 0x25	; 37
     9f4:	84 60       	ori	r24, 0x04	; 4
     9f6:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK0,TOIE0);		//enable overflow interrupt
     9f8:	ee e6       	ldi	r30, 0x6E	; 110
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 83       	st	Z, r24
     a02:	08 95       	ret

00000a04 <Display_time>:
	
}
void Display_time()
{
	if(minutes>9)
     a04:	80 91 1e 01 	lds	r24, 0x011E
     a08:	90 91 1f 01 	lds	r25, 0x011F
     a0c:	0a 97       	sbiw	r24, 0x0a	; 10
     a0e:	50 f0       	brcs	.+20     	; 0xa24 <Display_time+0x20>
		send_int_withXY(0,2,minutes,2);
     a10:	40 91 1e 01 	lds	r20, 0x011E
     a14:	50 91 1f 01 	lds	r21, 0x011F
     a18:	22 e0       	ldi	r18, 0x02	; 2
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     a22:	0f c0       	rjmp	.+30     	; 0xa42 <Display_time+0x3e>
	else
	{
		send_str_4bits_withXY(0,2,"0");
     a24:	48 e0       	ldi	r20, 0x08	; 8
     a26:	51 e0       	ldi	r21, 0x01	; 1
     a28:	62 e0       	ldi	r22, 0x02	; 2
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
		send_int_withXY(1,2,minutes,1);
     a30:	40 91 1e 01 	lds	r20, 0x011E
     a34:	50 91 1f 01 	lds	r21, 0x011F
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
	}
	if(seconds>9)
     a42:	80 91 20 01 	lds	r24, 0x0120
     a46:	90 91 21 01 	lds	r25, 0x0121
     a4a:	0a 97       	sbiw	r24, 0x0a	; 10
     a4c:	50 f0       	brcs	.+20     	; 0xa62 <Display_time+0x5e>
		send_int_withXY(3,2,seconds,2);
     a4e:	40 91 20 01 	lds	r20, 0x0120
     a52:	50 91 21 01 	lds	r21, 0x0121
     a56:	22 e0       	ldi	r18, 0x02	; 2
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     a60:	08 95       	ret
	else
	{
		send_str_4bits_withXY(3,2,"0");
     a62:	48 e0       	ldi	r20, 0x08	; 8
     a64:	51 e0       	ldi	r21, 0x01	; 1
     a66:	62 e0       	ldi	r22, 0x02	; 2
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <send_str_4bits_withXY>
		send_int_withXY(4,2,seconds,1);
     a6e:	40 91 20 01 	lds	r20, 0x0120
     a72:	50 91 21 01 	lds	r21, 0x0121
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	84 e0       	ldi	r24, 0x04	; 4
     a7c:	0e 94 05 03 	call	0x60a	; 0x60a <send_int_withXY>
     a80:	08 95       	ret

00000a82 <main>:
     a82:	2f ef       	ldi	r18, 0xFF	; 255
     a84:	89 e6       	ldi	r24, 0x69	; 105
     a86:	98 e1       	ldi	r25, 0x18	; 24
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	80 40       	sbci	r24, 0x00	; 0
     a8c:	90 40       	sbci	r25, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <main+0x6>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <main+0x10>
     a92:	00 00       	nop
#include "config.h"

int main(void)
{ 
   _delay_ms(500);
   lcd_init_4bits();
     a94:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_init_4bits>
   sei(); 			//turn on global interrupts
     a98:	78 94       	sei
   //===timer0:
   init_timer0();
     a9a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <init_timer0>
   //====================
   init_timer2();		//initialize timer0 with ctc mode and overflow every 16ms
     a9e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <init_timer2>
   init_ext_interrupts();
     aa2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <init_ext_interrupts>
   //=====Throttle Sensor:
   init_ThrottleThump();
     aa6:	0e 94 bc 03 	call	0x778	; 0x778 <init_ThrottleThump>
   //=========================
   //=======servo:
   init_servo();
     aaa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <init_servo>
   //============================

   duty_cycle=(max_deg-min_deg)/(1024);			//by cross multiplying    
     aae:	20 91 04 01 	lds	r18, 0x0104
     ab2:	30 91 05 01 	lds	r19, 0x0105
     ab6:	40 91 06 01 	lds	r20, 0x0106
     aba:	50 91 07 01 	lds	r21, 0x0107
     abe:	60 91 00 01 	lds	r22, 0x0100
     ac2:	70 91 01 01 	lds	r23, 0x0101
     ac6:	80 91 02 01 	lds	r24, 0x0102
     aca:	90 91 03 01 	lds	r25, 0x0103
     ace:	0e 94 80 05 	call	0xb00	; 0xb00 <__subsf3>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e8       	ldi	r20, 0x80	; 128
     ad8:	5a e3       	ldi	r21, 0x3A	; 58
     ada:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     ade:	60 93 4b 01 	sts	0x014B, r22
     ae2:	70 93 4c 01 	sts	0x014C, r23
     ae6:	80 93 4d 01 	sts	0x014D, r24
     aea:	90 93 4e 01 	sts	0x014E, r25
while (1)
{
	 Display_constants();
     aee:	0e 94 97 03 	call	0x72e	; 0x72e <Display_constants>
	Display_time();
     af2:	0e 94 02 05 	call	0xa04	; 0xa04 <Display_time>
	Speeds_Calculation();
     af6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Speeds_Calculation>
	Display_speeds_distance();
     afa:	0e 94 3b 03 	call	0x676	; 0x676 <Display_speeds_distance>
     afe:	f7 cf       	rjmp	.-18     	; 0xaee <main+0x6c>

00000b00 <__subsf3>:
     b00:	50 58       	subi	r21, 0x80	; 128

00000b02 <__addsf3>:
     b02:	bb 27       	eor	r27, r27
     b04:	aa 27       	eor	r26, r26
     b06:	0e d0       	rcall	.+28     	; 0xb24 <__addsf3x>
     b08:	9c c1       	rjmp	.+824    	; 0xe42 <__fp_round>
     b0a:	8d d1       	rcall	.+794    	; 0xe26 <__fp_pscA>
     b0c:	30 f0       	brcs	.+12     	; 0xb1a <__addsf3+0x18>
     b0e:	92 d1       	rcall	.+804    	; 0xe34 <__fp_pscB>
     b10:	20 f0       	brcs	.+8      	; 0xb1a <__addsf3+0x18>
     b12:	31 f4       	brne	.+12     	; 0xb20 <__addsf3+0x1e>
     b14:	9f 3f       	cpi	r25, 0xFF	; 255
     b16:	11 f4       	brne	.+4      	; 0xb1c <__addsf3+0x1a>
     b18:	1e f4       	brtc	.+6      	; 0xb20 <__addsf3+0x1e>
     b1a:	82 c1       	rjmp	.+772    	; 0xe20 <__fp_nan>
     b1c:	0e f4       	brtc	.+2      	; 0xb20 <__addsf3+0x1e>
     b1e:	e0 95       	com	r30
     b20:	e7 fb       	bst	r30, 7
     b22:	4f c1       	rjmp	.+670    	; 0xdc2 <__fp_inf>

00000b24 <__addsf3x>:
     b24:	e9 2f       	mov	r30, r25
     b26:	9e d1       	rcall	.+828    	; 0xe64 <__fp_split3>
     b28:	80 f3       	brcs	.-32     	; 0xb0a <__addsf3+0x8>
     b2a:	ba 17       	cp	r27, r26
     b2c:	62 07       	cpc	r22, r18
     b2e:	73 07       	cpc	r23, r19
     b30:	84 07       	cpc	r24, r20
     b32:	95 07       	cpc	r25, r21
     b34:	18 f0       	brcs	.+6      	; 0xb3c <__addsf3x+0x18>
     b36:	71 f4       	brne	.+28     	; 0xb54 <__addsf3x+0x30>
     b38:	9e f5       	brtc	.+102    	; 0xba0 <__addsf3x+0x7c>
     b3a:	cd c1       	rjmp	.+922    	; 0xed6 <__fp_zero>
     b3c:	0e f4       	brtc	.+2      	; 0xb40 <__addsf3x+0x1c>
     b3e:	e0 95       	com	r30
     b40:	0b 2e       	mov	r0, r27
     b42:	ba 2f       	mov	r27, r26
     b44:	a0 2d       	mov	r26, r0
     b46:	0b 01       	movw	r0, r22
     b48:	b9 01       	movw	r22, r18
     b4a:	90 01       	movw	r18, r0
     b4c:	0c 01       	movw	r0, r24
     b4e:	ca 01       	movw	r24, r20
     b50:	a0 01       	movw	r20, r0
     b52:	11 24       	eor	r1, r1
     b54:	ff 27       	eor	r31, r31
     b56:	59 1b       	sub	r21, r25
     b58:	99 f0       	breq	.+38     	; 0xb80 <__addsf3x+0x5c>
     b5a:	59 3f       	cpi	r21, 0xF9	; 249
     b5c:	50 f4       	brcc	.+20     	; 0xb72 <__addsf3x+0x4e>
     b5e:	50 3e       	cpi	r21, 0xE0	; 224
     b60:	68 f1       	brcs	.+90     	; 0xbbc <__addsf3x+0x98>
     b62:	1a 16       	cp	r1, r26
     b64:	f0 40       	sbci	r31, 0x00	; 0
     b66:	a2 2f       	mov	r26, r18
     b68:	23 2f       	mov	r18, r19
     b6a:	34 2f       	mov	r19, r20
     b6c:	44 27       	eor	r20, r20
     b6e:	58 5f       	subi	r21, 0xF8	; 248
     b70:	f3 cf       	rjmp	.-26     	; 0xb58 <__addsf3x+0x34>
     b72:	46 95       	lsr	r20
     b74:	37 95       	ror	r19
     b76:	27 95       	ror	r18
     b78:	a7 95       	ror	r26
     b7a:	f0 40       	sbci	r31, 0x00	; 0
     b7c:	53 95       	inc	r21
     b7e:	c9 f7       	brne	.-14     	; 0xb72 <__addsf3x+0x4e>
     b80:	7e f4       	brtc	.+30     	; 0xba0 <__addsf3x+0x7c>
     b82:	1f 16       	cp	r1, r31
     b84:	ba 0b       	sbc	r27, r26
     b86:	62 0b       	sbc	r22, r18
     b88:	73 0b       	sbc	r23, r19
     b8a:	84 0b       	sbc	r24, r20
     b8c:	ba f0       	brmi	.+46     	; 0xbbc <__addsf3x+0x98>
     b8e:	91 50       	subi	r25, 0x01	; 1
     b90:	a1 f0       	breq	.+40     	; 0xbba <__addsf3x+0x96>
     b92:	ff 0f       	add	r31, r31
     b94:	bb 1f       	adc	r27, r27
     b96:	66 1f       	adc	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	88 1f       	adc	r24, r24
     b9c:	c2 f7       	brpl	.-16     	; 0xb8e <__addsf3x+0x6a>
     b9e:	0e c0       	rjmp	.+28     	; 0xbbc <__addsf3x+0x98>
     ba0:	ba 0f       	add	r27, r26
     ba2:	62 1f       	adc	r22, r18
     ba4:	73 1f       	adc	r23, r19
     ba6:	84 1f       	adc	r24, r20
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__addsf3x+0x98>
     baa:	87 95       	ror	r24
     bac:	77 95       	ror	r23
     bae:	67 95       	ror	r22
     bb0:	b7 95       	ror	r27
     bb2:	f7 95       	ror	r31
     bb4:	9e 3f       	cpi	r25, 0xFE	; 254
     bb6:	08 f0       	brcs	.+2      	; 0xbba <__addsf3x+0x96>
     bb8:	b3 cf       	rjmp	.-154    	; 0xb20 <__addsf3+0x1e>
     bba:	93 95       	inc	r25
     bbc:	88 0f       	add	r24, r24
     bbe:	08 f0       	brcs	.+2      	; 0xbc2 <__addsf3x+0x9e>
     bc0:	99 27       	eor	r25, r25
     bc2:	ee 0f       	add	r30, r30
     bc4:	97 95       	ror	r25
     bc6:	87 95       	ror	r24
     bc8:	08 95       	ret

00000bca <ceil>:
     bca:	6e d1       	rcall	.+732    	; 0xea8 <__fp_trunc>
     bcc:	80 f0       	brcs	.+32     	; 0xbee <ceil+0x24>
     bce:	9f 37       	cpi	r25, 0x7F	; 127
     bd0:	40 f4       	brcc	.+16     	; 0xbe2 <ceil+0x18>
     bd2:	91 11       	cpse	r25, r1
     bd4:	0e f4       	brtc	.+2      	; 0xbd8 <ceil+0xe>
     bd6:	80 c1       	rjmp	.+768    	; 0xed8 <__fp_szero>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	9f e3       	ldi	r25, 0x3F	; 63
     be0:	08 95       	ret
     be2:	26 f0       	brts	.+8      	; 0xbec <ceil+0x22>
     be4:	1b 16       	cp	r1, r27
     be6:	61 1d       	adc	r22, r1
     be8:	71 1d       	adc	r23, r1
     bea:	81 1d       	adc	r24, r1
     bec:	f0 c0       	rjmp	.+480    	; 0xdce <__fp_mintl>
     bee:	0a c1       	rjmp	.+532    	; 0xe04 <__fp_mpack>

00000bf0 <__divsf3>:
     bf0:	0c d0       	rcall	.+24     	; 0xc0a <__divsf3x>
     bf2:	27 c1       	rjmp	.+590    	; 0xe42 <__fp_round>
     bf4:	1f d1       	rcall	.+574    	; 0xe34 <__fp_pscB>
     bf6:	40 f0       	brcs	.+16     	; 0xc08 <__divsf3+0x18>
     bf8:	16 d1       	rcall	.+556    	; 0xe26 <__fp_pscA>
     bfa:	30 f0       	brcs	.+12     	; 0xc08 <__divsf3+0x18>
     bfc:	21 f4       	brne	.+8      	; 0xc06 <__divsf3+0x16>
     bfe:	5f 3f       	cpi	r21, 0xFF	; 255
     c00:	19 f0       	breq	.+6      	; 0xc08 <__divsf3+0x18>
     c02:	df c0       	rjmp	.+446    	; 0xdc2 <__fp_inf>
     c04:	51 11       	cpse	r21, r1
     c06:	68 c1       	rjmp	.+720    	; 0xed8 <__fp_szero>
     c08:	0b c1       	rjmp	.+534    	; 0xe20 <__fp_nan>

00000c0a <__divsf3x>:
     c0a:	2c d1       	rcall	.+600    	; 0xe64 <__fp_split3>
     c0c:	98 f3       	brcs	.-26     	; 0xbf4 <__divsf3+0x4>

00000c0e <__divsf3_pse>:
     c0e:	99 23       	and	r25, r25
     c10:	c9 f3       	breq	.-14     	; 0xc04 <__divsf3+0x14>
     c12:	55 23       	and	r21, r21
     c14:	b1 f3       	breq	.-20     	; 0xc02 <__divsf3+0x12>
     c16:	95 1b       	sub	r25, r21
     c18:	55 0b       	sbc	r21, r21
     c1a:	bb 27       	eor	r27, r27
     c1c:	aa 27       	eor	r26, r26
     c1e:	62 17       	cp	r22, r18
     c20:	73 07       	cpc	r23, r19
     c22:	84 07       	cpc	r24, r20
     c24:	38 f0       	brcs	.+14     	; 0xc34 <__divsf3_pse+0x26>
     c26:	9f 5f       	subi	r25, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	44 1f       	adc	r20, r20
     c30:	aa 1f       	adc	r26, r26
     c32:	a9 f3       	breq	.-22     	; 0xc1e <__divsf3_pse+0x10>
     c34:	33 d0       	rcall	.+102    	; 0xc9c <__divsf3_pse+0x8e>
     c36:	0e 2e       	mov	r0, r30
     c38:	3a f0       	brmi	.+14     	; 0xc48 <__divsf3_pse+0x3a>
     c3a:	e0 e8       	ldi	r30, 0x80	; 128
     c3c:	30 d0       	rcall	.+96     	; 0xc9e <__divsf3_pse+0x90>
     c3e:	91 50       	subi	r25, 0x01	; 1
     c40:	50 40       	sbci	r21, 0x00	; 0
     c42:	e6 95       	lsr	r30
     c44:	00 1c       	adc	r0, r0
     c46:	ca f7       	brpl	.-14     	; 0xc3a <__divsf3_pse+0x2c>
     c48:	29 d0       	rcall	.+82     	; 0xc9c <__divsf3_pse+0x8e>
     c4a:	fe 2f       	mov	r31, r30
     c4c:	27 d0       	rcall	.+78     	; 0xc9c <__divsf3_pse+0x8e>
     c4e:	66 0f       	add	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	88 1f       	adc	r24, r24
     c54:	bb 1f       	adc	r27, r27
     c56:	26 17       	cp	r18, r22
     c58:	37 07       	cpc	r19, r23
     c5a:	48 07       	cpc	r20, r24
     c5c:	ab 07       	cpc	r26, r27
     c5e:	b0 e8       	ldi	r27, 0x80	; 128
     c60:	09 f0       	breq	.+2      	; 0xc64 <__divsf3_pse+0x56>
     c62:	bb 0b       	sbc	r27, r27
     c64:	80 2d       	mov	r24, r0
     c66:	bf 01       	movw	r22, r30
     c68:	ff 27       	eor	r31, r31
     c6a:	93 58       	subi	r25, 0x83	; 131
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	2a f0       	brmi	.+10     	; 0xc7a <__divsf3_pse+0x6c>
     c70:	9e 3f       	cpi	r25, 0xFE	; 254
     c72:	51 05       	cpc	r21, r1
     c74:	68 f0       	brcs	.+26     	; 0xc90 <__divsf3_pse+0x82>
     c76:	a5 c0       	rjmp	.+330    	; 0xdc2 <__fp_inf>
     c78:	2f c1       	rjmp	.+606    	; 0xed8 <__fp_szero>
     c7a:	5f 3f       	cpi	r21, 0xFF	; 255
     c7c:	ec f3       	brlt	.-6      	; 0xc78 <__divsf3_pse+0x6a>
     c7e:	98 3e       	cpi	r25, 0xE8	; 232
     c80:	dc f3       	brlt	.-10     	; 0xc78 <__divsf3_pse+0x6a>
     c82:	86 95       	lsr	r24
     c84:	77 95       	ror	r23
     c86:	67 95       	ror	r22
     c88:	b7 95       	ror	r27
     c8a:	f7 95       	ror	r31
     c8c:	9f 5f       	subi	r25, 0xFF	; 255
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <__divsf3_pse+0x74>
     c90:	88 0f       	add	r24, r24
     c92:	91 1d       	adc	r25, r1
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	97 f9       	bld	r25, 7
     c9a:	08 95       	ret
     c9c:	e1 e0       	ldi	r30, 0x01	; 1
     c9e:	66 0f       	add	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	88 1f       	adc	r24, r24
     ca4:	bb 1f       	adc	r27, r27
     ca6:	62 17       	cp	r22, r18
     ca8:	73 07       	cpc	r23, r19
     caa:	84 07       	cpc	r24, r20
     cac:	ba 07       	cpc	r27, r26
     cae:	20 f0       	brcs	.+8      	; 0xcb8 <__divsf3_pse+0xaa>
     cb0:	62 1b       	sub	r22, r18
     cb2:	73 0b       	sbc	r23, r19
     cb4:	84 0b       	sbc	r24, r20
     cb6:	ba 0b       	sbc	r27, r26
     cb8:	ee 1f       	adc	r30, r30
     cba:	88 f7       	brcc	.-30     	; 0xc9e <__divsf3_pse+0x90>
     cbc:	e0 95       	com	r30
     cbe:	08 95       	ret

00000cc0 <__fixsfsi>:
     cc0:	04 d0       	rcall	.+8      	; 0xcca <__fixunssfsi>
     cc2:	68 94       	set
     cc4:	b1 11       	cpse	r27, r1
     cc6:	08 c1       	rjmp	.+528    	; 0xed8 <__fp_szero>
     cc8:	08 95       	ret

00000cca <__fixunssfsi>:
     cca:	d4 d0       	rcall	.+424    	; 0xe74 <__fp_splitA>
     ccc:	88 f0       	brcs	.+34     	; 0xcf0 <__fixunssfsi+0x26>
     cce:	9f 57       	subi	r25, 0x7F	; 127
     cd0:	90 f0       	brcs	.+36     	; 0xcf6 <__fixunssfsi+0x2c>
     cd2:	b9 2f       	mov	r27, r25
     cd4:	99 27       	eor	r25, r25
     cd6:	b7 51       	subi	r27, 0x17	; 23
     cd8:	a0 f0       	brcs	.+40     	; 0xd02 <__fixunssfsi+0x38>
     cda:	d1 f0       	breq	.+52     	; 0xd10 <__fixunssfsi+0x46>
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	88 1f       	adc	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	1a f0       	brmi	.+6      	; 0xcec <__fixunssfsi+0x22>
     ce6:	ba 95       	dec	r27
     ce8:	c9 f7       	brne	.-14     	; 0xcdc <__fixunssfsi+0x12>
     cea:	12 c0       	rjmp	.+36     	; 0xd10 <__fixunssfsi+0x46>
     cec:	b1 30       	cpi	r27, 0x01	; 1
     cee:	81 f0       	breq	.+32     	; 0xd10 <__fixunssfsi+0x46>
     cf0:	f2 d0       	rcall	.+484    	; 0xed6 <__fp_zero>
     cf2:	b1 e0       	ldi	r27, 0x01	; 1
     cf4:	08 95       	ret
     cf6:	ef c0       	rjmp	.+478    	; 0xed6 <__fp_zero>
     cf8:	67 2f       	mov	r22, r23
     cfa:	78 2f       	mov	r23, r24
     cfc:	88 27       	eor	r24, r24
     cfe:	b8 5f       	subi	r27, 0xF8	; 248
     d00:	39 f0       	breq	.+14     	; 0xd10 <__fixunssfsi+0x46>
     d02:	b9 3f       	cpi	r27, 0xF9	; 249
     d04:	cc f3       	brlt	.-14     	; 0xcf8 <__fixunssfsi+0x2e>
     d06:	86 95       	lsr	r24
     d08:	77 95       	ror	r23
     d0a:	67 95       	ror	r22
     d0c:	b3 95       	inc	r27
     d0e:	d9 f7       	brne	.-10     	; 0xd06 <__fixunssfsi+0x3c>
     d10:	3e f4       	brtc	.+14     	; 0xd20 <__fixunssfsi+0x56>
     d12:	90 95       	com	r25
     d14:	80 95       	com	r24
     d16:	70 95       	com	r23
     d18:	61 95       	neg	r22
     d1a:	7f 4f       	sbci	r23, 0xFF	; 255
     d1c:	8f 4f       	sbci	r24, 0xFF	; 255
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	08 95       	ret

00000d22 <__floatunsisf>:
     d22:	e8 94       	clt
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <__floatsisf+0x12>

00000d26 <__floatsisf>:
     d26:	97 fb       	bst	r25, 7
     d28:	3e f4       	brtc	.+14     	; 0xd38 <__floatsisf+0x12>
     d2a:	90 95       	com	r25
     d2c:	80 95       	com	r24
     d2e:	70 95       	com	r23
     d30:	61 95       	neg	r22
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	8f 4f       	sbci	r24, 0xFF	; 255
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	99 23       	and	r25, r25
     d3a:	a9 f0       	breq	.+42     	; 0xd66 <__floatsisf+0x40>
     d3c:	f9 2f       	mov	r31, r25
     d3e:	96 e9       	ldi	r25, 0x96	; 150
     d40:	bb 27       	eor	r27, r27
     d42:	93 95       	inc	r25
     d44:	f6 95       	lsr	r31
     d46:	87 95       	ror	r24
     d48:	77 95       	ror	r23
     d4a:	67 95       	ror	r22
     d4c:	b7 95       	ror	r27
     d4e:	f1 11       	cpse	r31, r1
     d50:	f8 cf       	rjmp	.-16     	; 0xd42 <__floatsisf+0x1c>
     d52:	fa f4       	brpl	.+62     	; 0xd92 <__floatsisf+0x6c>
     d54:	bb 0f       	add	r27, r27
     d56:	11 f4       	brne	.+4      	; 0xd5c <__floatsisf+0x36>
     d58:	60 ff       	sbrs	r22, 0
     d5a:	1b c0       	rjmp	.+54     	; 0xd92 <__floatsisf+0x6c>
     d5c:	6f 5f       	subi	r22, 0xFF	; 255
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	8f 4f       	sbci	r24, 0xFF	; 255
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	16 c0       	rjmp	.+44     	; 0xd92 <__floatsisf+0x6c>
     d66:	88 23       	and	r24, r24
     d68:	11 f0       	breq	.+4      	; 0xd6e <__floatsisf+0x48>
     d6a:	96 e9       	ldi	r25, 0x96	; 150
     d6c:	11 c0       	rjmp	.+34     	; 0xd90 <__floatsisf+0x6a>
     d6e:	77 23       	and	r23, r23
     d70:	21 f0       	breq	.+8      	; 0xd7a <__floatsisf+0x54>
     d72:	9e e8       	ldi	r25, 0x8E	; 142
     d74:	87 2f       	mov	r24, r23
     d76:	76 2f       	mov	r23, r22
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <__floatsisf+0x5e>
     d7a:	66 23       	and	r22, r22
     d7c:	71 f0       	breq	.+28     	; 0xd9a <__floatsisf+0x74>
     d7e:	96 e8       	ldi	r25, 0x86	; 134
     d80:	86 2f       	mov	r24, r22
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	2a f0       	brmi	.+10     	; 0xd92 <__floatsisf+0x6c>
     d88:	9a 95       	dec	r25
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	da f7       	brpl	.-10     	; 0xd88 <__floatsisf+0x62>
     d92:	88 0f       	add	r24, r24
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	97 f9       	bld	r25, 7
     d9a:	08 95       	ret

00000d9c <floor>:
     d9c:	85 d0       	rcall	.+266    	; 0xea8 <__fp_trunc>
     d9e:	80 f0       	brcs	.+32     	; 0xdc0 <floor+0x24>
     da0:	9f 37       	cpi	r25, 0x7F	; 127
     da2:	40 f4       	brcc	.+16     	; 0xdb4 <floor+0x18>
     da4:	91 11       	cpse	r25, r1
     da6:	0e f0       	brts	.+2      	; 0xdaa <floor+0xe>
     da8:	97 c0       	rjmp	.+302    	; 0xed8 <__fp_szero>
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	80 e8       	ldi	r24, 0x80	; 128
     db0:	9f eb       	ldi	r25, 0xBF	; 191
     db2:	08 95       	ret
     db4:	26 f4       	brtc	.+8      	; 0xdbe <floor+0x22>
     db6:	1b 16       	cp	r1, r27
     db8:	61 1d       	adc	r22, r1
     dba:	71 1d       	adc	r23, r1
     dbc:	81 1d       	adc	r24, r1
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <__fp_mintl>
     dc0:	21 c0       	rjmp	.+66     	; 0xe04 <__fp_mpack>

00000dc2 <__fp_inf>:
     dc2:	97 f9       	bld	r25, 7
     dc4:	9f 67       	ori	r25, 0x7F	; 127
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	08 95       	ret

00000dce <__fp_mintl>:
     dce:	88 23       	and	r24, r24
     dd0:	71 f4       	brne	.+28     	; 0xdee <__fp_mintl+0x20>
     dd2:	77 23       	and	r23, r23
     dd4:	21 f0       	breq	.+8      	; 0xdde <__fp_mintl+0x10>
     dd6:	98 50       	subi	r25, 0x08	; 8
     dd8:	87 2b       	or	r24, r23
     dda:	76 2f       	mov	r23, r22
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <__fp_mintl+0x1e>
     dde:	66 23       	and	r22, r22
     de0:	11 f4       	brne	.+4      	; 0xde6 <__fp_mintl+0x18>
     de2:	99 27       	eor	r25, r25
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <__fp_mintl+0x32>
     de6:	90 51       	subi	r25, 0x10	; 16
     de8:	86 2b       	or	r24, r22
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	2a f0       	brmi	.+10     	; 0xdfa <__fp_mintl+0x2c>
     df0:	9a 95       	dec	r25
     df2:	66 0f       	add	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	88 1f       	adc	r24, r24
     df8:	da f7       	brpl	.-10     	; 0xdf0 <__fp_mintl+0x22>
     dfa:	88 0f       	add	r24, r24
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret

00000e04 <__fp_mpack>:
     e04:	9f 3f       	cpi	r25, 0xFF	; 255
     e06:	31 f0       	breq	.+12     	; 0xe14 <__fp_mpack_finite+0xc>

00000e08 <__fp_mpack_finite>:
     e08:	91 50       	subi	r25, 0x01	; 1
     e0a:	20 f4       	brcc	.+8      	; 0xe14 <__fp_mpack_finite+0xc>
     e0c:	87 95       	ror	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b7 95       	ror	r27
     e14:	88 0f       	add	r24, r24
     e16:	91 1d       	adc	r25, r1
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	97 f9       	bld	r25, 7
     e1e:	08 95       	ret

00000e20 <__fp_nan>:
     e20:	9f ef       	ldi	r25, 0xFF	; 255
     e22:	80 ec       	ldi	r24, 0xC0	; 192
     e24:	08 95       	ret

00000e26 <__fp_pscA>:
     e26:	00 24       	eor	r0, r0
     e28:	0a 94       	dec	r0
     e2a:	16 16       	cp	r1, r22
     e2c:	17 06       	cpc	r1, r23
     e2e:	18 06       	cpc	r1, r24
     e30:	09 06       	cpc	r0, r25
     e32:	08 95       	ret

00000e34 <__fp_pscB>:
     e34:	00 24       	eor	r0, r0
     e36:	0a 94       	dec	r0
     e38:	12 16       	cp	r1, r18
     e3a:	13 06       	cpc	r1, r19
     e3c:	14 06       	cpc	r1, r20
     e3e:	05 06       	cpc	r0, r21
     e40:	08 95       	ret

00000e42 <__fp_round>:
     e42:	09 2e       	mov	r0, r25
     e44:	03 94       	inc	r0
     e46:	00 0c       	add	r0, r0
     e48:	11 f4       	brne	.+4      	; 0xe4e <__fp_round+0xc>
     e4a:	88 23       	and	r24, r24
     e4c:	52 f0       	brmi	.+20     	; 0xe62 <__fp_round+0x20>
     e4e:	bb 0f       	add	r27, r27
     e50:	40 f4       	brcc	.+16     	; 0xe62 <__fp_round+0x20>
     e52:	bf 2b       	or	r27, r31
     e54:	11 f4       	brne	.+4      	; 0xe5a <__fp_round+0x18>
     e56:	60 ff       	sbrs	r22, 0
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <__fp_round+0x20>
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	08 95       	ret

00000e64 <__fp_split3>:
     e64:	57 fd       	sbrc	r21, 7
     e66:	90 58       	subi	r25, 0x80	; 128
     e68:	44 0f       	add	r20, r20
     e6a:	55 1f       	adc	r21, r21
     e6c:	59 f0       	breq	.+22     	; 0xe84 <__fp_splitA+0x10>
     e6e:	5f 3f       	cpi	r21, 0xFF	; 255
     e70:	71 f0       	breq	.+28     	; 0xe8e <__fp_splitA+0x1a>
     e72:	47 95       	ror	r20

00000e74 <__fp_splitA>:
     e74:	88 0f       	add	r24, r24
     e76:	97 fb       	bst	r25, 7
     e78:	99 1f       	adc	r25, r25
     e7a:	61 f0       	breq	.+24     	; 0xe94 <__fp_splitA+0x20>
     e7c:	9f 3f       	cpi	r25, 0xFF	; 255
     e7e:	79 f0       	breq	.+30     	; 0xe9e <__fp_splitA+0x2a>
     e80:	87 95       	ror	r24
     e82:	08 95       	ret
     e84:	12 16       	cp	r1, r18
     e86:	13 06       	cpc	r1, r19
     e88:	14 06       	cpc	r1, r20
     e8a:	55 1f       	adc	r21, r21
     e8c:	f2 cf       	rjmp	.-28     	; 0xe72 <__fp_split3+0xe>
     e8e:	46 95       	lsr	r20
     e90:	f1 df       	rcall	.-30     	; 0xe74 <__fp_splitA>
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <__fp_splitA+0x30>
     e94:	16 16       	cp	r1, r22
     e96:	17 06       	cpc	r1, r23
     e98:	18 06       	cpc	r1, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	f1 cf       	rjmp	.-30     	; 0xe80 <__fp_splitA+0xc>
     e9e:	86 95       	lsr	r24
     ea0:	71 05       	cpc	r23, r1
     ea2:	61 05       	cpc	r22, r1
     ea4:	08 94       	sec
     ea6:	08 95       	ret

00000ea8 <__fp_trunc>:
     ea8:	e5 df       	rcall	.-54     	; 0xe74 <__fp_splitA>
     eaa:	a0 f0       	brcs	.+40     	; 0xed4 <__fp_trunc+0x2c>
     eac:	be e7       	ldi	r27, 0x7E	; 126
     eae:	b9 17       	cp	r27, r25
     eb0:	88 f4       	brcc	.+34     	; 0xed4 <__fp_trunc+0x2c>
     eb2:	bb 27       	eor	r27, r27
     eb4:	9f 38       	cpi	r25, 0x8F	; 143
     eb6:	60 f4       	brcc	.+24     	; 0xed0 <__fp_trunc+0x28>
     eb8:	16 16       	cp	r1, r22
     eba:	b1 1d       	adc	r27, r1
     ebc:	67 2f       	mov	r22, r23
     ebe:	78 2f       	mov	r23, r24
     ec0:	88 27       	eor	r24, r24
     ec2:	98 5f       	subi	r25, 0xF8	; 248
     ec4:	f7 cf       	rjmp	.-18     	; 0xeb4 <__fp_trunc+0xc>
     ec6:	86 95       	lsr	r24
     ec8:	77 95       	ror	r23
     eca:	67 95       	ror	r22
     ecc:	b1 1d       	adc	r27, r1
     ece:	93 95       	inc	r25
     ed0:	96 39       	cpi	r25, 0x96	; 150
     ed2:	c8 f3       	brcs	.-14     	; 0xec6 <__fp_trunc+0x1e>
     ed4:	08 95       	ret

00000ed6 <__fp_zero>:
     ed6:	e8 94       	clt

00000ed8 <__fp_szero>:
     ed8:	bb 27       	eor	r27, r27
     eda:	66 27       	eor	r22, r22
     edc:	77 27       	eor	r23, r23
     ede:	cb 01       	movw	r24, r22
     ee0:	97 f9       	bld	r25, 7
     ee2:	08 95       	ret

00000ee4 <__gesf2>:
     ee4:	66 d0       	rcall	.+204    	; 0xfb2 <__fp_cmp>
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__gesf2+0x6>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	08 95       	ret

00000eec <__mulsf3>:
     eec:	0b d0       	rcall	.+22     	; 0xf04 <__mulsf3x>
     eee:	a9 cf       	rjmp	.-174    	; 0xe42 <__fp_round>
     ef0:	9a df       	rcall	.-204    	; 0xe26 <__fp_pscA>
     ef2:	28 f0       	brcs	.+10     	; 0xefe <__mulsf3+0x12>
     ef4:	9f df       	rcall	.-194    	; 0xe34 <__fp_pscB>
     ef6:	18 f0       	brcs	.+6      	; 0xefe <__mulsf3+0x12>
     ef8:	95 23       	and	r25, r21
     efa:	09 f0       	breq	.+2      	; 0xefe <__mulsf3+0x12>
     efc:	62 cf       	rjmp	.-316    	; 0xdc2 <__fp_inf>
     efe:	90 cf       	rjmp	.-224    	; 0xe20 <__fp_nan>
     f00:	11 24       	eor	r1, r1
     f02:	ea cf       	rjmp	.-44     	; 0xed8 <__fp_szero>

00000f04 <__mulsf3x>:
     f04:	af df       	rcall	.-162    	; 0xe64 <__fp_split3>
     f06:	a0 f3       	brcs	.-24     	; 0xef0 <__mulsf3+0x4>

00000f08 <__mulsf3_pse>:
     f08:	95 9f       	mul	r25, r21
     f0a:	d1 f3       	breq	.-12     	; 0xf00 <__mulsf3+0x14>
     f0c:	95 0f       	add	r25, r21
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	55 1f       	adc	r21, r21
     f12:	62 9f       	mul	r22, r18
     f14:	f0 01       	movw	r30, r0
     f16:	72 9f       	mul	r23, r18
     f18:	bb 27       	eor	r27, r27
     f1a:	f0 0d       	add	r31, r0
     f1c:	b1 1d       	adc	r27, r1
     f1e:	63 9f       	mul	r22, r19
     f20:	aa 27       	eor	r26, r26
     f22:	f0 0d       	add	r31, r0
     f24:	b1 1d       	adc	r27, r1
     f26:	aa 1f       	adc	r26, r26
     f28:	64 9f       	mul	r22, r20
     f2a:	66 27       	eor	r22, r22
     f2c:	b0 0d       	add	r27, r0
     f2e:	a1 1d       	adc	r26, r1
     f30:	66 1f       	adc	r22, r22
     f32:	82 9f       	mul	r24, r18
     f34:	22 27       	eor	r18, r18
     f36:	b0 0d       	add	r27, r0
     f38:	a1 1d       	adc	r26, r1
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 9f       	mul	r23, r19
     f3e:	b0 0d       	add	r27, r0
     f40:	a1 1d       	adc	r26, r1
     f42:	62 1f       	adc	r22, r18
     f44:	83 9f       	mul	r24, r19
     f46:	a0 0d       	add	r26, r0
     f48:	61 1d       	adc	r22, r1
     f4a:	22 1f       	adc	r18, r18
     f4c:	74 9f       	mul	r23, r20
     f4e:	33 27       	eor	r19, r19
     f50:	a0 0d       	add	r26, r0
     f52:	61 1d       	adc	r22, r1
     f54:	23 1f       	adc	r18, r19
     f56:	84 9f       	mul	r24, r20
     f58:	60 0d       	add	r22, r0
     f5a:	21 1d       	adc	r18, r1
     f5c:	82 2f       	mov	r24, r18
     f5e:	76 2f       	mov	r23, r22
     f60:	6a 2f       	mov	r22, r26
     f62:	11 24       	eor	r1, r1
     f64:	9f 57       	subi	r25, 0x7F	; 127
     f66:	50 40       	sbci	r21, 0x00	; 0
     f68:	8a f0       	brmi	.+34     	; 0xf8c <__mulsf3_pse+0x84>
     f6a:	e1 f0       	breq	.+56     	; 0xfa4 <__mulsf3_pse+0x9c>
     f6c:	88 23       	and	r24, r24
     f6e:	4a f0       	brmi	.+18     	; 0xf82 <__mulsf3_pse+0x7a>
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	bb 1f       	adc	r27, r27
     f76:	66 1f       	adc	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	91 50       	subi	r25, 0x01	; 1
     f7e:	50 40       	sbci	r21, 0x00	; 0
     f80:	a9 f7       	brne	.-22     	; 0xf6c <__mulsf3_pse+0x64>
     f82:	9e 3f       	cpi	r25, 0xFE	; 254
     f84:	51 05       	cpc	r21, r1
     f86:	70 f0       	brcs	.+28     	; 0xfa4 <__mulsf3_pse+0x9c>
     f88:	1c cf       	rjmp	.-456    	; 0xdc2 <__fp_inf>
     f8a:	a6 cf       	rjmp	.-180    	; 0xed8 <__fp_szero>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	ec f3       	brlt	.-6      	; 0xf8a <__mulsf3_pse+0x82>
     f90:	98 3e       	cpi	r25, 0xE8	; 232
     f92:	dc f3       	brlt	.-10     	; 0xf8a <__mulsf3_pse+0x82>
     f94:	86 95       	lsr	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	e7 95       	ror	r30
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	c1 f7       	brne	.-16     	; 0xf94 <__mulsf3_pse+0x8c>
     fa4:	fe 2b       	or	r31, r30
     fa6:	88 0f       	add	r24, r24
     fa8:	91 1d       	adc	r25, r1
     faa:	96 95       	lsr	r25
     fac:	87 95       	ror	r24
     fae:	97 f9       	bld	r25, 7
     fb0:	08 95       	ret

00000fb2 <__fp_cmp>:
     fb2:	99 0f       	add	r25, r25
     fb4:	00 08       	sbc	r0, r0
     fb6:	55 0f       	add	r21, r21
     fb8:	aa 0b       	sbc	r26, r26
     fba:	e0 e8       	ldi	r30, 0x80	; 128
     fbc:	fe ef       	ldi	r31, 0xFE	; 254
     fbe:	16 16       	cp	r1, r22
     fc0:	17 06       	cpc	r1, r23
     fc2:	e8 07       	cpc	r30, r24
     fc4:	f9 07       	cpc	r31, r25
     fc6:	c0 f0       	brcs	.+48     	; 0xff8 <__fp_cmp+0x46>
     fc8:	12 16       	cp	r1, r18
     fca:	13 06       	cpc	r1, r19
     fcc:	e4 07       	cpc	r30, r20
     fce:	f5 07       	cpc	r31, r21
     fd0:	98 f0       	brcs	.+38     	; 0xff8 <__fp_cmp+0x46>
     fd2:	62 1b       	sub	r22, r18
     fd4:	73 0b       	sbc	r23, r19
     fd6:	84 0b       	sbc	r24, r20
     fd8:	95 0b       	sbc	r25, r21
     fda:	39 f4       	brne	.+14     	; 0xfea <__fp_cmp+0x38>
     fdc:	0a 26       	eor	r0, r26
     fde:	61 f0       	breq	.+24     	; 0xff8 <__fp_cmp+0x46>
     fe0:	23 2b       	or	r18, r19
     fe2:	24 2b       	or	r18, r20
     fe4:	25 2b       	or	r18, r21
     fe6:	21 f4       	brne	.+8      	; 0xff0 <__fp_cmp+0x3e>
     fe8:	08 95       	ret
     fea:	0a 26       	eor	r0, r26
     fec:	09 f4       	brne	.+2      	; 0xff0 <__fp_cmp+0x3e>
     fee:	a1 40       	sbci	r26, 0x01	; 1
     ff0:	a6 95       	lsr	r26
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	81 1d       	adc	r24, r1
     ff6:	81 1d       	adc	r24, r1
     ff8:	08 95       	ret

00000ffa <__divmodhi4>:
     ffa:	97 fb       	bst	r25, 7
     ffc:	07 2e       	mov	r0, r23
     ffe:	16 f4       	brtc	.+4      	; 0x1004 <__divmodhi4+0xa>
    1000:	00 94       	com	r0
    1002:	07 d0       	rcall	.+14     	; 0x1012 <__divmodhi4_neg1>
    1004:	77 fd       	sbrc	r23, 7
    1006:	09 d0       	rcall	.+18     	; 0x101a <__divmodhi4_neg2>
    1008:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodhi4>
    100c:	07 fc       	sbrc	r0, 7
    100e:	05 d0       	rcall	.+10     	; 0x101a <__divmodhi4_neg2>
    1010:	3e f4       	brtc	.+14     	; 0x1020 <__divmodhi4_exit>

00001012 <__divmodhi4_neg1>:
    1012:	90 95       	com	r25
    1014:	81 95       	neg	r24
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	08 95       	ret

0000101a <__divmodhi4_neg2>:
    101a:	70 95       	com	r23
    101c:	61 95       	neg	r22
    101e:	7f 4f       	sbci	r23, 0xFF	; 255

00001020 <__divmodhi4_exit>:
    1020:	08 95       	ret

00001022 <__udivmodhi4>:
    1022:	aa 1b       	sub	r26, r26
    1024:	bb 1b       	sub	r27, r27
    1026:	51 e1       	ldi	r21, 0x11	; 17
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <__udivmodhi4_ep>

0000102a <__udivmodhi4_loop>:
    102a:	aa 1f       	adc	r26, r26
    102c:	bb 1f       	adc	r27, r27
    102e:	a6 17       	cp	r26, r22
    1030:	b7 07       	cpc	r27, r23
    1032:	10 f0       	brcs	.+4      	; 0x1038 <__udivmodhi4_ep>
    1034:	a6 1b       	sub	r26, r22
    1036:	b7 0b       	sbc	r27, r23

00001038 <__udivmodhi4_ep>:
    1038:	88 1f       	adc	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	5a 95       	dec	r21
    103e:	a9 f7       	brne	.-22     	; 0x102a <__udivmodhi4_loop>
    1040:	80 95       	com	r24
    1042:	90 95       	com	r25
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	08 95       	ret

0000104a <itoa>:
    104a:	fb 01       	movw	r30, r22
    104c:	9f 01       	movw	r18, r30
    104e:	e8 94       	clt
    1050:	42 30       	cpi	r20, 0x02	; 2
    1052:	c4 f0       	brlt	.+48     	; 0x1084 <itoa+0x3a>
    1054:	45 32       	cpi	r20, 0x25	; 37
    1056:	b4 f4       	brge	.+44     	; 0x1084 <itoa+0x3a>
    1058:	4a 30       	cpi	r20, 0x0A	; 10
    105a:	29 f4       	brne	.+10     	; 0x1066 <itoa+0x1c>
    105c:	97 fb       	bst	r25, 7
    105e:	1e f4       	brtc	.+6      	; 0x1066 <itoa+0x1c>
    1060:	90 95       	com	r25
    1062:	81 95       	neg	r24
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	64 2f       	mov	r22, r20
    1068:	77 27       	eor	r23, r23
    106a:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodhi4>
    106e:	80 5d       	subi	r24, 0xD0	; 208
    1070:	8a 33       	cpi	r24, 0x3A	; 58
    1072:	0c f0       	brlt	.+2      	; 0x1076 <itoa+0x2c>
    1074:	89 5d       	subi	r24, 0xD9	; 217
    1076:	81 93       	st	Z+, r24
    1078:	cb 01       	movw	r24, r22
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	a1 f7       	brne	.-24     	; 0x1066 <itoa+0x1c>
    107e:	16 f4       	brtc	.+4      	; 0x1084 <itoa+0x3a>
    1080:	5d e2       	ldi	r21, 0x2D	; 45
    1082:	51 93       	st	Z+, r21
    1084:	10 82       	st	Z, r1
    1086:	c9 01       	movw	r24, r18
    1088:	0c 94 46 08 	jmp	0x108c	; 0x108c <strrev>

0000108c <strrev>:
    108c:	dc 01       	movw	r26, r24
    108e:	fc 01       	movw	r30, r24
    1090:	67 2f       	mov	r22, r23
    1092:	71 91       	ld	r23, Z+
    1094:	77 23       	and	r23, r23
    1096:	e1 f7       	brne	.-8      	; 0x1090 <strrev+0x4>
    1098:	32 97       	sbiw	r30, 0x02	; 2
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <strrev+0x18>
    109c:	7c 91       	ld	r23, X
    109e:	6d 93       	st	X+, r22
    10a0:	70 83       	st	Z, r23
    10a2:	62 91       	ld	r22, -Z
    10a4:	ae 17       	cp	r26, r30
    10a6:	bf 07       	cpc	r27, r31
    10a8:	c8 f3       	brcs	.-14     	; 0x109c <strrev+0x10>
    10aa:	08 95       	ret

000010ac <_exit>:
    10ac:	f8 94       	cli

000010ae <__stop_program>:
    10ae:	ff cf       	rjmp	.-2      	; 0x10ae <__stop_program>
