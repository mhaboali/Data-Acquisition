
DashBoard_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000010e2  00001176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080011c  0080011c  00001192  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bed  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004985  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  000049b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013ce  00000000  00000000  00004ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000396  00000000  00000000  00005ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000057a  00000000  00000000  00006238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000034c  00000000  00000000  000067b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000048e  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000638  00000000  00000000  00006f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  000075c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 34       	cpi	r26, 0x4F	; 79
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 56 05 	call	0xaac	; 0xaac <main>
      9e:	0c 94 6f 08 	jmp	0x10de	; 0x10de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
	}
	//for instantaneous speed
	if(inst_spokes_counter==1)				//here completing one cycle
	{
		count_t1=inst_16ms_counter;
		inst_spokes_counter++;
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	8f 93       	push	r24
      b2:	9f 93       	push	r25
	}
	else if(inst_spokes_counter==10)
      b4:	80 91 1c 01 	lds	r24, 0x011C
      b8:	90 91 1d 01 	lds	r25, 0x011D
      bc:	01 96       	adiw	r24, 0x01	; 1
      be:	90 93 1d 01 	sts	0x011D, r25
	{
		count_t2=inst_16ms_counter;
      c2:	80 93 1c 01 	sts	0x011C, r24
      c6:	80 91 1c 01 	lds	r24, 0x011C
      ca:	90 91 1d 01 	lds	r25, 0x011D
      ce:	83 3f       	cpi	r24, 0xF3	; 243
		inst_16ms_counter=0;				//reset instantaneous time counter
      d0:	91 05       	cpc	r25, r1
      d2:	69 f4       	brne	.+26     	; 0xee <__vector_16+0x48>
      d4:	80 91 20 01 	lds	r24, 0x0120
		inst_spokes_counter=0;				//reset instantaneous spokes counter
      d8:	90 91 21 01 	lds	r25, 0x0121
      dc:	01 96       	adiw	r24, 0x01	; 1
      de:	90 93 21 01 	sts	0x0121, r25
		elapsed_distance_cm+=perimeter_cm;			//every 10 pulses"one cycle" increase elasped distance by 157cm
      e2:	80 93 20 01 	sts	0x0120, r24
      e6:	10 92 1d 01 	sts	0x011D, r1
      ea:	10 92 1c 01 	sts	0x011C, r1
      ee:	80 91 20 01 	lds	r24, 0x0120
      f2:	90 91 21 01 	lds	r25, 0x0121
		if((elapsed_distance_cm>=120000) && (elapsed_distance_cm<125000))
      f6:	cc 97       	sbiw	r24, 0x3c	; 60
      f8:	69 f4       	brne	.+26     	; 0x114 <__vector_16+0x6e>
      fa:	80 91 1e 01 	lds	r24, 0x011E
		seconds++;
		couter_prescaling=0;
	}
	if(seconds==60)
	{
		minutes++;
      fe:	90 91 1f 01 	lds	r25, 0x011F
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	90 93 1f 01 	sts	0x011F, r25
     108:	80 93 1e 01 	sts	0x011E, r24
		seconds=0;
     10c:	10 92 21 01 	sts	0x0121, r1
     110:	10 92 20 01 	sts	0x0120, r1
	}
}
     114:	9f 91       	pop	r25
     116:	8f 91       	pop	r24
     118:	0f 90       	pop	r0
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti

00000122 <__vector_7>:
ISR(TIMER2_COMPA_vect)
{
     122:	1f 92       	push	r1
     124:	0f 92       	push	r0
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	0f 92       	push	r0
     12a:	11 24       	eor	r1, r1
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
	TCNT2=0;
     130:	10 92 b2 00 	sts	0x00B2, r1
	inst_16ms_counter++;					//for counting how many 16ms through one cycle
     134:	80 91 32 01 	lds	r24, 0x0132
     138:	90 91 33 01 	lds	r25, 0x0133
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	90 93 33 01 	sts	0x0133, r25
     142:	80 93 32 01 	sts	0x0132, r24
	total_16ms_counter++;				//counting total time through a number of cycles
     146:	80 91 30 01 	lds	r24, 0x0130
     14a:	90 91 31 01 	lds	r25, 0x0131
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	90 93 31 01 	sts	0x0131, r25
     154:	80 93 30 01 	sts	0x0130, r24
}
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	0f 90       	pop	r0
     15e:	0f be       	out	0x3f, r0	; 63
     160:	0f 90       	pop	r0
     162:	1f 90       	pop	r1
     164:	18 95       	reti

00000166 <init_timer2>:

//================Speed Sensor functions implementation 
 void init_timer2()						//CALCUTE TIME FOR SPEED CALCULATIONS
{  
  //ctc mode
   sbi(TCCR2A,WGM21);
     166:	e0 eb       	ldi	r30, 0xB0	; 176
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	82 60       	ori	r24, 0x02	; 2
     16e:	80 83       	st	Z, r24
   //Prescaler 1024
   sbi(TCCR2B,CS20);
     170:	e1 eb       	ldi	r30, 0xB1	; 177
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	81 60       	ori	r24, 0x01	; 1
     178:	80 83       	st	Z, r24
   sbi(TCCR2B,CS21);
     17a:	80 81       	ld	r24, Z
     17c:	82 60       	ori	r24, 0x02	; 2
     17e:	80 83       	st	Z, r24
   sbi(TCCR2B,CS22);
     180:	80 81       	ld	r24, Z
     182:	84 60       	ori	r24, 0x04	; 4
     184:	80 83       	st	Z, r24
   //ENALBE outcompare interrupt:
   sbi(TIMSK2,OCIE2A);
     186:	e0 e7       	ldi	r30, 0x70	; 112
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	80 83       	st	Z, r24
   TCNT2=0x00;
     190:	10 92 b2 00 	sts	0x00B2, r1
   OCR2A=255;				//will overflow every 16ms
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	80 93 b3 00 	sts	0x00B3, r24
     19a:	08 95       	ret

0000019c <init_ext_interrupts>:
} 
void init_ext_interrupts()
{
   cbi(DDRD,PD3);			//sensor input
     19c:	53 98       	cbi	0x0a, 3	; 10
   sbi(PORTD,PD3);			//enable pull up resistor
     19e:	5b 9a       	sbi	0x0b, 3	; 11
   //EICRA|=(1<<ISC01)|(1<<ISC00);	//set triger INT0 for rising edge mode
   EICRA|=(1<<ISC11);			//set trigger INT1 for falling edge mode
     1a0:	e9 e6       	ldi	r30, 0x69	; 105
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 83       	st	Z, r24
   //EIMSK|=(1<<INT0);			//turn on INT0
   EIMSK|=(1<<INT1);			//turn on INT1
     1aa:	e9 9a       	sbi	0x1d, 1	; 29
     1ac:	08 95       	ret

000001ae <__vector_2>:
}
ISR(INT1_vect)							//on place 2 in interrupt vector table
{
     1ae:	1f 92       	push	r1
     1b0:	0f 92       	push	r0
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	0f 92       	push	r0
     1b6:	11 24       	eor	r1, r1
     1b8:	2f 93       	push	r18
     1ba:	3f 93       	push	r19
     1bc:	4f 93       	push	r20
     1be:	5f 93       	push	r21
     1c0:	6f 93       	push	r22
     1c2:	7f 93       	push	r23
     1c4:	8f 93       	push	r24
     1c6:	9f 93       	push	r25
     1c8:	af 93       	push	r26
     1ca:	bf 93       	push	r27
     1cc:	ef 93       	push	r30
     1ce:	ff 93       	push	r31
	total_spokes_counter++;
     1d0:	80 91 36 01 	lds	r24, 0x0136
     1d4:	90 91 37 01 	lds	r25, 0x0137
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	90 93 37 01 	sts	0x0137, r25
     1de:	80 93 36 01 	sts	0x0136, r24
	inst_spokes_counter++;
     1e2:	80 91 34 01 	lds	r24, 0x0134
     1e6:	90 91 35 01 	lds	r25, 0x0135
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 35 01 	sts	0x0135, r25
     1f0:	80 93 34 01 	sts	0x0134, r24
	if(total_spokes_counter==1)
     1f4:	80 91 36 01 	lds	r24, 0x0136
     1f8:	90 91 37 01 	lds	r25, 0x0137
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	49 f4       	brne	.+18     	; 0x212 <__vector_2+0x64>
	{
		count_avg_t1=total_16ms_counter;
     200:	80 91 30 01 	lds	r24, 0x0130
     204:	90 91 31 01 	lds	r25, 0x0131
     208:	90 93 45 01 	sts	0x0145, r25
     20c:	80 93 44 01 	sts	0x0144, r24
     210:	33 c0       	rjmp	.+102    	; 0x278 <__vector_2+0xca>
		
	}
	else if(total_spokes_counter==200)
     212:	80 91 36 01 	lds	r24, 0x0136
     216:	90 91 37 01 	lds	r25, 0x0137
     21a:	88 3c       	cpi	r24, 0xC8	; 200
     21c:	91 05       	cpc	r25, r1
     21e:	61 f5       	brne	.+88     	; 0x278 <__vector_2+0xca>
	{
		count_avg_t2=total_16ms_counter;
     220:	80 91 30 01 	lds	r24, 0x0130
     224:	90 91 31 01 	lds	r25, 0x0131
     228:	90 93 43 01 	sts	0x0143, r25
     22c:	80 93 42 01 	sts	0x0142, r24
		avg_time=ceil((count_avg_t2-count_avg_t1)*0.016);	//time counters difference * 16ms
     230:	60 91 42 01 	lds	r22, 0x0142
     234:	70 91 43 01 	lds	r23, 0x0143
     238:	80 91 44 01 	lds	r24, 0x0144
     23c:	90 91 45 01 	lds	r25, 0x0145
     240:	68 1b       	sub	r22, r24
     242:	79 0b       	sbc	r23, r25
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatunsisf>
     24c:	2f e6       	ldi	r18, 0x6F	; 111
     24e:	32 e1       	ldi	r19, 0x12	; 18
     250:	43 e8       	ldi	r20, 0x83	; 131
     252:	5c e3       	ldi	r21, 0x3C	; 60
     254:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     258:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ceil>
     25c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
     260:	70 93 39 01 	sts	0x0139, r23
     264:	60 93 38 01 	sts	0x0138, r22
		total_16ms_counter=0;				//reset time counter
     268:	10 92 31 01 	sts	0x0131, r1
     26c:	10 92 30 01 	sts	0x0130, r1
		total_spokes_counter=0;				//reset spokes counter
     270:	10 92 37 01 	sts	0x0137, r1
     274:	10 92 36 01 	sts	0x0136, r1
	}
	//for instantaneous speed
	if(inst_spokes_counter==1)				//here completing one cycle
     278:	80 91 34 01 	lds	r24, 0x0134
     27c:	90 91 35 01 	lds	r25, 0x0135
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	91 f4       	brne	.+36     	; 0x2a8 <__vector_2+0xfa>
	{
		count_t1=inst_16ms_counter;
     284:	80 91 32 01 	lds	r24, 0x0132
     288:	90 91 33 01 	lds	r25, 0x0133
     28c:	90 93 49 01 	sts	0x0149, r25
     290:	80 93 48 01 	sts	0x0148, r24
		inst_spokes_counter++;
     294:	80 91 34 01 	lds	r24, 0x0134
     298:	90 91 35 01 	lds	r25, 0x0135
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 35 01 	sts	0x0135, r25
     2a2:	80 93 34 01 	sts	0x0134, r24
     2a6:	16 c0       	rjmp	.+44     	; 0x2d4 <__vector_2+0x126>
	}
	else if(inst_spokes_counter==10)
     2a8:	80 91 34 01 	lds	r24, 0x0134
     2ac:	90 91 35 01 	lds	r25, 0x0135
     2b0:	0a 97       	sbiw	r24, 0x0a	; 10
     2b2:	81 f4       	brne	.+32     	; 0x2d4 <__vector_2+0x126>
	{
		count_t2=inst_16ms_counter;
     2b4:	80 91 32 01 	lds	r24, 0x0132
     2b8:	90 91 33 01 	lds	r25, 0x0133
     2bc:	90 93 47 01 	sts	0x0147, r25
     2c0:	80 93 46 01 	sts	0x0146, r24
		inst_16ms_counter=0;				//reset instantaneous time counter
     2c4:	10 92 33 01 	sts	0x0133, r1
     2c8:	10 92 32 01 	sts	0x0132, r1
		inst_spokes_counter=0;				//reset instantaneous spokes counter
     2cc:	10 92 35 01 	sts	0x0135, r1
     2d0:	10 92 34 01 	sts	0x0134, r1
	}
}
     2d4:	ff 91       	pop	r31
     2d6:	ef 91       	pop	r30
     2d8:	bf 91       	pop	r27
     2da:	af 91       	pop	r26
     2dc:	9f 91       	pop	r25
     2de:	8f 91       	pop	r24
     2e0:	7f 91       	pop	r23
     2e2:	6f 91       	pop	r22
     2e4:	5f 91       	pop	r21
     2e6:	4f 91       	pop	r20
     2e8:	3f 91       	pop	r19
     2ea:	2f 91       	pop	r18
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <Calculate_speeds_distance>:

void Calculate_speeds_distance()
{
	if(inst_spokes_counter==10)
     2f6:	80 91 34 01 	lds	r24, 0x0134
     2fa:	90 91 35 01 	lds	r25, 0x0135
     2fe:	0a 97       	sbiw	r24, 0x0a	; 10
     300:	71 f4       	brne	.+28     	; 0x31e <Calculate_speeds_distance+0x28>
	{
		elapsed_distance_cm+=perimeter_cm;			//every 10 pulses"one cycle" increase elasped distance by 157cm
     302:	80 91 2e 01 	lds	r24, 0x012E
     306:	90 91 2f 01 	lds	r25, 0x012F
     30a:	83 56       	subi	r24, 0x63	; 99
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	90 93 2f 01 	sts	0x012F, r25
     312:	80 93 2e 01 	sts	0x012E, r24
		if((elapsed_distance_cm>=120000) && (elapsed_distance_cm<125000))
     316:	80 91 2e 01 	lds	r24, 0x012E
     31a:	90 91 2f 01 	lds	r25, 0x012F
		{
			laps++;
			elapsed_distance_cm=0;
		}
	}
	if(inst_16ms_counter<35)
     31e:	80 91 32 01 	lds	r24, 0x0132
     322:	90 91 33 01 	lds	r25, 0x0133
     326:	83 97       	sbiw	r24, 0x23	; 35
     328:	08 f0       	brcs	.+2      	; 0x32c <Calculate_speeds_distance+0x36>
     32a:	9b c0       	rjmp	.+310    	; 0x462 <Calculate_speeds_distance+0x16c>
	{
		period=(count_t2-count_t1)*16;					//to calculate difference in time between two pulses.....16 standing for 16ms
     32c:	60 91 46 01 	lds	r22, 0x0146
     330:	70 91 47 01 	lds	r23, 0x0147
     334:	80 91 48 01 	lds	r24, 0x0148
     338:	90 91 49 01 	lds	r25, 0x0149
     33c:	68 1b       	sub	r22, r24
     33e:	79 0b       	sbc	r23, r25
     340:	62 95       	swap	r22
     342:	72 95       	swap	r23
     344:	70 7f       	andi	r23, 0xF0	; 240
     346:	76 27       	eor	r23, r22
     348:	60 7f       	andi	r22, 0xF0	; 240
     34a:	76 27       	eor	r23, r22
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatunsisf>
     354:	60 93 3a 01 	sts	0x013A, r22
     358:	70 93 3b 01 	sts	0x013B, r23
     35c:	80 93 3c 01 	sts	0x013C, r24
     360:	90 93 3d 01 	sts	0x013D, r25
		if(period>0)
     364:	60 91 3a 01 	lds	r22, 0x013A
     368:	70 91 3b 01 	lds	r23, 0x013B
     36c:	80 91 3c 01 	lds	r24, 0x013C
     370:	90 91 3d 01 	lds	r25, 0x013D
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	a9 01       	movw	r20, r18
     37a:	0e 94 8b 07 	call	0xf16	; 0xf16 <__gesf2>
     37e:	18 16       	cp	r1, r24
     380:	dc f4       	brge	.+54     	; 0x3b8 <Calculate_speeds_distance+0xc2>
			freq=(1000.00/period);						//freq=1/period...but 1000/period in HZ
     382:	20 91 3a 01 	lds	r18, 0x013A
     386:	30 91 3b 01 	lds	r19, 0x013B
     38a:	40 91 3c 01 	lds	r20, 0x013C
     38e:	50 91 3d 01 	lds	r21, 0x013D
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	8a e7       	ldi	r24, 0x7A	; 122
     398:	94 e4       	ldi	r25, 0x44	; 68
     39a:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3>
     39e:	46 2f       	mov	r20, r22
     3a0:	57 2f       	mov	r21, r23
     3a2:	68 2f       	mov	r22, r24
     3a4:	79 2f       	mov	r23, r25
     3a6:	40 93 3e 01 	sts	0x013E, r20
     3aa:	50 93 3f 01 	sts	0x013F, r21
     3ae:	60 93 40 01 	sts	0x0140, r22
     3b2:	70 93 41 01 	sts	0x0141, r23
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <Calculate_speeds_distance+0xd2>
		else
			freq=0;
     3b8:	10 92 3e 01 	sts	0x013E, r1
     3bc:	10 92 3f 01 	sts	0x013F, r1
     3c0:	10 92 40 01 	sts	0x0140, r1
     3c4:	10 92 41 01 	sts	0x0141, r1
		inst_speed=ceil((perimeter_cm*freq/100)*3.6);			//instantaneous speed in km/hour
     3c8:	60 91 3e 01 	lds	r22, 0x013E
     3cc:	70 91 3f 01 	lds	r23, 0x013F
     3d0:	80 91 40 01 	lds	r24, 0x0140
     3d4:	90 91 41 01 	lds	r25, 0x0141
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	4d e1       	ldi	r20, 0x1D	; 29
     3de:	53 e4       	ldi	r21, 0x43	; 67
     3e0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	48 ec       	ldi	r20, 0xC8	; 200
     3ea:	52 e4       	ldi	r21, 0x42	; 66
     3ec:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3>
     3f0:	26 e6       	ldi	r18, 0x66	; 102
     3f2:	36 e6       	ldi	r19, 0x66	; 102
     3f4:	46 e6       	ldi	r20, 0x66	; 102
     3f6:	50 e4       	ldi	r21, 0x40	; 64
     3f8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     3fc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ceil>
     400:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixsfsi>
     404:	70 93 2b 01 	sts	0x012B, r23
     408:	60 93 2a 01 	sts	0x012A, r22
		avg_speed=ceil((avg_distance_m/avg_time)*3.6); 			//average speed in km/hour
     40c:	60 91 38 01 	lds	r22, 0x0138
     410:	70 91 39 01 	lds	r23, 0x0139
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatunsisf>
     41c:	9b 01       	movw	r18, r22
     41e:	ac 01       	movw	r20, r24
     420:	63 e3       	ldi	r22, 0x33	; 51
     422:	73 e3       	ldi	r23, 0x33	; 51
     424:	8b ef       	ldi	r24, 0xFB	; 251
     426:	91 e4       	ldi	r25, 0x41	; 65
     428:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3>
     42c:	26 e6       	ldi	r18, 0x66	; 102
     42e:	36 e6       	ldi	r19, 0x66	; 102
     430:	46 e6       	ldi	r20, 0x66	; 102
     432:	50 e4       	ldi	r21, 0x40	; 64
     434:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     438:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ceil>
     43c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixsfsi>
     440:	70 93 29 01 	sts	0x0129, r23
     444:	60 93 28 01 	sts	0x0128, r22
		elapsed_distance_m=(int)elapsed_distance_cm/100;
     448:	80 91 2e 01 	lds	r24, 0x012E
     44c:	90 91 2f 01 	lds	r25, 0x012F
     450:	64 e6       	ldi	r22, 0x64	; 100
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 16 08 	call	0x102c	; 0x102c <__divmodhi4>
     458:	70 93 2d 01 	sts	0x012D, r23
     45c:	60 93 2c 01 	sts	0x012C, r22
     460:	08 95       	ret
	}
	else
	{
		inst_speed=0;
     462:	10 92 2b 01 	sts	0x012B, r1
     466:	10 92 2a 01 	sts	0x012A, r1
     46a:	08 95       	ret

0000046c <send_cmd_4bits>:
	send_cmd_4bits(0x80);			// Move the Cursor to First line First Position
	//send_cmd_4bits(0x01);
}
void send_cmd_4bits( char cmd)
{
	databus=(cmd & 0xf0)|(databus&0x0f);				// Send the Higher Nibble of the command to LCD
     46c:	9b b1       	in	r25, 0x0b	; 11
     46e:	28 2f       	mov	r18, r24
     470:	20 7f       	andi	r18, 0xF0	; 240
     472:	9f 70       	andi	r25, 0x0F	; 15
     474:	92 2b       	or	r25, r18
     476:	9b b9       	out	0x0b, r25	; 11
	control_bus &=~(1<<rs);								// Select the Command Register by pulling RS LOW
     478:	40 98       	cbi	0x08, 0	; 8
	control_bus &=~(1<<rw);								// Select the Write Operation  by pulling RW LOW
     47a:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;								// Send a High-to-Low Pulse at Enable Pin
     47c:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47e:	35 e0       	ldi	r19, 0x05	; 5
     480:	3a 95       	dec	r19
     482:	f1 f7       	brne	.-4      	; 0x480 <send_cmd_4bits+0x14>
     484:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     486:	42 98       	cbi	0x08, 2	; 8
     488:	95 e3       	ldi	r25, 0x35	; 53
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <send_cmd_4bits+0x1e>
     48e:	00 00       	nop
	
	_delay_us(10);										// wait for some time
	
	databus=((cmd<<4) & 0xf0)|(databus&0x0f);			// Send the Lower Nibble of the command to LCD
     490:	2b b1       	in	r18, 0x0b	; 11
     492:	30 e1       	ldi	r19, 0x10	; 16
     494:	83 9f       	mul	r24, r19
     496:	c0 01       	movw	r24, r0
     498:	11 24       	eor	r1, r1
     49a:	92 2f       	mov	r25, r18
     49c:	9f 70       	andi	r25, 0x0F	; 15
     49e:	89 2b       	or	r24, r25
     4a0:	8b b9       	out	0x0b, r24	; 11
	control_bus &=~(1<<rs);								// Select the Command Register by pulling RS LOW
     4a2:	40 98       	cbi	0x08, 0	; 8
	control_bus &=~(1<<rw);								// Select the Write Operation  by pulling RW LOW
     4a4:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;								// Send a High-to-Low Pulse at Enable Pin
     4a6:	42 9a       	sbi	0x08, 2	; 8
     4a8:	85 e0       	ldi	r24, 0x05	; 5
     4aa:	8a 95       	dec	r24
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <send_cmd_4bits+0x3e>
     4ae:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);	
     4b0:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b2:	8f e9       	ldi	r24, 0x9F	; 159
     4b4:	9f e0       	ldi	r25, 0x0F	; 15
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <send_cmd_4bits+0x4a>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <send_cmd_4bits+0x50>
     4bc:	00 00       	nop
     4be:	08 95       	ret

000004c0 <lcd_init_4bits>:
     4c0:	2f ef       	ldi	r18, 0xFF	; 255
     4c2:	85 ea       	ldi	r24, 0xA5	; 165
     4c4:	9e e0       	ldi	r25, 0x0E	; 14
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	90 40       	sbci	r25, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <lcd_init_4bits+0x6>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <lcd_init_4bits+0x10>
     4d0:	00 00       	nop

//==================LCD Functions Implementation
void lcd_init_4bits()
{
	_delay_ms(300);
	data_pinsmode|=0xf0;			// Configure both databus and controlbus as output
     4d2:	8a b1       	in	r24, 0x0a	; 10
     4d4:	80 6f       	ori	r24, 0xF0	; 240
     4d6:	8a b9       	out	0x0a, r24	; 10
	control_pinsmode|=0x07;
     4d8:	87 b1       	in	r24, 0x07	; 7
     4da:	87 60       	ori	r24, 0x07	; 7
     4dc:	87 b9       	out	0x07, r24	; 7
	databus=0x00;  					//initialize data bus port
     4de:	1b b8       	out	0x0b, r1	; 11
     4e0:	2f ef       	ldi	r18, 0xFF	; 255
     4e2:	89 ef       	ldi	r24, 0xF9	; 249
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	80 40       	sbci	r24, 0x00	; 0
     4ea:	90 40       	sbci	r25, 0x00	; 0
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <lcd_init_4bits+0x26>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <lcd_init_4bits+0x30>
     4f0:	00 00       	nop
	_delay_ms(20);
	send_cmd_4bits(0x30);
     4f2:	80 e3       	ldi	r24, 0x30	; 48
     4f4:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     4f8:	8f e1       	ldi	r24, 0x1F	; 31
     4fa:	9e e4       	ldi	r25, 0x4E	; 78
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <lcd_init_4bits+0x3c>
     500:	00 c0       	rjmp	.+0      	; 0x502 <lcd_init_4bits+0x42>
     502:	00 00       	nop
	_delay_ms(5);
	send_cmd_4bits(0x30);
     504:	80 e3       	ldi	r24, 0x30	; 48
     506:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     50a:	8f e9       	ldi	r24, 0x9F	; 159
     50c:	9f e0       	ldi	r25, 0x0F	; 15
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <lcd_init_4bits+0x4e>
     512:	00 c0       	rjmp	.+0      	; 0x514 <lcd_init_4bits+0x54>
     514:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x30);
     516:	80 e3       	ldi	r24, 0x30	; 48
     518:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     51c:	8f e9       	ldi	r24, 0x9F	; 159
     51e:	9f e0       	ldi	r25, 0x0F	; 15
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <lcd_init_4bits+0x60>
     524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_init_4bits+0x66>
     526:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x02);			 //Initialize the LCD in 4bit Mode
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     52e:	8f e9       	ldi	r24, 0x9F	; 159
     530:	9f e0       	ldi	r25, 0x0F	; 15
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_init_4bits+0x72>
     536:	00 c0       	rjmp	.+0      	; 0x538 <lcd_init_4bits+0x78>
     538:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x28);
     53a:	88 e2       	ldi	r24, 0x28	; 40
     53c:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     540:	8f e9       	ldi	r24, 0x9F	; 159
     542:	9f e0       	ldi	r25, 0x0F	; 15
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <lcd_init_4bits+0x84>
     548:	00 c0       	rjmp	.+0      	; 0x54a <lcd_init_4bits+0x8a>
     54a:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x06);			//entry mode set: increment cursor & without shifting entire display
     54c:	86 e0       	ldi	r24, 0x06	; 6
     54e:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     552:	8f e9       	ldi	r24, 0x9F	; 159
     554:	9f e0       	ldi	r25, 0x0F	; 15
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <lcd_init_4bits+0x96>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <lcd_init_4bits+0x9c>
     55c:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x14);			//cursor or display shift: only cursor shifted right
     55e:	84 e1       	ldi	r24, 0x14	; 20
     560:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     564:	8f e9       	ldi	r24, 0x9F	; 159
     566:	9f e0       	ldi	r25, 0x0F	; 15
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init_4bits+0xa8>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <lcd_init_4bits+0xae>
     56e:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x0E);			// Display ON cursor ON
     570:	8e e0       	ldi	r24, 0x0E	; 14
     572:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     576:	8f e9       	ldi	r24, 0x9F	; 159
     578:	9f e0       	ldi	r25, 0x0F	; 15
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_init_4bits+0xba>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <lcd_init_4bits+0xc0>
     580:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x40);			//enable CGRAM
     582:	80 e4       	ldi	r24, 0x40	; 64
     584:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     588:	8f e9       	ldi	r24, 0x9F	; 159
     58a:	9f e0       	ldi	r25, 0x0F	; 15
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_init_4bits+0xcc>
     590:	00 c0       	rjmp	.+0      	; 0x592 <lcd_init_4bits+0xd2>
     592:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x80);			// Move the Cursor to First line First Position
     594:	80 e8       	ldi	r24, 0x80	; 128
     596:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     59a:	08 95       	ret

0000059c <send_char_4bits>:
	_delay_ms(1);
}
void send_char_4bits( char dat)
{
	//check_busy();
	databus=(dat & 0xf0)|(databus&0x0f);			// Send the Higher Nibble of the Data to LCD
     59c:	9b b1       	in	r25, 0x0b	; 11
     59e:	28 2f       	mov	r18, r24
     5a0:	20 7f       	andi	r18, 0xF0	; 240
     5a2:	9f 70       	andi	r25, 0x0F	; 15
     5a4:	92 2b       	or	r25, r18
     5a6:	9b b9       	out	0x0b, r25	; 11
	control_bus |=1<<rs;							// Select the Data Register by pulling RS HIGH
     5a8:	40 9a       	sbi	0x08, 0	; 8
	control_bus &=~(1<<rw);							// Select the Write Operation  by pulling RW LOW
     5aa:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
     5ac:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	35 e0       	ldi	r19, 0x05	; 5
     5b0:	3a 95       	dec	r19
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <send_char_4bits+0x14>
     5b4:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     5b6:	42 98       	cbi	0x08, 2	; 8
     5b8:	95 e3       	ldi	r25, 0x35	; 53
     5ba:	9a 95       	dec	r25
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <send_char_4bits+0x1e>
     5be:	00 00       	nop
	_delay_us(10);
	
	databus=((dat <<4) & 0xf0)|(databus&0x0f);		// Send the Lower Nibble of the Data to LCD
     5c0:	2b b1       	in	r18, 0x0b	; 11
     5c2:	30 e1       	ldi	r19, 0x10	; 16
     5c4:	83 9f       	mul	r24, r19
     5c6:	c0 01       	movw	r24, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	92 2f       	mov	r25, r18
     5cc:	9f 70       	andi	r25, 0x0F	; 15
     5ce:	89 2b       	or	r24, r25
     5d0:	8b b9       	out	0x0b, r24	; 11
	control_bus |=1<<rs;							// Select the Data Register by pulling RS HIGH
     5d2:	40 9a       	sbi	0x08, 0	; 8
	control_bus &=~(1<<rw);							// Select the Write Operation  by pulling RW LOW
     5d4:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
     5d6:	42 9a       	sbi	0x08, 2	; 8
     5d8:	85 e0       	ldi	r24, 0x05	; 5
     5da:	8a 95       	dec	r24
     5dc:	f1 f7       	brne	.-4      	; 0x5da <send_char_4bits+0x3e>
     5de:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     5e0:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e2:	8f e9       	ldi	r24, 0x9F	; 159
     5e4:	9f e0       	ldi	r25, 0x0F	; 15
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <send_char_4bits+0x4a>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <send_char_4bits+0x50>
     5ec:	00 00       	nop
     5ee:	08 95       	ret

000005f0 <send_str_4bits>:
	_delay_ms(1);
}
void send_str_4bits(char *string)
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	ec 01       	movw	r28, r24
	while(*string!='\0')
     5f6:	88 81       	ld	r24, Y
     5f8:	88 23       	and	r24, r24
     5fa:	31 f0       	breq	.+12     	; 0x608 <send_str_4bits+0x18>
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
	_delay_us(1);
	control_bus &=~(1<<en);
	_delay_ms(1);
}
void send_str_4bits(char *string)
     5fc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string!='\0')
	{
		send_char_4bits(*string++);
     5fe:	0e 94 ce 02 	call	0x59c	; 0x59c <send_char_4bits>
	control_bus &=~(1<<en);
	_delay_ms(1);
}
void send_str_4bits(char *string)
{
	while(*string!='\0')
     602:	89 91       	ld	r24, Y+
     604:	81 11       	cpse	r24, r1
     606:	fb cf       	rjmp	.-10     	; 0x5fe <send_str_4bits+0xe>
	{
		send_char_4bits(*string++);
	}
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <goto_XY_4bits>:
void goto_XY_4bits(uint8_t x,uint8_t y)
{
	if (y==1)
     60e:	61 30       	cpi	r22, 0x01	; 1
     610:	21 f4       	brne	.+8      	; 0x61a <goto_XY_4bits+0xc>
	{
		send_cmd_4bits(firstline+x);
     612:	80 58       	subi	r24, 0x80	; 128
     614:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     618:	08 95       	ret
	}
	else if(y==2)
     61a:	62 30       	cpi	r22, 0x02	; 2
     61c:	19 f4       	brne	.+6      	; 0x624 <goto_XY_4bits+0x16>
	{
		send_cmd_4bits(secondline+x);
     61e:	80 54       	subi	r24, 0x40	; 64
     620:	0e 94 36 02 	call	0x46c	; 0x46c <send_cmd_4bits>
     624:	08 95       	ret

00000626 <send_str_4bits_withXY>:
	}
}
void send_str_4bits_withXY(uint8_t x,uint8_t y,char *string)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ea 01       	movw	r28, r20
	goto_XY_4bits(x,y);
     62c:	0e 94 07 03 	call	0x60e	; 0x60e <goto_XY_4bits>
	send_str_4bits(string);
     630:	ce 01       	movw	r24, r28
     632:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <send_str_4bits>
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <send_int_withXY>:
void send_int_withXY(uint8_t x,uint8_t y,int value,uint8_t no_digits)
{
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	d8 2e       	mov	r13, r24
     652:	c6 2e       	mov	r12, r22
     654:	ca 01       	movw	r24, r20
	char stringToDisplay[no_digits];
	itoa(value,stringToDisplay,10);
	send_str_4bits_withXY(x,y,stringToDisplay);
	//send_str_4bits(" ");
}
     656:	ed b6       	in	r14, 0x3d	; 61
     658:	fe b6       	in	r15, 0x3e	; 62
	goto_XY_4bits(x,y);
	send_str_4bits(string);
}
void send_int_withXY(uint8_t x,uint8_t y,int value,uint8_t no_digits)
{
	char stringToDisplay[no_digits];
     65a:	4d b7       	in	r20, 0x3d	; 61
     65c:	5e b7       	in	r21, 0x3e	; 62
     65e:	42 1b       	sub	r20, r18
     660:	51 09       	sbc	r21, r1
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	5e bf       	out	0x3e, r21	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	4d bf       	out	0x3d, r20	; 61
     66c:	0d b7       	in	r16, 0x3d	; 61
     66e:	1e b7       	in	r17, 0x3e	; 62
     670:	0f 5f       	subi	r16, 0xFF	; 255
     672:	1f 4f       	sbci	r17, 0xFF	; 255
	itoa(value,stringToDisplay,10);
     674:	4a e0       	ldi	r20, 0x0A	; 10
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	60 2f       	mov	r22, r16
     67a:	71 2f       	mov	r23, r17
     67c:	0e 94 3e 08 	call	0x107c	; 0x107c <itoa>
	send_str_4bits_withXY(x,y,stringToDisplay);
     680:	40 2f       	mov	r20, r16
     682:	51 2f       	mov	r21, r17
     684:	6c 2d       	mov	r22, r12
     686:	8d 2d       	mov	r24, r13
     688:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	//send_str_4bits(" ");
}
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	fe be       	out	0x3e, r15	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	ed be       	out	0x3d, r14	; 61
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <Display_speeds_distance>:
	}
}
void Display_speeds_distance()
{
	//Calculate_speeds_distance();
	if(inst_speed>9)
     6a8:	80 91 2a 01 	lds	r24, 0x012A
     6ac:	90 91 2b 01 	lds	r25, 0x012B
     6b0:	0a 97       	sbiw	r24, 0x0a	; 10
     6b2:	54 f0       	brlt	.+20     	; 0x6c8 <Display_speeds_distance+0x20>
	{
		send_int_withXY(0,1,inst_speed,2);
     6b4:	40 91 2a 01 	lds	r20, 0x012A
     6b8:	50 91 2b 01 	lds	r21, 0x012B
     6bc:	22 e0       	ldi	r18, 0x02	; 2
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <Display_speeds_distance+0x3e>
	}
	else
	{
		send_str_4bits_withXY(0,1,"0");
     6c8:	48 e0       	ldi	r20, 0x08	; 8
     6ca:	51 e0       	ldi	r21, 0x01	; 1
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
		send_int_withXY(1,1,inst_speed,1);
     6d4:	40 91 2a 01 	lds	r20, 0x012A
     6d8:	50 91 2b 01 	lds	r21, 0x012B
     6dc:	21 e0       	ldi	r18, 0x01	; 1
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
	}
	if(avg_speed>9)
     6e6:	80 91 28 01 	lds	r24, 0x0128
     6ea:	90 91 29 01 	lds	r25, 0x0129
     6ee:	0a 97       	sbiw	r24, 0x0a	; 10
     6f0:	54 f0       	brlt	.+20     	; 0x706 <Display_speeds_distance+0x5e>
	{
		send_int_withXY(9,1,avg_speed,2);
     6f2:	40 91 28 01 	lds	r20, 0x0128
     6f6:	50 91 29 01 	lds	r21, 0x0129
     6fa:	22 e0       	ldi	r18, 0x02	; 2
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     704:	0f c0       	rjmp	.+30     	; 0x724 <Display_speeds_distance+0x7c>
	}
	else
	{
		send_str_4bits_withXY(9,1,"0");
     706:	48 e0       	ldi	r20, 0x08	; 8
     708:	51 e0       	ldi	r21, 0x01	; 1
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	89 e0       	ldi	r24, 0x09	; 9
     70e:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
		send_int_withXY(10,1,avg_speed,1);
     712:	40 91 28 01 	lds	r20, 0x0128
     716:	50 91 29 01 	lds	r21, 0x0129
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	8a e0       	ldi	r24, 0x0A	; 10
     720:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
	}
	if(laps>9)
     724:	80 91 4a 01 	lds	r24, 0x014A
     728:	8a 30       	cpi	r24, 0x0A	; 10
     72a:	48 f0       	brcs	.+18     	; 0x73e <Display_speeds_distance+0x96>
	{
		send_int_withXY(6,2,laps,2);
     72c:	40 91 4a 01 	lds	r20, 0x014A
     730:	22 e0       	ldi	r18, 0x02	; 2
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	62 e0       	ldi	r22, 0x02	; 2
     736:	86 e0       	ldi	r24, 0x06	; 6
     738:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     73c:	08 95       	ret
	}
	else
	{
		send_str_4bits_withXY(6,2,"0");
     73e:	48 e0       	ldi	r20, 0x08	; 8
     740:	51 e0       	ldi	r21, 0x01	; 1
     742:	62 e0       	ldi	r22, 0x02	; 2
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
		send_int_withXY(7,2,laps,1);
     74a:	40 91 4a 01 	lds	r20, 0x014A
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	62 e0       	ldi	r22, 0x02	; 2
     754:	87 e0       	ldi	r24, 0x07	; 7
     756:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     75a:	08 95       	ret

0000075c <Display_constants>:
	send_cmd_4bits(0x01);
	_delay_ms(2);
}
void Display_constants()
{
	 send_str_4bits_withXY(2,1," Km/h");		//for instantaneous speed
     75c:	4a e0       	ldi	r20, 0x0A	; 10
     75e:	51 e0       	ldi	r21, 0x01	; 1
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	 send_str_4bits_withXY(7,1,"  ");
     768:	40 e1       	ldi	r20, 0x10	; 16
     76a:	51 e0       	ldi	r21, 0x01	; 1
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	 send_str_4bits_withXY(8,2,"LAPs");
     774:	43 e1       	ldi	r20, 0x13	; 19
     776:	51 e0       	ldi	r21, 0x01	; 1
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	88 e0       	ldi	r24, 0x08	; 8
     77c:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	 send_str_4bits_withXY(11,1," Km/h");
     780:	4a e0       	ldi	r20, 0x0A	; 10
     782:	51 e0       	ldi	r21, 0x01	; 1
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	8b e0       	ldi	r24, 0x0B	; 11
     788:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	 send_str_4bits_withXY(2,2,":");		//for stopwatch
     78c:	48 e1       	ldi	r20, 0x18	; 24
     78e:	51 e0       	ldi	r21, 0x01	; 1
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	 send_str_4bits_withXY(15,2,"%");		//for Throttle
     798:	4a e1       	ldi	r20, 0x1A	; 26
     79a:	51 e0       	ldi	r21, 0x01	; 1
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	8f e0       	ldi	r24, 0x0F	; 15
     7a0:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
     7a4:	08 95       	ret

000007a6 <init_ThrottleThump>:

//================Thumb Throttle Functions implementation
void init_ThrottleThump()
{  
   //voltage reference:(with AVCC reference):
    sbi(ADMUX,REFS0);   
     7a6:	ec e7       	ldi	r30, 0x7C	; 124
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	80 64       	ori	r24, 0x40	; 64
     7ae:	80 83       	st	Z, r24
    //cbi(ADMUX,REFS1);

    //select ADC3 Channel:
    sbi(ADMUX,MUX0);
     7b0:	80 81       	ld	r24, Z
     7b2:	81 60       	ori	r24, 0x01	; 1
     7b4:	80 83       	st	Z, r24
    sbi(ADMUX,MUX1);
     7b6:	80 81       	ld	r24, Z
     7b8:	82 60       	ori	r24, 0x02	; 2
     7ba:	80 83       	st	Z, r24
    cbi(ADMUX,MUX2);
     7bc:	80 81       	ld	r24, Z
     7be:	8b 7f       	andi	r24, 0xFB	; 251
     7c0:	80 83       	st	Z, r24
    cbi(ADMUX,MUX3);
     7c2:	80 81       	ld	r24, Z
     7c4:	87 7f       	andi	r24, 0xF7	; 247
     7c6:	80 83       	st	Z, r24

    cbi(ADMUX,ADLAR);    //right adjustment
     7c8:	80 81       	ld	r24, Z
     7ca:	8f 7d       	andi	r24, 0xDF	; 223
     7cc:	80 83       	st	Z, r24

    //prescaler selector: (128 division factor):
    sbi(ADCSRA,ADPS0);
     7ce:	ea e7       	ldi	r30, 0x7A	; 122
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	81 60       	ori	r24, 0x01	; 1
     7d6:	80 83       	st	Z, r24
    sbi(ADCSRA,ADPS1);
     7d8:	80 81       	ld	r24, Z
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	80 83       	st	Z, r24
    sbi(ADCSRA,ADPS2);
     7de:	80 81       	ld	r24, Z
     7e0:	84 60       	ori	r24, 0x04	; 4
     7e2:	80 83       	st	Z, r24
    sbi(ADCSRA,ADEN);	   //enable ADC
     7e4:	80 81       	ld	r24, Z
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	80 83       	st	Z, r24
	sbi(ADCSRA,ADIE);	   //enable ADC interrupt
     7ea:	80 81       	ld	r24, Z
     7ec:	88 60       	ori	r24, 0x08	; 8
     7ee:	80 83       	st	Z, r24
	sbi(ADCSRA,ADSC);	   //start first conversion
     7f0:	80 81       	ld	r24, Z
     7f2:	80 64       	ori	r24, 0x40	; 64
     7f4:	80 83       	st	Z, r24

    //consumption reduction:
        //disable digital inputs:
        DIDR0=0xff;
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
     7f8:	80 93 7e 00 	sts	0x007E, r24
        //POWER reduction:
        sbi(SMCR,SE);   //ENABLE SLEEP MODE
     7fc:	83 b7       	in	r24, 0x33	; 51
     7fe:	81 60       	ori	r24, 0x01	; 1
     800:	83 bf       	out	0x33, r24	; 51
        sbi(SMCR,SM0);  //ADC noise cancellation
     802:	83 b7       	in	r24, 0x33	; 51
     804:	82 60       	ori	r24, 0x02	; 2
     806:	83 bf       	out	0x33, r24	; 51
     808:	08 95       	ret

0000080a <Read_Throttle>:
	/* adcx is the analog pin we want to use.  ADMUX's first few bits are
	 * the binary representations of the numbers of the pins so we can
	 * just 'OR' the pin's number with ADMUX to select that pin.
	 * We first zero the four bits by setting ADMUX equal to its higher
	 * four bits. */
	ADMUX	&=	0xf0;
     80a:	ec e7       	ldi	r30, 0x7C	; 124
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	90 81       	ld	r25, Z
     810:	90 7f       	andi	r25, 0xF0	; 240
     812:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
     814:	90 81       	ld	r25, Z
     816:	89 2b       	or	r24, r25
     818:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     81a:	ea e7       	ldi	r30, 0x7A	; 122
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	80 64       	ori	r24, 0x40	; 64
     822:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
     824:	80 81       	ld	r24, Z
     826:	86 fd       	sbrc	r24, 6
     828:	fd cf       	rjmp	.-6      	; 0x824 <Read_Throttle+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     82a:	20 91 78 00 	lds	r18, 0x0078
     82e:	30 91 79 00 	lds	r19, 0x0079
}
     832:	82 2f       	mov	r24, r18
     834:	93 2f       	mov	r25, r19
     836:	08 95       	ret

00000838 <Display_throttle>:
void Display_throttle()
{
   digital_throt_sensor_read=Read_Throttle(3);
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 05 04 	call	0x80a	; 0x80a <Read_Throttle>
     83e:	90 93 23 01 	sts	0x0123, r25
     842:	80 93 22 01 	sts	0x0122, r24
   lcd_throttle_value=floorf(((digital_throt_sensor_read-161)/(1023.0))*99*1.45);
     846:	60 91 22 01 	lds	r22, 0x0122
     84a:	70 91 23 01 	lds	r23, 0x0123
     84e:	61 5a       	subi	r22, 0xA1	; 161
     850:	71 09       	sbc	r23, r1
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatunsisf>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 ec       	ldi	r19, 0xC0	; 192
     85e:	4f e7       	ldi	r20, 0x7F	; 127
     860:	54 e4       	ldi	r21, 0x44	; 68
     862:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	46 ec       	ldi	r20, 0xC6	; 198
     86c:	52 e4       	ldi	r21, 0x42	; 66
     86e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     872:	2a e9       	ldi	r18, 0x9A	; 154
     874:	39 e9       	ldi	r19, 0x99	; 153
     876:	49 eb       	ldi	r20, 0xB9	; 185
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     87e:	0e 94 e7 06 	call	0xdce	; 0xdce <floor>
     882:	60 93 24 01 	sts	0x0124, r22
     886:	70 93 25 01 	sts	0x0125, r23
     88a:	80 93 26 01 	sts	0x0126, r24
     88e:	90 93 27 01 	sts	0x0127, r25
   
   if(lcd_throttle_value>9)
     892:	60 91 24 01 	lds	r22, 0x0124
     896:	70 91 25 01 	lds	r23, 0x0125
     89a:	80 91 26 01 	lds	r24, 0x0126
     89e:	90 91 27 01 	lds	r25, 0x0127
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e1       	ldi	r20, 0x10	; 16
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	0e 94 8b 07 	call	0xf16	; 0xf16 <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	8c f4       	brge	.+34     	; 0x8d4 <Display_throttle+0x9c>
   {
	   send_int_withXY(13,2,lcd_throttle_value,2);
     8b2:	60 91 24 01 	lds	r22, 0x0124
     8b6:	70 91 25 01 	lds	r23, 0x0125
     8ba:	80 91 26 01 	lds	r24, 0x0126
     8be:	90 91 27 01 	lds	r25, 0x0127
     8c2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixsfsi>
     8c6:	22 e0       	ldi	r18, 0x02	; 2
     8c8:	ab 01       	movw	r20, r22
     8ca:	62 e0       	ldi	r22, 0x02	; 2
     8cc:	8d e0       	ldi	r24, 0x0D	; 13
     8ce:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     8d2:	08 95       	ret
   }
   else
   {
	   send_str_4bits_withXY(13,2,"0");
     8d4:	48 e0       	ldi	r20, 0x08	; 8
     8d6:	51 e0       	ldi	r21, 0x01	; 1
     8d8:	62 e0       	ldi	r22, 0x02	; 2
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
	   send_int_withXY(14,2,lcd_throttle_value,1);
     8e0:	60 91 24 01 	lds	r22, 0x0124
     8e4:	70 91 25 01 	lds	r23, 0x0125
     8e8:	80 91 26 01 	lds	r24, 0x0126
     8ec:	90 91 27 01 	lds	r25, 0x0127
     8f0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixsfsi>
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	ab 01       	movw	r20, r22
     8f8:	62 e0       	ldi	r22, 0x02	; 2
     8fa:	8e e0       	ldi	r24, 0x0E	; 14
     8fc:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     900:	08 95       	ret

00000902 <init_servo>:

//===============Servo Functions implementation
void init_servo()
{
	//set OC1A FOR generating PWM
	sbi(DDRB,PB1);
     902:	21 9a       	sbi	0x04, 1	; 4
	cbi(PORTB,PB1);
     904:	29 98       	cbi	0x05, 1	; 5

	//SELECT MODE:
	//fast PWM: (with top = ICR1 & update its value @ BOTTOM , TOV flag set on TOP)
	sbi(TCCR1A,WGM11);
     906:	e0 e8       	ldi	r30, 0x80	; 128
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24
	cbi(TCCR1A,WGM10);
     910:	80 81       	ld	r24, Z
     912:	8e 7f       	andi	r24, 0xFE	; 254
     914:	80 83       	st	Z, r24
	sbi(TCCR1B,WGM13);
     916:	a1 e8       	ldi	r26, 0x81	; 129
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	8c 91       	ld	r24, X
     91c:	80 61       	ori	r24, 0x10	; 16
     91e:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM12);
     920:	8c 91       	ld	r24, X
     922:	88 60       	ori	r24, 0x08	; 8
     924:	8c 93       	st	X, r24
	// non inverting mode : to control on servo motion @ last 2ms in period
	sbi(TCCR1A,COM1A0);
     926:	80 81       	ld	r24, Z
     928:	80 64       	ori	r24, 0x40	; 64
     92a:	80 83       	st	Z, r24
	sbi(TCCR1A,COM1A1);
     92c:	80 81       	ld	r24, Z
     92e:	80 68       	ori	r24, 0x80	; 128
     930:	80 83       	st	Z, r24

	//PRECALING (64):(to have 40000 cycle per second which means that every ms has 250 cycles)
	sbi(TCCR1B,CS11);
     932:	8c 91       	ld	r24, X
     934:	82 60       	ori	r24, 0x02	; 2
     936:	8c 93       	st	X, r24
	//sbi(TCCR1B,CS10);
	//setting top value equal 39999 @which starting a new clock
	ICR1=39999;
     938:	8f e3       	ldi	r24, 0x3F	; 63
     93a:	9c e9       	ldi	r25, 0x9C	; 156
     93c:	90 93 87 00 	sts	0x0087, r25
     940:	80 93 86 00 	sts	0x0086, r24
     944:	08 95       	ret

00000946 <move_servo>:
	
}
void move_servo()
{
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
	
	OCR1A=(ICR1-max_deg)+(duty_cycle*(digital_throt_sensor_read-150));
     952:	60 91 86 00 	lds	r22, 0x0086
     956:	70 91 87 00 	lds	r23, 0x0087
     95a:	c0 91 22 01 	lds	r28, 0x0122
     95e:	d0 91 23 01 	lds	r29, 0x0123
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatunsisf>
     96a:	20 91 00 01 	lds	r18, 0x0100
     96e:	30 91 01 01 	lds	r19, 0x0101
     972:	40 91 02 01 	lds	r20, 0x0102
     976:	50 91 03 01 	lds	r21, 0x0103
     97a:	0e 94 99 05 	call	0xb32	; 0xb32 <__subsf3>
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
     982:	be 01       	movw	r22, r28
     984:	66 59       	subi	r22, 0x96	; 150
     986:	71 09       	sbc	r23, r1
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatunsisf>
     990:	20 91 4b 01 	lds	r18, 0x014B
     994:	30 91 4c 01 	lds	r19, 0x014C
     998:	40 91 4d 01 	lds	r20, 0x014D
     99c:	50 91 4e 01 	lds	r21, 0x014E
     9a0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	c7 01       	movw	r24, r14
     9aa:	b6 01       	movw	r22, r12
     9ac:	0e 94 9a 05 	call	0xb34	; 0xb34 <__addsf3>
     9b0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
     9b4:	70 93 89 00 	sts	0x0089, r23
     9b8:	60 93 88 00 	sts	0x0088, r22

}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	08 95       	ret

000009ca <__vector_21>:
	//UART_send_online();
}  
   return 0;
}
ISR(ADC_vect)							//on place 22 in interrupt vector table
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
	move_servo();
     9ec:	0e 94 a3 04 	call	0x946	; 0x946 <move_servo>
	sbi(ADCSRA,ADSC);
     9f0:	ea e7       	ldi	r30, 0x7A	; 122
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	80 64       	ori	r24, 0x40	; 64
     9f8:	80 83       	st	Z, r24
}					
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <init_timer0>:
//=============================================

//=============Stop Watch Functions implementation
void init_timer0()
{
	sbi(TCCR0B,CS02); 		//PREscaler 256
     a1c:	85 b5       	in	r24, 0x25	; 37
     a1e:	84 60       	ori	r24, 0x04	; 4
     a20:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK0,TOIE0);		//enable overflow interrupt
     a22:	ee e6       	ldi	r30, 0x6E	; 110
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	81 60       	ori	r24, 0x01	; 1
     a2a:	80 83       	st	Z, r24
     a2c:	08 95       	ret

00000a2e <Display_time>:
	
}
void Display_time()
{
	if(minutes>9)
     a2e:	80 91 1e 01 	lds	r24, 0x011E
     a32:	90 91 1f 01 	lds	r25, 0x011F
     a36:	0a 97       	sbiw	r24, 0x0a	; 10
     a38:	50 f0       	brcs	.+20     	; 0xa4e <Display_time+0x20>
		send_int_withXY(0,2,minutes,2);
     a3a:	40 91 1e 01 	lds	r20, 0x011E
     a3e:	50 91 1f 01 	lds	r21, 0x011F
     a42:	22 e0       	ldi	r18, 0x02	; 2
     a44:	62 e0       	ldi	r22, 0x02	; 2
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     a4c:	0f c0       	rjmp	.+30     	; 0xa6c <Display_time+0x3e>
	else
	{
		send_str_4bits_withXY(0,2,"0");
     a4e:	48 e0       	ldi	r20, 0x08	; 8
     a50:	51 e0       	ldi	r21, 0x01	; 1
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
		send_int_withXY(1,2,minutes,1);
     a5a:	40 91 1e 01 	lds	r20, 0x011E
     a5e:	50 91 1f 01 	lds	r21, 0x011F
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	62 e0       	ldi	r22, 0x02	; 2
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
	}
	if(seconds>9)
     a6c:	80 91 20 01 	lds	r24, 0x0120
     a70:	90 91 21 01 	lds	r25, 0x0121
     a74:	0a 97       	sbiw	r24, 0x0a	; 10
     a76:	50 f0       	brcs	.+20     	; 0xa8c <Display_time+0x5e>
		send_int_withXY(3,2,seconds,2);
     a78:	40 91 20 01 	lds	r20, 0x0120
     a7c:	50 91 21 01 	lds	r21, 0x0121
     a80:	22 e0       	ldi	r18, 0x02	; 2
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     a8a:	08 95       	ret
	else
	{
		send_str_4bits_withXY(3,2,"0");
     a8c:	48 e0       	ldi	r20, 0x08	; 8
     a8e:	51 e0       	ldi	r21, 0x01	; 1
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 13 03 	call	0x626	; 0x626 <send_str_4bits_withXY>
		send_int_withXY(4,2,seconds,1);
     a98:	40 91 20 01 	lds	r20, 0x0120
     a9c:	50 91 21 01 	lds	r21, 0x0121
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	62 e0       	ldi	r22, 0x02	; 2
     aa4:	84 e0       	ldi	r24, 0x04	; 4
     aa6:	0e 94 1e 03 	call	0x63c	; 0x63c <send_int_withXY>
     aaa:	08 95       	ret

00000aac <main>:
     aac:	2f ef       	ldi	r18, 0xFF	; 255
     aae:	89 e6       	ldi	r24, 0x69	; 105
     ab0:	98 e1       	ldi	r25, 0x18	; 24
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <main+0x6>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <main+0x10>
     abc:	00 00       	nop

int main(void)
{ 
   _delay_ms(500);
   //Indication LED:
   sbi(DDRB,PB0);				
     abe:	20 9a       	sbi	0x04, 0	; 4
   sbi(PORTB,PB0);
     ac0:	28 9a       	sbi	0x05, 0	; 5
   //=======================
   sei(); 						//turn on global interrupts
     ac2:	78 94       	sei
   //LCD Initialization
   lcd_init_4bits();
     ac4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_init_4bits>
   //=================
   //===Stop Watch Initialization:
   init_timer0();
     ac8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <init_timer0>
   //====================
   //Speed Sensor Initialization:
   init_timer2();		//initialize timer0 with ctc mode and overflow every 16ms
     acc:	0e 94 b3 00 	call	0x166	; 0x166 <init_timer2>
   init_ext_interrupts();
     ad0:	0e 94 ce 00 	call	0x19c	; 0x19c <init_ext_interrupts>
   //=============================
   //=====Throttle Sensor:
   init_ThrottleThump();
     ad4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <init_ThrottleThump>
   //=========================
   //=======servo:
   init_servo();
     ad8:	0e 94 81 04 	call	0x902	; 0x902 <init_servo>
   duty_cycle=(max_deg-min_deg)/(1024);			//by cross multiplying 
     adc:	20 91 04 01 	lds	r18, 0x0104
     ae0:	30 91 05 01 	lds	r19, 0x0105
     ae4:	40 91 06 01 	lds	r20, 0x0106
     ae8:	50 91 07 01 	lds	r21, 0x0107
     aec:	60 91 00 01 	lds	r22, 0x0100
     af0:	70 91 01 01 	lds	r23, 0x0101
     af4:	80 91 02 01 	lds	r24, 0x0102
     af8:	90 91 03 01 	lds	r25, 0x0103
     afc:	0e 94 99 05 	call	0xb32	; 0xb32 <__subsf3>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e8       	ldi	r20, 0x80	; 128
     b06:	5a e3       	ldi	r21, 0x3A	; 58
     b08:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3>
     b0c:	60 93 4b 01 	sts	0x014B, r22
     b10:	70 93 4c 01 	sts	0x014C, r23
     b14:	80 93 4d 01 	sts	0x014D, r24
     b18:	90 93 4e 01 	sts	0x014E, r25
   //============================
   
while (1)
{
	Display_constants();
     b1c:	0e 94 ae 03 	call	0x75c	; 0x75c <Display_constants>
	Calculate_speeds_distance();
     b20:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Calculate_speeds_distance>
	Display_speeds_distance();
     b24:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Display_speeds_distance>
	Display_time();
     b28:	0e 94 17 05 	call	0xa2e	; 0xa2e <Display_time>
	Display_throttle();
     b2c:	0e 94 1c 04 	call	0x838	; 0x838 <Display_throttle>
     b30:	f5 cf       	rjmp	.-22     	; 0xb1c <main+0x70>

00000b32 <__subsf3>:
     b32:	50 58       	subi	r21, 0x80	; 128

00000b34 <__addsf3>:
     b34:	bb 27       	eor	r27, r27
     b36:	aa 27       	eor	r26, r26
     b38:	0e d0       	rcall	.+28     	; 0xb56 <__addsf3x>
     b3a:	9c c1       	rjmp	.+824    	; 0xe74 <__fp_round>
     b3c:	8d d1       	rcall	.+794    	; 0xe58 <__fp_pscA>
     b3e:	30 f0       	brcs	.+12     	; 0xb4c <__addsf3+0x18>
     b40:	92 d1       	rcall	.+804    	; 0xe66 <__fp_pscB>
     b42:	20 f0       	brcs	.+8      	; 0xb4c <__addsf3+0x18>
     b44:	31 f4       	brne	.+12     	; 0xb52 <__addsf3+0x1e>
     b46:	9f 3f       	cpi	r25, 0xFF	; 255
     b48:	11 f4       	brne	.+4      	; 0xb4e <__addsf3+0x1a>
     b4a:	1e f4       	brtc	.+6      	; 0xb52 <__addsf3+0x1e>
     b4c:	82 c1       	rjmp	.+772    	; 0xe52 <__fp_nan>
     b4e:	0e f4       	brtc	.+2      	; 0xb52 <__addsf3+0x1e>
     b50:	e0 95       	com	r30
     b52:	e7 fb       	bst	r30, 7
     b54:	4f c1       	rjmp	.+670    	; 0xdf4 <__fp_inf>

00000b56 <__addsf3x>:
     b56:	e9 2f       	mov	r30, r25
     b58:	9e d1       	rcall	.+828    	; 0xe96 <__fp_split3>
     b5a:	80 f3       	brcs	.-32     	; 0xb3c <__addsf3+0x8>
     b5c:	ba 17       	cp	r27, r26
     b5e:	62 07       	cpc	r22, r18
     b60:	73 07       	cpc	r23, r19
     b62:	84 07       	cpc	r24, r20
     b64:	95 07       	cpc	r25, r21
     b66:	18 f0       	brcs	.+6      	; 0xb6e <__addsf3x+0x18>
     b68:	71 f4       	brne	.+28     	; 0xb86 <__addsf3x+0x30>
     b6a:	9e f5       	brtc	.+102    	; 0xbd2 <__addsf3x+0x7c>
     b6c:	cd c1       	rjmp	.+922    	; 0xf08 <__fp_zero>
     b6e:	0e f4       	brtc	.+2      	; 0xb72 <__addsf3x+0x1c>
     b70:	e0 95       	com	r30
     b72:	0b 2e       	mov	r0, r27
     b74:	ba 2f       	mov	r27, r26
     b76:	a0 2d       	mov	r26, r0
     b78:	0b 01       	movw	r0, r22
     b7a:	b9 01       	movw	r22, r18
     b7c:	90 01       	movw	r18, r0
     b7e:	0c 01       	movw	r0, r24
     b80:	ca 01       	movw	r24, r20
     b82:	a0 01       	movw	r20, r0
     b84:	11 24       	eor	r1, r1
     b86:	ff 27       	eor	r31, r31
     b88:	59 1b       	sub	r21, r25
     b8a:	99 f0       	breq	.+38     	; 0xbb2 <__addsf3x+0x5c>
     b8c:	59 3f       	cpi	r21, 0xF9	; 249
     b8e:	50 f4       	brcc	.+20     	; 0xba4 <__addsf3x+0x4e>
     b90:	50 3e       	cpi	r21, 0xE0	; 224
     b92:	68 f1       	brcs	.+90     	; 0xbee <__addsf3x+0x98>
     b94:	1a 16       	cp	r1, r26
     b96:	f0 40       	sbci	r31, 0x00	; 0
     b98:	a2 2f       	mov	r26, r18
     b9a:	23 2f       	mov	r18, r19
     b9c:	34 2f       	mov	r19, r20
     b9e:	44 27       	eor	r20, r20
     ba0:	58 5f       	subi	r21, 0xF8	; 248
     ba2:	f3 cf       	rjmp	.-26     	; 0xb8a <__addsf3x+0x34>
     ba4:	46 95       	lsr	r20
     ba6:	37 95       	ror	r19
     ba8:	27 95       	ror	r18
     baa:	a7 95       	ror	r26
     bac:	f0 40       	sbci	r31, 0x00	; 0
     bae:	53 95       	inc	r21
     bb0:	c9 f7       	brne	.-14     	; 0xba4 <__addsf3x+0x4e>
     bb2:	7e f4       	brtc	.+30     	; 0xbd2 <__addsf3x+0x7c>
     bb4:	1f 16       	cp	r1, r31
     bb6:	ba 0b       	sbc	r27, r26
     bb8:	62 0b       	sbc	r22, r18
     bba:	73 0b       	sbc	r23, r19
     bbc:	84 0b       	sbc	r24, r20
     bbe:	ba f0       	brmi	.+46     	; 0xbee <__addsf3x+0x98>
     bc0:	91 50       	subi	r25, 0x01	; 1
     bc2:	a1 f0       	breq	.+40     	; 0xbec <__addsf3x+0x96>
     bc4:	ff 0f       	add	r31, r31
     bc6:	bb 1f       	adc	r27, r27
     bc8:	66 1f       	adc	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	88 1f       	adc	r24, r24
     bce:	c2 f7       	brpl	.-16     	; 0xbc0 <__addsf3x+0x6a>
     bd0:	0e c0       	rjmp	.+28     	; 0xbee <__addsf3x+0x98>
     bd2:	ba 0f       	add	r27, r26
     bd4:	62 1f       	adc	r22, r18
     bd6:	73 1f       	adc	r23, r19
     bd8:	84 1f       	adc	r24, r20
     bda:	48 f4       	brcc	.+18     	; 0xbee <__addsf3x+0x98>
     bdc:	87 95       	ror	r24
     bde:	77 95       	ror	r23
     be0:	67 95       	ror	r22
     be2:	b7 95       	ror	r27
     be4:	f7 95       	ror	r31
     be6:	9e 3f       	cpi	r25, 0xFE	; 254
     be8:	08 f0       	brcs	.+2      	; 0xbec <__addsf3x+0x96>
     bea:	b3 cf       	rjmp	.-154    	; 0xb52 <__addsf3+0x1e>
     bec:	93 95       	inc	r25
     bee:	88 0f       	add	r24, r24
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <__addsf3x+0x9e>
     bf2:	99 27       	eor	r25, r25
     bf4:	ee 0f       	add	r30, r30
     bf6:	97 95       	ror	r25
     bf8:	87 95       	ror	r24
     bfa:	08 95       	ret

00000bfc <ceil>:
     bfc:	6e d1       	rcall	.+732    	; 0xeda <__fp_trunc>
     bfe:	80 f0       	brcs	.+32     	; 0xc20 <ceil+0x24>
     c00:	9f 37       	cpi	r25, 0x7F	; 127
     c02:	40 f4       	brcc	.+16     	; 0xc14 <ceil+0x18>
     c04:	91 11       	cpse	r25, r1
     c06:	0e f4       	brtc	.+2      	; 0xc0a <ceil+0xe>
     c08:	80 c1       	rjmp	.+768    	; 0xf0a <__fp_szero>
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e8       	ldi	r24, 0x80	; 128
     c10:	9f e3       	ldi	r25, 0x3F	; 63
     c12:	08 95       	ret
     c14:	26 f0       	brts	.+8      	; 0xc1e <ceil+0x22>
     c16:	1b 16       	cp	r1, r27
     c18:	61 1d       	adc	r22, r1
     c1a:	71 1d       	adc	r23, r1
     c1c:	81 1d       	adc	r24, r1
     c1e:	f0 c0       	rjmp	.+480    	; 0xe00 <__fp_mintl>
     c20:	0a c1       	rjmp	.+532    	; 0xe36 <__fp_mpack>

00000c22 <__divsf3>:
     c22:	0c d0       	rcall	.+24     	; 0xc3c <__divsf3x>
     c24:	27 c1       	rjmp	.+590    	; 0xe74 <__fp_round>
     c26:	1f d1       	rcall	.+574    	; 0xe66 <__fp_pscB>
     c28:	40 f0       	brcs	.+16     	; 0xc3a <__divsf3+0x18>
     c2a:	16 d1       	rcall	.+556    	; 0xe58 <__fp_pscA>
     c2c:	30 f0       	brcs	.+12     	; 0xc3a <__divsf3+0x18>
     c2e:	21 f4       	brne	.+8      	; 0xc38 <__divsf3+0x16>
     c30:	5f 3f       	cpi	r21, 0xFF	; 255
     c32:	19 f0       	breq	.+6      	; 0xc3a <__divsf3+0x18>
     c34:	df c0       	rjmp	.+446    	; 0xdf4 <__fp_inf>
     c36:	51 11       	cpse	r21, r1
     c38:	68 c1       	rjmp	.+720    	; 0xf0a <__fp_szero>
     c3a:	0b c1       	rjmp	.+534    	; 0xe52 <__fp_nan>

00000c3c <__divsf3x>:
     c3c:	2c d1       	rcall	.+600    	; 0xe96 <__fp_split3>
     c3e:	98 f3       	brcs	.-26     	; 0xc26 <__divsf3+0x4>

00000c40 <__divsf3_pse>:
     c40:	99 23       	and	r25, r25
     c42:	c9 f3       	breq	.-14     	; 0xc36 <__divsf3+0x14>
     c44:	55 23       	and	r21, r21
     c46:	b1 f3       	breq	.-20     	; 0xc34 <__divsf3+0x12>
     c48:	95 1b       	sub	r25, r21
     c4a:	55 0b       	sbc	r21, r21
     c4c:	bb 27       	eor	r27, r27
     c4e:	aa 27       	eor	r26, r26
     c50:	62 17       	cp	r22, r18
     c52:	73 07       	cpc	r23, r19
     c54:	84 07       	cpc	r24, r20
     c56:	38 f0       	brcs	.+14     	; 0xc66 <__divsf3_pse+0x26>
     c58:	9f 5f       	subi	r25, 0xFF	; 255
     c5a:	5f 4f       	sbci	r21, 0xFF	; 255
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	44 1f       	adc	r20, r20
     c62:	aa 1f       	adc	r26, r26
     c64:	a9 f3       	breq	.-22     	; 0xc50 <__divsf3_pse+0x10>
     c66:	33 d0       	rcall	.+102    	; 0xcce <__divsf3_pse+0x8e>
     c68:	0e 2e       	mov	r0, r30
     c6a:	3a f0       	brmi	.+14     	; 0xc7a <__divsf3_pse+0x3a>
     c6c:	e0 e8       	ldi	r30, 0x80	; 128
     c6e:	30 d0       	rcall	.+96     	; 0xcd0 <__divsf3_pse+0x90>
     c70:	91 50       	subi	r25, 0x01	; 1
     c72:	50 40       	sbci	r21, 0x00	; 0
     c74:	e6 95       	lsr	r30
     c76:	00 1c       	adc	r0, r0
     c78:	ca f7       	brpl	.-14     	; 0xc6c <__divsf3_pse+0x2c>
     c7a:	29 d0       	rcall	.+82     	; 0xcce <__divsf3_pse+0x8e>
     c7c:	fe 2f       	mov	r31, r30
     c7e:	27 d0       	rcall	.+78     	; 0xcce <__divsf3_pse+0x8e>
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	88 1f       	adc	r24, r24
     c86:	bb 1f       	adc	r27, r27
     c88:	26 17       	cp	r18, r22
     c8a:	37 07       	cpc	r19, r23
     c8c:	48 07       	cpc	r20, r24
     c8e:	ab 07       	cpc	r26, r27
     c90:	b0 e8       	ldi	r27, 0x80	; 128
     c92:	09 f0       	breq	.+2      	; 0xc96 <__divsf3_pse+0x56>
     c94:	bb 0b       	sbc	r27, r27
     c96:	80 2d       	mov	r24, r0
     c98:	bf 01       	movw	r22, r30
     c9a:	ff 27       	eor	r31, r31
     c9c:	93 58       	subi	r25, 0x83	; 131
     c9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ca0:	2a f0       	brmi	.+10     	; 0xcac <__divsf3_pse+0x6c>
     ca2:	9e 3f       	cpi	r25, 0xFE	; 254
     ca4:	51 05       	cpc	r21, r1
     ca6:	68 f0       	brcs	.+26     	; 0xcc2 <__divsf3_pse+0x82>
     ca8:	a5 c0       	rjmp	.+330    	; 0xdf4 <__fp_inf>
     caa:	2f c1       	rjmp	.+606    	; 0xf0a <__fp_szero>
     cac:	5f 3f       	cpi	r21, 0xFF	; 255
     cae:	ec f3       	brlt	.-6      	; 0xcaa <__divsf3_pse+0x6a>
     cb0:	98 3e       	cpi	r25, 0xE8	; 232
     cb2:	dc f3       	brlt	.-10     	; 0xcaa <__divsf3_pse+0x6a>
     cb4:	86 95       	lsr	r24
     cb6:	77 95       	ror	r23
     cb8:	67 95       	ror	r22
     cba:	b7 95       	ror	r27
     cbc:	f7 95       	ror	r31
     cbe:	9f 5f       	subi	r25, 0xFF	; 255
     cc0:	c9 f7       	brne	.-14     	; 0xcb4 <__divsf3_pse+0x74>
     cc2:	88 0f       	add	r24, r24
     cc4:	91 1d       	adc	r25, r1
     cc6:	96 95       	lsr	r25
     cc8:	87 95       	ror	r24
     cca:	97 f9       	bld	r25, 7
     ccc:	08 95       	ret
     cce:	e1 e0       	ldi	r30, 0x01	; 1
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	88 1f       	adc	r24, r24
     cd6:	bb 1f       	adc	r27, r27
     cd8:	62 17       	cp	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	ba 07       	cpc	r27, r26
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__divsf3_pse+0xaa>
     ce2:	62 1b       	sub	r22, r18
     ce4:	73 0b       	sbc	r23, r19
     ce6:	84 0b       	sbc	r24, r20
     ce8:	ba 0b       	sbc	r27, r26
     cea:	ee 1f       	adc	r30, r30
     cec:	88 f7       	brcc	.-30     	; 0xcd0 <__divsf3_pse+0x90>
     cee:	e0 95       	com	r30
     cf0:	08 95       	ret

00000cf2 <__fixsfsi>:
     cf2:	04 d0       	rcall	.+8      	; 0xcfc <__fixunssfsi>
     cf4:	68 94       	set
     cf6:	b1 11       	cpse	r27, r1
     cf8:	08 c1       	rjmp	.+528    	; 0xf0a <__fp_szero>
     cfa:	08 95       	ret

00000cfc <__fixunssfsi>:
     cfc:	d4 d0       	rcall	.+424    	; 0xea6 <__fp_splitA>
     cfe:	88 f0       	brcs	.+34     	; 0xd22 <__fixunssfsi+0x26>
     d00:	9f 57       	subi	r25, 0x7F	; 127
     d02:	90 f0       	brcs	.+36     	; 0xd28 <__fixunssfsi+0x2c>
     d04:	b9 2f       	mov	r27, r25
     d06:	99 27       	eor	r25, r25
     d08:	b7 51       	subi	r27, 0x17	; 23
     d0a:	a0 f0       	brcs	.+40     	; 0xd34 <__fixunssfsi+0x38>
     d0c:	d1 f0       	breq	.+52     	; 0xd42 <__fixunssfsi+0x46>
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	1a f0       	brmi	.+6      	; 0xd1e <__fixunssfsi+0x22>
     d18:	ba 95       	dec	r27
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <__fixunssfsi+0x12>
     d1c:	12 c0       	rjmp	.+36     	; 0xd42 <__fixunssfsi+0x46>
     d1e:	b1 30       	cpi	r27, 0x01	; 1
     d20:	81 f0       	breq	.+32     	; 0xd42 <__fixunssfsi+0x46>
     d22:	f2 d0       	rcall	.+484    	; 0xf08 <__fp_zero>
     d24:	b1 e0       	ldi	r27, 0x01	; 1
     d26:	08 95       	ret
     d28:	ef c0       	rjmp	.+478    	; 0xf08 <__fp_zero>
     d2a:	67 2f       	mov	r22, r23
     d2c:	78 2f       	mov	r23, r24
     d2e:	88 27       	eor	r24, r24
     d30:	b8 5f       	subi	r27, 0xF8	; 248
     d32:	39 f0       	breq	.+14     	; 0xd42 <__fixunssfsi+0x46>
     d34:	b9 3f       	cpi	r27, 0xF9	; 249
     d36:	cc f3       	brlt	.-14     	; 0xd2a <__fixunssfsi+0x2e>
     d38:	86 95       	lsr	r24
     d3a:	77 95       	ror	r23
     d3c:	67 95       	ror	r22
     d3e:	b3 95       	inc	r27
     d40:	d9 f7       	brne	.-10     	; 0xd38 <__fixunssfsi+0x3c>
     d42:	3e f4       	brtc	.+14     	; 0xd52 <__fixunssfsi+0x56>
     d44:	90 95       	com	r25
     d46:	80 95       	com	r24
     d48:	70 95       	com	r23
     d4a:	61 95       	neg	r22
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	8f 4f       	sbci	r24, 0xFF	; 255
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	08 95       	ret

00000d54 <__floatunsisf>:
     d54:	e8 94       	clt
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <__floatsisf+0x12>

00000d58 <__floatsisf>:
     d58:	97 fb       	bst	r25, 7
     d5a:	3e f4       	brtc	.+14     	; 0xd6a <__floatsisf+0x12>
     d5c:	90 95       	com	r25
     d5e:	80 95       	com	r24
     d60:	70 95       	com	r23
     d62:	61 95       	neg	r22
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	8f 4f       	sbci	r24, 0xFF	; 255
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	99 23       	and	r25, r25
     d6c:	a9 f0       	breq	.+42     	; 0xd98 <__floatsisf+0x40>
     d6e:	f9 2f       	mov	r31, r25
     d70:	96 e9       	ldi	r25, 0x96	; 150
     d72:	bb 27       	eor	r27, r27
     d74:	93 95       	inc	r25
     d76:	f6 95       	lsr	r31
     d78:	87 95       	ror	r24
     d7a:	77 95       	ror	r23
     d7c:	67 95       	ror	r22
     d7e:	b7 95       	ror	r27
     d80:	f1 11       	cpse	r31, r1
     d82:	f8 cf       	rjmp	.-16     	; 0xd74 <__floatsisf+0x1c>
     d84:	fa f4       	brpl	.+62     	; 0xdc4 <__floatsisf+0x6c>
     d86:	bb 0f       	add	r27, r27
     d88:	11 f4       	brne	.+4      	; 0xd8e <__floatsisf+0x36>
     d8a:	60 ff       	sbrs	r22, 0
     d8c:	1b c0       	rjmp	.+54     	; 0xdc4 <__floatsisf+0x6c>
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	16 c0       	rjmp	.+44     	; 0xdc4 <__floatsisf+0x6c>
     d98:	88 23       	and	r24, r24
     d9a:	11 f0       	breq	.+4      	; 0xda0 <__floatsisf+0x48>
     d9c:	96 e9       	ldi	r25, 0x96	; 150
     d9e:	11 c0       	rjmp	.+34     	; 0xdc2 <__floatsisf+0x6a>
     da0:	77 23       	and	r23, r23
     da2:	21 f0       	breq	.+8      	; 0xdac <__floatsisf+0x54>
     da4:	9e e8       	ldi	r25, 0x8E	; 142
     da6:	87 2f       	mov	r24, r23
     da8:	76 2f       	mov	r23, r22
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <__floatsisf+0x5e>
     dac:	66 23       	and	r22, r22
     dae:	71 f0       	breq	.+28     	; 0xdcc <__floatsisf+0x74>
     db0:	96 e8       	ldi	r25, 0x86	; 134
     db2:	86 2f       	mov	r24, r22
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	2a f0       	brmi	.+10     	; 0xdc4 <__floatsisf+0x6c>
     dba:	9a 95       	dec	r25
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	da f7       	brpl	.-10     	; 0xdba <__floatsisf+0x62>
     dc4:	88 0f       	add	r24, r24
     dc6:	96 95       	lsr	r25
     dc8:	87 95       	ror	r24
     dca:	97 f9       	bld	r25, 7
     dcc:	08 95       	ret

00000dce <floor>:
     dce:	85 d0       	rcall	.+266    	; 0xeda <__fp_trunc>
     dd0:	80 f0       	brcs	.+32     	; 0xdf2 <floor+0x24>
     dd2:	9f 37       	cpi	r25, 0x7F	; 127
     dd4:	40 f4       	brcc	.+16     	; 0xde6 <floor+0x18>
     dd6:	91 11       	cpse	r25, r1
     dd8:	0e f0       	brts	.+2      	; 0xddc <floor+0xe>
     dda:	97 c0       	rjmp	.+302    	; 0xf0a <__fp_szero>
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	9f eb       	ldi	r25, 0xBF	; 191
     de4:	08 95       	ret
     de6:	26 f4       	brtc	.+8      	; 0xdf0 <floor+0x22>
     de8:	1b 16       	cp	r1, r27
     dea:	61 1d       	adc	r22, r1
     dec:	71 1d       	adc	r23, r1
     dee:	81 1d       	adc	r24, r1
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <__fp_mintl>
     df2:	21 c0       	rjmp	.+66     	; 0xe36 <__fp_mpack>

00000df4 <__fp_inf>:
     df4:	97 f9       	bld	r25, 7
     df6:	9f 67       	ori	r25, 0x7F	; 127
     df8:	80 e8       	ldi	r24, 0x80	; 128
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	08 95       	ret

00000e00 <__fp_mintl>:
     e00:	88 23       	and	r24, r24
     e02:	71 f4       	brne	.+28     	; 0xe20 <__fp_mintl+0x20>
     e04:	77 23       	and	r23, r23
     e06:	21 f0       	breq	.+8      	; 0xe10 <__fp_mintl+0x10>
     e08:	98 50       	subi	r25, 0x08	; 8
     e0a:	87 2b       	or	r24, r23
     e0c:	76 2f       	mov	r23, r22
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <__fp_mintl+0x1e>
     e10:	66 23       	and	r22, r22
     e12:	11 f4       	brne	.+4      	; 0xe18 <__fp_mintl+0x18>
     e14:	99 27       	eor	r25, r25
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <__fp_mintl+0x32>
     e18:	90 51       	subi	r25, 0x10	; 16
     e1a:	86 2b       	or	r24, r22
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	2a f0       	brmi	.+10     	; 0xe2c <__fp_mintl+0x2c>
     e22:	9a 95       	dec	r25
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	da f7       	brpl	.-10     	; 0xe22 <__fp_mintl+0x22>
     e2c:	88 0f       	add	r24, r24
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	97 f9       	bld	r25, 7
     e34:	08 95       	ret

00000e36 <__fp_mpack>:
     e36:	9f 3f       	cpi	r25, 0xFF	; 255
     e38:	31 f0       	breq	.+12     	; 0xe46 <__fp_mpack_finite+0xc>

00000e3a <__fp_mpack_finite>:
     e3a:	91 50       	subi	r25, 0x01	; 1
     e3c:	20 f4       	brcc	.+8      	; 0xe46 <__fp_mpack_finite+0xc>
     e3e:	87 95       	ror	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	b7 95       	ror	r27
     e46:	88 0f       	add	r24, r24
     e48:	91 1d       	adc	r25, r1
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	97 f9       	bld	r25, 7
     e50:	08 95       	ret

00000e52 <__fp_nan>:
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	80 ec       	ldi	r24, 0xC0	; 192
     e56:	08 95       	ret

00000e58 <__fp_pscA>:
     e58:	00 24       	eor	r0, r0
     e5a:	0a 94       	dec	r0
     e5c:	16 16       	cp	r1, r22
     e5e:	17 06       	cpc	r1, r23
     e60:	18 06       	cpc	r1, r24
     e62:	09 06       	cpc	r0, r25
     e64:	08 95       	ret

00000e66 <__fp_pscB>:
     e66:	00 24       	eor	r0, r0
     e68:	0a 94       	dec	r0
     e6a:	12 16       	cp	r1, r18
     e6c:	13 06       	cpc	r1, r19
     e6e:	14 06       	cpc	r1, r20
     e70:	05 06       	cpc	r0, r21
     e72:	08 95       	ret

00000e74 <__fp_round>:
     e74:	09 2e       	mov	r0, r25
     e76:	03 94       	inc	r0
     e78:	00 0c       	add	r0, r0
     e7a:	11 f4       	brne	.+4      	; 0xe80 <__fp_round+0xc>
     e7c:	88 23       	and	r24, r24
     e7e:	52 f0       	brmi	.+20     	; 0xe94 <__fp_round+0x20>
     e80:	bb 0f       	add	r27, r27
     e82:	40 f4       	brcc	.+16     	; 0xe94 <__fp_round+0x20>
     e84:	bf 2b       	or	r27, r31
     e86:	11 f4       	brne	.+4      	; 0xe8c <__fp_round+0x18>
     e88:	60 ff       	sbrs	r22, 0
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <__fp_round+0x20>
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	08 95       	ret

00000e96 <__fp_split3>:
     e96:	57 fd       	sbrc	r21, 7
     e98:	90 58       	subi	r25, 0x80	; 128
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	59 f0       	breq	.+22     	; 0xeb6 <__fp_splitA+0x10>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	71 f0       	breq	.+28     	; 0xec0 <__fp_splitA+0x1a>
     ea4:	47 95       	ror	r20

00000ea6 <__fp_splitA>:
     ea6:	88 0f       	add	r24, r24
     ea8:	97 fb       	bst	r25, 7
     eaa:	99 1f       	adc	r25, r25
     eac:	61 f0       	breq	.+24     	; 0xec6 <__fp_splitA+0x20>
     eae:	9f 3f       	cpi	r25, 0xFF	; 255
     eb0:	79 f0       	breq	.+30     	; 0xed0 <__fp_splitA+0x2a>
     eb2:	87 95       	ror	r24
     eb4:	08 95       	ret
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	f2 cf       	rjmp	.-28     	; 0xea4 <__fp_split3+0xe>
     ec0:	46 95       	lsr	r20
     ec2:	f1 df       	rcall	.-30     	; 0xea6 <__fp_splitA>
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <__fp_splitA+0x30>
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	18 06       	cpc	r1, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	f1 cf       	rjmp	.-30     	; 0xeb2 <__fp_splitA+0xc>
     ed0:	86 95       	lsr	r24
     ed2:	71 05       	cpc	r23, r1
     ed4:	61 05       	cpc	r22, r1
     ed6:	08 94       	sec
     ed8:	08 95       	ret

00000eda <__fp_trunc>:
     eda:	e5 df       	rcall	.-54     	; 0xea6 <__fp_splitA>
     edc:	a0 f0       	brcs	.+40     	; 0xf06 <__fp_trunc+0x2c>
     ede:	be e7       	ldi	r27, 0x7E	; 126
     ee0:	b9 17       	cp	r27, r25
     ee2:	88 f4       	brcc	.+34     	; 0xf06 <__fp_trunc+0x2c>
     ee4:	bb 27       	eor	r27, r27
     ee6:	9f 38       	cpi	r25, 0x8F	; 143
     ee8:	60 f4       	brcc	.+24     	; 0xf02 <__fp_trunc+0x28>
     eea:	16 16       	cp	r1, r22
     eec:	b1 1d       	adc	r27, r1
     eee:	67 2f       	mov	r22, r23
     ef0:	78 2f       	mov	r23, r24
     ef2:	88 27       	eor	r24, r24
     ef4:	98 5f       	subi	r25, 0xF8	; 248
     ef6:	f7 cf       	rjmp	.-18     	; 0xee6 <__fp_trunc+0xc>
     ef8:	86 95       	lsr	r24
     efa:	77 95       	ror	r23
     efc:	67 95       	ror	r22
     efe:	b1 1d       	adc	r27, r1
     f00:	93 95       	inc	r25
     f02:	96 39       	cpi	r25, 0x96	; 150
     f04:	c8 f3       	brcs	.-14     	; 0xef8 <__fp_trunc+0x1e>
     f06:	08 95       	ret

00000f08 <__fp_zero>:
     f08:	e8 94       	clt

00000f0a <__fp_szero>:
     f0a:	bb 27       	eor	r27, r27
     f0c:	66 27       	eor	r22, r22
     f0e:	77 27       	eor	r23, r23
     f10:	cb 01       	movw	r24, r22
     f12:	97 f9       	bld	r25, 7
     f14:	08 95       	ret

00000f16 <__gesf2>:
     f16:	66 d0       	rcall	.+204    	; 0xfe4 <__fp_cmp>
     f18:	08 f4       	brcc	.+2      	; 0xf1c <__gesf2+0x6>
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	08 95       	ret

00000f1e <__mulsf3>:
     f1e:	0b d0       	rcall	.+22     	; 0xf36 <__mulsf3x>
     f20:	a9 cf       	rjmp	.-174    	; 0xe74 <__fp_round>
     f22:	9a df       	rcall	.-204    	; 0xe58 <__fp_pscA>
     f24:	28 f0       	brcs	.+10     	; 0xf30 <__mulsf3+0x12>
     f26:	9f df       	rcall	.-194    	; 0xe66 <__fp_pscB>
     f28:	18 f0       	brcs	.+6      	; 0xf30 <__mulsf3+0x12>
     f2a:	95 23       	and	r25, r21
     f2c:	09 f0       	breq	.+2      	; 0xf30 <__mulsf3+0x12>
     f2e:	62 cf       	rjmp	.-316    	; 0xdf4 <__fp_inf>
     f30:	90 cf       	rjmp	.-224    	; 0xe52 <__fp_nan>
     f32:	11 24       	eor	r1, r1
     f34:	ea cf       	rjmp	.-44     	; 0xf0a <__fp_szero>

00000f36 <__mulsf3x>:
     f36:	af df       	rcall	.-162    	; 0xe96 <__fp_split3>
     f38:	a0 f3       	brcs	.-24     	; 0xf22 <__mulsf3+0x4>

00000f3a <__mulsf3_pse>:
     f3a:	95 9f       	mul	r25, r21
     f3c:	d1 f3       	breq	.-12     	; 0xf32 <__mulsf3+0x14>
     f3e:	95 0f       	add	r25, r21
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	55 1f       	adc	r21, r21
     f44:	62 9f       	mul	r22, r18
     f46:	f0 01       	movw	r30, r0
     f48:	72 9f       	mul	r23, r18
     f4a:	bb 27       	eor	r27, r27
     f4c:	f0 0d       	add	r31, r0
     f4e:	b1 1d       	adc	r27, r1
     f50:	63 9f       	mul	r22, r19
     f52:	aa 27       	eor	r26, r26
     f54:	f0 0d       	add	r31, r0
     f56:	b1 1d       	adc	r27, r1
     f58:	aa 1f       	adc	r26, r26
     f5a:	64 9f       	mul	r22, r20
     f5c:	66 27       	eor	r22, r22
     f5e:	b0 0d       	add	r27, r0
     f60:	a1 1d       	adc	r26, r1
     f62:	66 1f       	adc	r22, r22
     f64:	82 9f       	mul	r24, r18
     f66:	22 27       	eor	r18, r18
     f68:	b0 0d       	add	r27, r0
     f6a:	a1 1d       	adc	r26, r1
     f6c:	62 1f       	adc	r22, r18
     f6e:	73 9f       	mul	r23, r19
     f70:	b0 0d       	add	r27, r0
     f72:	a1 1d       	adc	r26, r1
     f74:	62 1f       	adc	r22, r18
     f76:	83 9f       	mul	r24, r19
     f78:	a0 0d       	add	r26, r0
     f7a:	61 1d       	adc	r22, r1
     f7c:	22 1f       	adc	r18, r18
     f7e:	74 9f       	mul	r23, r20
     f80:	33 27       	eor	r19, r19
     f82:	a0 0d       	add	r26, r0
     f84:	61 1d       	adc	r22, r1
     f86:	23 1f       	adc	r18, r19
     f88:	84 9f       	mul	r24, r20
     f8a:	60 0d       	add	r22, r0
     f8c:	21 1d       	adc	r18, r1
     f8e:	82 2f       	mov	r24, r18
     f90:	76 2f       	mov	r23, r22
     f92:	6a 2f       	mov	r22, r26
     f94:	11 24       	eor	r1, r1
     f96:	9f 57       	subi	r25, 0x7F	; 127
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	8a f0       	brmi	.+34     	; 0xfbe <__mulsf3_pse+0x84>
     f9c:	e1 f0       	breq	.+56     	; 0xfd6 <__mulsf3_pse+0x9c>
     f9e:	88 23       	and	r24, r24
     fa0:	4a f0       	brmi	.+18     	; 0xfb4 <__mulsf3_pse+0x7a>
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	bb 1f       	adc	r27, r27
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	50 40       	sbci	r21, 0x00	; 0
     fb2:	a9 f7       	brne	.-22     	; 0xf9e <__mulsf3_pse+0x64>
     fb4:	9e 3f       	cpi	r25, 0xFE	; 254
     fb6:	51 05       	cpc	r21, r1
     fb8:	70 f0       	brcs	.+28     	; 0xfd6 <__mulsf3_pse+0x9c>
     fba:	1c cf       	rjmp	.-456    	; 0xdf4 <__fp_inf>
     fbc:	a6 cf       	rjmp	.-180    	; 0xf0a <__fp_szero>
     fbe:	5f 3f       	cpi	r21, 0xFF	; 255
     fc0:	ec f3       	brlt	.-6      	; 0xfbc <__mulsf3_pse+0x82>
     fc2:	98 3e       	cpi	r25, 0xE8	; 232
     fc4:	dc f3       	brlt	.-10     	; 0xfbc <__mulsf3_pse+0x82>
     fc6:	86 95       	lsr	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	e7 95       	ror	r30
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	c1 f7       	brne	.-16     	; 0xfc6 <__mulsf3_pse+0x8c>
     fd6:	fe 2b       	or	r31, r30
     fd8:	88 0f       	add	r24, r24
     fda:	91 1d       	adc	r25, r1
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <__fp_cmp>:
     fe4:	99 0f       	add	r25, r25
     fe6:	00 08       	sbc	r0, r0
     fe8:	55 0f       	add	r21, r21
     fea:	aa 0b       	sbc	r26, r26
     fec:	e0 e8       	ldi	r30, 0x80	; 128
     fee:	fe ef       	ldi	r31, 0xFE	; 254
     ff0:	16 16       	cp	r1, r22
     ff2:	17 06       	cpc	r1, r23
     ff4:	e8 07       	cpc	r30, r24
     ff6:	f9 07       	cpc	r31, r25
     ff8:	c0 f0       	brcs	.+48     	; 0x102a <__fp_cmp+0x46>
     ffa:	12 16       	cp	r1, r18
     ffc:	13 06       	cpc	r1, r19
     ffe:	e4 07       	cpc	r30, r20
    1000:	f5 07       	cpc	r31, r21
    1002:	98 f0       	brcs	.+38     	; 0x102a <__fp_cmp+0x46>
    1004:	62 1b       	sub	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	95 0b       	sbc	r25, r21
    100c:	39 f4       	brne	.+14     	; 0x101c <__fp_cmp+0x38>
    100e:	0a 26       	eor	r0, r26
    1010:	61 f0       	breq	.+24     	; 0x102a <__fp_cmp+0x46>
    1012:	23 2b       	or	r18, r19
    1014:	24 2b       	or	r18, r20
    1016:	25 2b       	or	r18, r21
    1018:	21 f4       	brne	.+8      	; 0x1022 <__fp_cmp+0x3e>
    101a:	08 95       	ret
    101c:	0a 26       	eor	r0, r26
    101e:	09 f4       	brne	.+2      	; 0x1022 <__fp_cmp+0x3e>
    1020:	a1 40       	sbci	r26, 0x01	; 1
    1022:	a6 95       	lsr	r26
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	81 1d       	adc	r24, r1
    1028:	81 1d       	adc	r24, r1
    102a:	08 95       	ret

0000102c <__divmodhi4>:
    102c:	97 fb       	bst	r25, 7
    102e:	07 2e       	mov	r0, r23
    1030:	16 f4       	brtc	.+4      	; 0x1036 <__divmodhi4+0xa>
    1032:	00 94       	com	r0
    1034:	07 d0       	rcall	.+14     	; 0x1044 <__divmodhi4_neg1>
    1036:	77 fd       	sbrc	r23, 7
    1038:	09 d0       	rcall	.+18     	; 0x104c <__divmodhi4_neg2>
    103a:	0e 94 2a 08 	call	0x1054	; 0x1054 <__udivmodhi4>
    103e:	07 fc       	sbrc	r0, 7
    1040:	05 d0       	rcall	.+10     	; 0x104c <__divmodhi4_neg2>
    1042:	3e f4       	brtc	.+14     	; 0x1052 <__divmodhi4_exit>

00001044 <__divmodhi4_neg1>:
    1044:	90 95       	com	r25
    1046:	81 95       	neg	r24
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	08 95       	ret

0000104c <__divmodhi4_neg2>:
    104c:	70 95       	com	r23
    104e:	61 95       	neg	r22
    1050:	7f 4f       	sbci	r23, 0xFF	; 255

00001052 <__divmodhi4_exit>:
    1052:	08 95       	ret

00001054 <__udivmodhi4>:
    1054:	aa 1b       	sub	r26, r26
    1056:	bb 1b       	sub	r27, r27
    1058:	51 e1       	ldi	r21, 0x11	; 17
    105a:	07 c0       	rjmp	.+14     	; 0x106a <__udivmodhi4_ep>

0000105c <__udivmodhi4_loop>:
    105c:	aa 1f       	adc	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	a6 17       	cp	r26, r22
    1062:	b7 07       	cpc	r27, r23
    1064:	10 f0       	brcs	.+4      	; 0x106a <__udivmodhi4_ep>
    1066:	a6 1b       	sub	r26, r22
    1068:	b7 0b       	sbc	r27, r23

0000106a <__udivmodhi4_ep>:
    106a:	88 1f       	adc	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	5a 95       	dec	r21
    1070:	a9 f7       	brne	.-22     	; 0x105c <__udivmodhi4_loop>
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	08 95       	ret

0000107c <itoa>:
    107c:	fb 01       	movw	r30, r22
    107e:	9f 01       	movw	r18, r30
    1080:	e8 94       	clt
    1082:	42 30       	cpi	r20, 0x02	; 2
    1084:	c4 f0       	brlt	.+48     	; 0x10b6 <itoa+0x3a>
    1086:	45 32       	cpi	r20, 0x25	; 37
    1088:	b4 f4       	brge	.+44     	; 0x10b6 <itoa+0x3a>
    108a:	4a 30       	cpi	r20, 0x0A	; 10
    108c:	29 f4       	brne	.+10     	; 0x1098 <itoa+0x1c>
    108e:	97 fb       	bst	r25, 7
    1090:	1e f4       	brtc	.+6      	; 0x1098 <itoa+0x1c>
    1092:	90 95       	com	r25
    1094:	81 95       	neg	r24
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	64 2f       	mov	r22, r20
    109a:	77 27       	eor	r23, r23
    109c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__udivmodhi4>
    10a0:	80 5d       	subi	r24, 0xD0	; 208
    10a2:	8a 33       	cpi	r24, 0x3A	; 58
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <itoa+0x2c>
    10a6:	89 5d       	subi	r24, 0xD9	; 217
    10a8:	81 93       	st	Z+, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	a1 f7       	brne	.-24     	; 0x1098 <itoa+0x1c>
    10b0:	16 f4       	brtc	.+4      	; 0x10b6 <itoa+0x3a>
    10b2:	5d e2       	ldi	r21, 0x2D	; 45
    10b4:	51 93       	st	Z+, r21
    10b6:	10 82       	st	Z, r1
    10b8:	c9 01       	movw	r24, r18
    10ba:	0c 94 5f 08 	jmp	0x10be	; 0x10be <strrev>

000010be <strrev>:
    10be:	dc 01       	movw	r26, r24
    10c0:	fc 01       	movw	r30, r24
    10c2:	67 2f       	mov	r22, r23
    10c4:	71 91       	ld	r23, Z+
    10c6:	77 23       	and	r23, r23
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <strrev+0x4>
    10ca:	32 97       	sbiw	r30, 0x02	; 2
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <strrev+0x18>
    10ce:	7c 91       	ld	r23, X
    10d0:	6d 93       	st	X+, r22
    10d2:	70 83       	st	Z, r23
    10d4:	62 91       	ld	r22, -Z
    10d6:	ae 17       	cp	r26, r30
    10d8:	bf 07       	cpc	r27, r31
    10da:	c8 f3       	brcs	.-14     	; 0x10ce <strrev+0x10>
    10dc:	08 95       	ret

000010de <_exit>:
    10de:	f8 94       	cli

000010e0 <__stop_program>:
    10e0:	ff cf       	rjmp	.-2      	; 0x10e0 <__stop_program>
