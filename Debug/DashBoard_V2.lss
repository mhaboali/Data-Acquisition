
DashBoard_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000010be  00001152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  0080011c  0080011c  0000116e  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bed  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004961  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e8  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011ef  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000034a  00000000  00000000  00005c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004b3  00000000  00000000  00005fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000029c  00000000  00000000  00006464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000043a  00000000  00000000  00006700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000055f  00000000  00000000  00006b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee eb       	ldi	r30, 0xBE	; 190
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 34       	cpi	r26, 0x4B	; 75
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4c 05 	call	0xa98	; 0xa98 <main>
      9e:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
	//Get Here After Every ADC conversion
	move_servo();
	sbi(ADCSRA,ADSC);					//To Start New ADC conversion
}					
ISR(TIMER0_OVF_vect)
{	//Get Here Every 4 ms For Calculating Real Time Stop Watch
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	8f 93       	push	r24
      b2:	9f 93       	push	r25
	couter_prescaling++;
      b4:	80 91 1c 01 	lds	r24, 0x011C
      b8:	90 91 1d 01 	lds	r25, 0x011D
      bc:	01 96       	adiw	r24, 0x01	; 1
      be:	90 93 1d 01 	sts	0x011D, r25
      c2:	80 93 1c 01 	sts	0x011C, r24
	if(couter_prescaling==243)		//240 for actual timing
      c6:	80 91 1c 01 	lds	r24, 0x011C
      ca:	90 91 1d 01 	lds	r25, 0x011D
      ce:	83 3f       	cpi	r24, 0xF3	; 243
      d0:	91 05       	cpc	r25, r1
      d2:	69 f4       	brne	.+26     	; 0xee <__vector_16+0x48>
	{
		seconds++;
      d4:	80 91 20 01 	lds	r24, 0x0120
      d8:	90 91 21 01 	lds	r25, 0x0121
      dc:	01 96       	adiw	r24, 0x01	; 1
      de:	90 93 21 01 	sts	0x0121, r25
      e2:	80 93 20 01 	sts	0x0120, r24
		couter_prescaling=0;
      e6:	10 92 1d 01 	sts	0x011D, r1
      ea:	10 92 1c 01 	sts	0x011C, r1
	}
	if(seconds==60)
      ee:	80 91 20 01 	lds	r24, 0x0120
      f2:	90 91 21 01 	lds	r25, 0x0121
      f6:	cc 97       	sbiw	r24, 0x3c	; 60
      f8:	69 f4       	brne	.+26     	; 0x114 <__vector_16+0x6e>
	{
		minutes++;
      fa:	80 91 1e 01 	lds	r24, 0x011E
      fe:	90 91 1f 01 	lds	r25, 0x011F
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	90 93 1f 01 	sts	0x011F, r25
     108:	80 93 1e 01 	sts	0x011E, r24
		seconds=0;
     10c:	10 92 21 01 	sts	0x0121, r1
     110:	10 92 20 01 	sts	0x0120, r1
	}
}
     114:	9f 91       	pop	r25
     116:	8f 91       	pop	r24
     118:	0f 90       	pop	r0
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti

00000122 <__vector_7>:
ISR(TIMER2_COMPA_vect)
{
     122:	1f 92       	push	r1
     124:	0f 92       	push	r0
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	0f 92       	push	r0
     12a:	11 24       	eor	r1, r1
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
	//Get Here Every 16ms For Measuring speed
	TCNT2=0;							//To Reset The Value In Timer Counter Register
     130:	10 92 b2 00 	sts	0x00B2, r1
	inst_16ms_counter++;				//for counting how many 16ms through one cycle
     134:	80 91 34 01 	lds	r24, 0x0134
     138:	90 91 35 01 	lds	r25, 0x0135
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	90 93 35 01 	sts	0x0135, r25
     142:	80 93 34 01 	sts	0x0134, r24
	total_16ms_counter++;				//counting total time through a number of cycles
     146:	80 91 32 01 	lds	r24, 0x0132
     14a:	90 91 33 01 	lds	r25, 0x0133
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	90 93 33 01 	sts	0x0133, r25
     154:	80 93 32 01 	sts	0x0132, r24
}
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	0f 90       	pop	r0
     15e:	0f be       	out	0x3f, r0	; 63
     160:	0f 90       	pop	r0
     162:	1f 90       	pop	r1
     164:	18 95       	reti

00000166 <init_timer2>:
//================Speed Sensor functions implementation 
 void init_timer2()						//CALCUTE TIME FOR SPEED CALCULATIONS
{  
  //ctc mode
   sbi(TCCR2A,WGM21);
     166:	e0 eb       	ldi	r30, 0xB0	; 176
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	82 60       	ori	r24, 0x02	; 2
     16e:	80 83       	st	Z, r24
   //Prescaler 1024
   sbi(TCCR2B,CS20);
     170:	e1 eb       	ldi	r30, 0xB1	; 177
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	81 60       	ori	r24, 0x01	; 1
     178:	80 83       	st	Z, r24
   sbi(TCCR2B,CS21);
     17a:	80 81       	ld	r24, Z
     17c:	82 60       	ori	r24, 0x02	; 2
     17e:	80 83       	st	Z, r24
   sbi(TCCR2B,CS22);
     180:	80 81       	ld	r24, Z
     182:	84 60       	ori	r24, 0x04	; 4
     184:	80 83       	st	Z, r24
   //ENALBE outcompare interrupt:
   sbi(TIMSK2,OCIE2A);
     186:	e0 e7       	ldi	r30, 0x70	; 112
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	80 83       	st	Z, r24
   TCNT2=0x00;
     190:	10 92 b2 00 	sts	0x00B2, r1
   OCR2A=255;				//will Get Into ISR every 16ms
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	80 93 b3 00 	sts	0x00B3, r24
     19a:	08 95       	ret

0000019c <init_ext_interrupts>:
} 
void init_ext_interrupts()
{
   cbi(DDRD,PD3);						//sensor input
     19c:	53 98       	cbi	0x0a, 3	; 10
   sbi(PORTD,PD3);						//enable pull up resistor
     19e:	5b 9a       	sbi	0x0b, 3	; 11
   //EICRA|=(1<<ISC01)|(1<<ISC00);		//set triger INT0 for rising edge mode
   EICRA|=(1<<ISC11);					//set trigger INT1 for falling edge mode
     1a0:	e9 e6       	ldi	r30, 0x69	; 105
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 83       	st	Z, r24
   //EIMSK|=(1<<INT0);					//turn on INT0
   EIMSK|=(1<<INT1);					//turn on INT1
     1aa:	e9 9a       	sbi	0x1d, 1	; 29
     1ac:	08 95       	ret

000001ae <__vector_2>:
}
ISR(INT1_vect)							//on place 2 in interrupt vector table
{
     1ae:	1f 92       	push	r1
     1b0:	0f 92       	push	r0
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	0f 92       	push	r0
     1b6:	11 24       	eor	r1, r1
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
	//Get Here On each spoke Of The wheel
	inst_spokes_counter++;
     1bc:	80 91 36 01 	lds	r24, 0x0136
     1c0:	90 91 37 01 	lds	r25, 0x0137
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	90 93 37 01 	sts	0x0137, r25
     1ca:	80 93 36 01 	sts	0x0136, r24
	//for instantaneous speed
	if(inst_spokes_counter==1)				
     1ce:	80 91 36 01 	lds	r24, 0x0136
     1d2:	90 91 37 01 	lds	r25, 0x0137
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	49 f4       	brne	.+18     	; 0x1ec <__vector_2+0x3e>
	{
		count_t1=inst_16ms_counter;					//Capture Timer Counter @ First Spoke
     1da:	80 91 34 01 	lds	r24, 0x0134
     1de:	90 91 35 01 	lds	r25, 0x0135
     1e2:	90 93 45 01 	sts	0x0145, r25
     1e6:	80 93 44 01 	sts	0x0144, r24
     1ea:	2a c0       	rjmp	.+84     	; 0x240 <__vector_2+0x92>
	}
	else if(inst_spokes_counter==10)				//here completing one cycle
     1ec:	80 91 36 01 	lds	r24, 0x0136
     1f0:	90 91 37 01 	lds	r25, 0x0137
     1f4:	0a 97       	sbiw	r24, 0x0a	; 10
     1f6:	21 f5       	brne	.+72     	; 0x240 <__vector_2+0x92>
	{
		count_t2=inst_16ms_counter;					//Capture Timer Counter @ 10th spokes
     1f8:	80 91 34 01 	lds	r24, 0x0134
     1fc:	90 91 35 01 	lds	r25, 0x0135
     200:	90 93 43 01 	sts	0x0143, r25
     204:	80 93 42 01 	sts	0x0142, r24
		elapsed_distance_cm+=perimeter_cm;			//every 10 pulses"one cycle" increase elapsed distance by 157cm
     208:	80 91 2e 01 	lds	r24, 0x012E
     20c:	90 91 2f 01 	lds	r25, 0x012F
     210:	83 56       	subi	r24, 0x63	; 99
     212:	9f 4f       	sbci	r25, 0xFF	; 255
     214:	90 93 2f 01 	sts	0x012F, r25
     218:	80 93 2e 01 	sts	0x012E, r24
		Total_distance_cm+=perimeter_cm;			//integrating Total Distance in centimeter
     21c:	80 91 30 01 	lds	r24, 0x0130
     220:	90 91 31 01 	lds	r25, 0x0131
     224:	83 56       	subi	r24, 0x63	; 99
     226:	9f 4f       	sbci	r25, 0xFF	; 255
     228:	90 93 31 01 	sts	0x0131, r25
     22c:	80 93 30 01 	sts	0x0130, r24
		inst_16ms_counter=0;						//reset instantaneous time counter
     230:	10 92 35 01 	sts	0x0135, r1
     234:	10 92 34 01 	sts	0x0134, r1
		inst_spokes_counter=0;						//reset instantaneous spokes counter
     238:	10 92 37 01 	sts	0x0137, r1
     23c:	10 92 36 01 	sts	0x0136, r1
	//avg_time=ceil((count_avg_t2-count_avg_t1)*0.016);	//time counters difference * 16ms
	//total_16ms_counter=0;								//reset time counter
	//total_spokes_counter=0;								//reset spokes counter
	//}
	
}
     240:	9f 91       	pop	r25
     242:	8f 91       	pop	r24
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <Calculate_speeds_distance>:
void Calculate_speeds_distance()
{
	if(inst_16ms_counter<35)							//The Maximum Expected Period "@minimum Velocity"
     24e:	80 91 34 01 	lds	r24, 0x0134
     252:	90 91 35 01 	lds	r25, 0x0135
     256:	83 97       	sbiw	r24, 0x23	; 35
     258:	08 f0       	brcs	.+2      	; 0x25c <Calculate_speeds_distance+0xe>
     25a:	71 c0       	rjmp	.+226    	; 0x33e <Calculate_speeds_distance+0xf0>
	{
		period=(count_t2-count_t1)*16;					//to calculate difference in time Through 10 pulses.....16 stands for 16ms
     25c:	60 91 42 01 	lds	r22, 0x0142
     260:	70 91 43 01 	lds	r23, 0x0143
     264:	80 91 44 01 	lds	r24, 0x0144
     268:	90 91 45 01 	lds	r25, 0x0145
     26c:	68 1b       	sub	r22, r24
     26e:	79 0b       	sbc	r23, r25
     270:	62 95       	swap	r22
     272:	72 95       	swap	r23
     274:	70 7f       	andi	r23, 0xF0	; 240
     276:	76 27       	eor	r23, r22
     278:	60 7f       	andi	r22, 0xF0	; 240
     27a:	76 27       	eor	r23, r22
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     284:	60 93 3a 01 	sts	0x013A, r22
     288:	70 93 3b 01 	sts	0x013B, r23
     28c:	80 93 3c 01 	sts	0x013C, r24
     290:	90 93 3d 01 	sts	0x013D, r25
		if(period>0)
     294:	60 91 3a 01 	lds	r22, 0x013A
     298:	70 91 3b 01 	lds	r23, 0x013B
     29c:	80 91 3c 01 	lds	r24, 0x013C
     2a0:	90 91 3d 01 	lds	r25, 0x013D
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	a9 01       	movw	r20, r18
     2aa:	0e 94 81 07 	call	0xf02	; 0xf02 <__gesf2>
     2ae:	18 16       	cp	r1, r24
     2b0:	dc f4       	brge	.+54     	; 0x2e8 <Calculate_speeds_distance+0x9a>
			freq=(1000.00/period);						//freq=1/period...but 1000/period in HZ
     2b2:	20 91 3a 01 	lds	r18, 0x013A
     2b6:	30 91 3b 01 	lds	r19, 0x013B
     2ba:	40 91 3c 01 	lds	r20, 0x013C
     2be:	50 91 3d 01 	lds	r21, 0x013D
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	8a e7       	ldi	r24, 0x7A	; 122
     2c8:	94 e4       	ldi	r25, 0x44	; 68
     2ca:	0e 94 07 06 	call	0xc0e	; 0xc0e <__divsf3>
     2ce:	46 2f       	mov	r20, r22
     2d0:	57 2f       	mov	r21, r23
     2d2:	68 2f       	mov	r22, r24
     2d4:	79 2f       	mov	r23, r25
     2d6:	40 93 3e 01 	sts	0x013E, r20
     2da:	50 93 3f 01 	sts	0x013F, r21
     2de:	60 93 40 01 	sts	0x0140, r22
     2e2:	70 93 41 01 	sts	0x0141, r23
     2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <Calculate_speeds_distance+0xaa>
		else
			freq=0;
     2e8:	10 92 3e 01 	sts	0x013E, r1
     2ec:	10 92 3f 01 	sts	0x013F, r1
     2f0:	10 92 40 01 	sts	0x0140, r1
     2f4:	10 92 41 01 	sts	0x0141, r1
		inst_speed=ceil((perimeter_cm*freq/100)*3.6);			//instantaneous speed in km/hour
     2f8:	60 91 3e 01 	lds	r22, 0x013E
     2fc:	70 91 3f 01 	lds	r23, 0x013F
     300:	80 91 40 01 	lds	r24, 0x0140
     304:	90 91 41 01 	lds	r25, 0x0141
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4d e1       	ldi	r20, 0x1D	; 29
     30e:	53 e4       	ldi	r21, 0x43	; 67
     310:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	48 ec       	ldi	r20, 0xC8	; 200
     31a:	52 e4       	ldi	r21, 0x42	; 66
     31c:	0e 94 07 06 	call	0xc0e	; 0xc0e <__divsf3>
     320:	26 e6       	ldi	r18, 0x66	; 102
     322:	36 e6       	ldi	r19, 0x66	; 102
     324:	46 e6       	ldi	r20, 0x66	; 102
     326:	50 e4       	ldi	r21, 0x40	; 64
     328:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     32c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ceil>
     330:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixsfsi>
     334:	70 93 2b 01 	sts	0x012B, r23
     338:	60 93 2a 01 	sts	0x012A, r22
     33c:	04 c0       	rjmp	.+8      	; 0x346 <Calculate_speeds_distance+0xf8>
	}
	else
	{
		inst_speed=0;
     33e:	10 92 2b 01 	sts	0x012B, r1
     342:	10 92 2a 01 	sts	0x012A, r1
	}
	elapsed_distance_m=Total_distance_cm/100;
     346:	20 91 30 01 	lds	r18, 0x0130
     34a:	30 91 31 01 	lds	r19, 0x0131
     34e:	36 95       	lsr	r19
     350:	27 95       	ror	r18
     352:	36 95       	lsr	r19
     354:	27 95       	ror	r18
     356:	ab e7       	ldi	r26, 0x7B	; 123
     358:	b4 e1       	ldi	r27, 0x14	; 20
     35a:	0e 94 20 08 	call	0x1040	; 0x1040 <__umulhisi3>
     35e:	96 95       	lsr	r25
     360:	87 95       	ror	r24
     362:	90 93 2d 01 	sts	0x012D, r25
     366:	80 93 2c 01 	sts	0x012C, r24
	avg_time=minutes*60+seconds;							//Calculate Total elapsed Time
     36a:	40 91 1e 01 	lds	r20, 0x011E
     36e:	50 91 1f 01 	lds	r21, 0x011F
     372:	80 91 20 01 	lds	r24, 0x0120
     376:	90 91 21 01 	lds	r25, 0x0121
     37a:	6c e3       	ldi	r22, 0x3C	; 60
     37c:	64 9f       	mul	r22, r20
     37e:	90 01       	movw	r18, r0
     380:	65 9f       	mul	r22, r21
     382:	30 0d       	add	r19, r0
     384:	11 24       	eor	r1, r1
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	90 93 39 01 	sts	0x0139, r25
     38e:	80 93 38 01 	sts	0x0138, r24
	if(avg_time>0)
     392:	80 91 38 01 	lds	r24, 0x0138
     396:	90 91 39 01 	lds	r25, 0x0139
     39a:	89 2b       	or	r24, r25
     39c:	e9 f0       	breq	.+58     	; 0x3d8 <Calculate_speeds_distance+0x18a>
	avg_speed=ceil((elapsed_distance_m/avg_time)*3.6); 			//average speed in km/hour
     39e:	80 91 2c 01 	lds	r24, 0x012C
     3a2:	90 91 2d 01 	lds	r25, 0x012D
     3a6:	60 91 38 01 	lds	r22, 0x0138
     3aa:	70 91 39 01 	lds	r23, 0x0139
     3ae:	0e 94 0c 08 	call	0x1018	; 0x1018 <__udivmodhi4>
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	46 e6       	ldi	r20, 0x66	; 102
     3c0:	50 e4       	ldi	r21, 0x40	; 64
     3c2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     3c6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ceil>
     3ca:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixsfsi>
     3ce:	70 93 29 01 	sts	0x0129, r23
     3d2:	60 93 28 01 	sts	0x0128, r22
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <Calculate_speeds_distance+0x192>
	else
	avg_speed=0;
     3d8:	10 92 29 01 	sts	0x0129, r1
     3dc:	10 92 28 01 	sts	0x0128, r1
	if((elapsed_distance_cm>=120000) && (elapsed_distance_cm<125000))			//Increase Laps and reset elapsed Distance
     3e0:	80 91 2e 01 	lds	r24, 0x012E
     3e4:	90 91 2f 01 	lds	r25, 0x012F
     3e8:	08 95       	ret

000003ea <send_cmd_4bits>:
	send_cmd_4bits(0x80);			// Move the Cursor to First line First Position
	//send_cmd_4bits(0x01);
}
void send_cmd_4bits( char cmd)
{
	databus=(cmd & 0xf0)|(databus&0x0f);				// Send the Higher Nibble of the command to LCD
     3ea:	9b b1       	in	r25, 0x0b	; 11
     3ec:	28 2f       	mov	r18, r24
     3ee:	20 7f       	andi	r18, 0xF0	; 240
     3f0:	9f 70       	andi	r25, 0x0F	; 15
     3f2:	92 2b       	or	r25, r18
     3f4:	9b b9       	out	0x0b, r25	; 11
	control_bus &=~(1<<rs);								// Select the Command Register by pulling RS LOW
     3f6:	40 98       	cbi	0x08, 0	; 8
	control_bus &=~(1<<rw);								// Select the Write Operation  by pulling RW LOW
     3f8:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;								// Send a High-to-Low Pulse at Enable Pin
     3fa:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fc:	35 e0       	ldi	r19, 0x05	; 5
     3fe:	3a 95       	dec	r19
     400:	f1 f7       	brne	.-4      	; 0x3fe <send_cmd_4bits+0x14>
     402:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     404:	42 98       	cbi	0x08, 2	; 8
     406:	95 e3       	ldi	r25, 0x35	; 53
     408:	9a 95       	dec	r25
     40a:	f1 f7       	brne	.-4      	; 0x408 <send_cmd_4bits+0x1e>
     40c:	00 00       	nop
	
	_delay_us(10);										// wait for some time
	
	databus=((cmd<<4) & 0xf0)|(databus&0x0f);			// Send the Lower Nibble of the command to LCD
     40e:	2b b1       	in	r18, 0x0b	; 11
     410:	30 e1       	ldi	r19, 0x10	; 16
     412:	83 9f       	mul	r24, r19
     414:	c0 01       	movw	r24, r0
     416:	11 24       	eor	r1, r1
     418:	92 2f       	mov	r25, r18
     41a:	9f 70       	andi	r25, 0x0F	; 15
     41c:	89 2b       	or	r24, r25
     41e:	8b b9       	out	0x0b, r24	; 11
	control_bus &=~(1<<rs);								// Select the Command Register by pulling RS LOW
     420:	40 98       	cbi	0x08, 0	; 8
	control_bus &=~(1<<rw);								// Select the Write Operation  by pulling RW LOW
     422:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;								// Send a High-to-Low Pulse at Enable Pin
     424:	42 9a       	sbi	0x08, 2	; 8
     426:	85 e0       	ldi	r24, 0x05	; 5
     428:	8a 95       	dec	r24
     42a:	f1 f7       	brne	.-4      	; 0x428 <send_cmd_4bits+0x3e>
     42c:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);	
     42e:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	8f e9       	ldi	r24, 0x9F	; 159
     432:	9f e0       	ldi	r25, 0x0F	; 15
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <send_cmd_4bits+0x4a>
     438:	00 c0       	rjmp	.+0      	; 0x43a <send_cmd_4bits+0x50>
     43a:	00 00       	nop
     43c:	08 95       	ret

0000043e <lcd_init_4bits>:
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	85 ea       	ldi	r24, 0xA5	; 165
     442:	9e e0       	ldi	r25, 0x0E	; 14
     444:	21 50       	subi	r18, 0x01	; 1
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	90 40       	sbci	r25, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <lcd_init_4bits+0x6>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init_4bits+0x10>
     44e:	00 00       	nop

//==================LCD Functions Implementation
void lcd_init_4bits()
{
	_delay_ms(300);
	data_pinsmode|=0xf0;			// Configure both databus and controlbus as output
     450:	8a b1       	in	r24, 0x0a	; 10
     452:	80 6f       	ori	r24, 0xF0	; 240
     454:	8a b9       	out	0x0a, r24	; 10
	control_pinsmode|=0x07;
     456:	87 b1       	in	r24, 0x07	; 7
     458:	87 60       	ori	r24, 0x07	; 7
     45a:	87 b9       	out	0x07, r24	; 7
	databus=0x00;  					//initialize data bus port
     45c:	1b b8       	out	0x0b, r1	; 11
     45e:	2f ef       	ldi	r18, 0xFF	; 255
     460:	89 ef       	ldi	r24, 0xF9	; 249
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	21 50       	subi	r18, 0x01	; 1
     466:	80 40       	sbci	r24, 0x00	; 0
     468:	90 40       	sbci	r25, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <lcd_init_4bits+0x26>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <lcd_init_4bits+0x30>
     46e:	00 00       	nop
	_delay_ms(20);
	send_cmd_4bits(0x30);
     470:	80 e3       	ldi	r24, 0x30	; 48
     472:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     476:	8f e1       	ldi	r24, 0x1F	; 31
     478:	9e e4       	ldi	r25, 0x4E	; 78
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_init_4bits+0x3c>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <lcd_init_4bits+0x42>
     480:	00 00       	nop
	_delay_ms(5);
	send_cmd_4bits(0x30);
     482:	80 e3       	ldi	r24, 0x30	; 48
     484:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     488:	8f e9       	ldi	r24, 0x9F	; 159
     48a:	9f e0       	ldi	r25, 0x0F	; 15
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_init_4bits+0x4e>
     490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_init_4bits+0x54>
     492:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x30);
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     49a:	8f e9       	ldi	r24, 0x9F	; 159
     49c:	9f e0       	ldi	r25, 0x0F	; 15
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <lcd_init_4bits+0x60>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <lcd_init_4bits+0x66>
     4a4:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x02);			 //Initialize the LCD in 4bit Mode
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     4ac:	8f e9       	ldi	r24, 0x9F	; 159
     4ae:	9f e0       	ldi	r25, 0x0F	; 15
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcd_init_4bits+0x72>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <lcd_init_4bits+0x78>
     4b6:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x28);
     4b8:	88 e2       	ldi	r24, 0x28	; 40
     4ba:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     4be:	8f e9       	ldi	r24, 0x9F	; 159
     4c0:	9f e0       	ldi	r25, 0x0F	; 15
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init_4bits+0x84>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init_4bits+0x8a>
     4c8:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x06);			//entry mode set: increment cursor & without shifting entire display
     4ca:	86 e0       	ldi	r24, 0x06	; 6
     4cc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     4d0:	8f e9       	ldi	r24, 0x9F	; 159
     4d2:	9f e0       	ldi	r25, 0x0F	; 15
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <lcd_init_4bits+0x96>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <lcd_init_4bits+0x9c>
     4da:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x14);			//cursor or display shift: only cursor shifted right
     4dc:	84 e1       	ldi	r24, 0x14	; 20
     4de:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     4e2:	8f e9       	ldi	r24, 0x9F	; 159
     4e4:	9f e0       	ldi	r25, 0x0F	; 15
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <lcd_init_4bits+0xa8>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <lcd_init_4bits+0xae>
     4ec:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x0E);			// Display ON cursor ON
     4ee:	8e e0       	ldi	r24, 0x0E	; 14
     4f0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     4f4:	8f e9       	ldi	r24, 0x9F	; 159
     4f6:	9f e0       	ldi	r25, 0x0F	; 15
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init_4bits+0xba>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init_4bits+0xc0>
     4fe:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x40);			//enable CGRAM
     500:	80 e4       	ldi	r24, 0x40	; 64
     502:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     506:	8f e9       	ldi	r24, 0x9F	; 159
     508:	9f e0       	ldi	r25, 0x0F	; 15
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <lcd_init_4bits+0xcc>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <lcd_init_4bits+0xd2>
     510:	00 00       	nop
	_delay_ms(1);
	send_cmd_4bits(0x80);			// Move the Cursor to First line First Position
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     518:	08 95       	ret

0000051a <send_char_4bits>:
	_delay_ms(1);
}
void send_char_4bits( char dat)
{
	//check_busy();
	databus=(dat & 0xf0)|(databus&0x0f);			// Send the Higher Nibble of the Data to LCD
     51a:	9b b1       	in	r25, 0x0b	; 11
     51c:	28 2f       	mov	r18, r24
     51e:	20 7f       	andi	r18, 0xF0	; 240
     520:	9f 70       	andi	r25, 0x0F	; 15
     522:	92 2b       	or	r25, r18
     524:	9b b9       	out	0x0b, r25	; 11
	control_bus |=1<<rs;							// Select the Data Register by pulling RS HIGH
     526:	40 9a       	sbi	0x08, 0	; 8
	control_bus &=~(1<<rw);							// Select the Write Operation  by pulling RW LOW
     528:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
     52a:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52c:	35 e0       	ldi	r19, 0x05	; 5
     52e:	3a 95       	dec	r19
     530:	f1 f7       	brne	.-4      	; 0x52e <send_char_4bits+0x14>
     532:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     534:	42 98       	cbi	0x08, 2	; 8
     536:	95 e3       	ldi	r25, 0x35	; 53
     538:	9a 95       	dec	r25
     53a:	f1 f7       	brne	.-4      	; 0x538 <send_char_4bits+0x1e>
     53c:	00 00       	nop
	_delay_us(10);
	
	databus=((dat <<4) & 0xf0)|(databus&0x0f);		// Send the Lower Nibble of the Data to LCD
     53e:	2b b1       	in	r18, 0x0b	; 11
     540:	30 e1       	ldi	r19, 0x10	; 16
     542:	83 9f       	mul	r24, r19
     544:	c0 01       	movw	r24, r0
     546:	11 24       	eor	r1, r1
     548:	92 2f       	mov	r25, r18
     54a:	9f 70       	andi	r25, 0x0F	; 15
     54c:	89 2b       	or	r24, r25
     54e:	8b b9       	out	0x0b, r24	; 11
	control_bus |=1<<rs;							// Select the Data Register by pulling RS HIGH
     550:	40 9a       	sbi	0x08, 0	; 8
	control_bus &=~(1<<rw);							// Select the Write Operation  by pulling RW LOW
     552:	41 98       	cbi	0x08, 1	; 8
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
     554:	42 9a       	sbi	0x08, 2	; 8
     556:	85 e0       	ldi	r24, 0x05	; 5
     558:	8a 95       	dec	r24
     55a:	f1 f7       	brne	.-4      	; 0x558 <send_char_4bits+0x3e>
     55c:	00 00       	nop
	_delay_us(1);
	control_bus &=~(1<<en);
     55e:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     560:	8f e9       	ldi	r24, 0x9F	; 159
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <send_char_4bits+0x4a>
     568:	00 c0       	rjmp	.+0      	; 0x56a <send_char_4bits+0x50>
     56a:	00 00       	nop
     56c:	08 95       	ret

0000056e <send_str_4bits>:
	_delay_ms(1);
}
void send_str_4bits(char *string)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
	while(*string!='\0')
     574:	88 81       	ld	r24, Y
     576:	88 23       	and	r24, r24
     578:	31 f0       	breq	.+12     	; 0x586 <send_str_4bits+0x18>
	control_bus |=1<<en;							// Send a High-to-Low Pulse at Enable Pin
	_delay_us(1);
	control_bus &=~(1<<en);
	_delay_ms(1);
}
void send_str_4bits(char *string)
     57a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string!='\0')
	{
		send_char_4bits(*string++);
     57c:	0e 94 8d 02 	call	0x51a	; 0x51a <send_char_4bits>
	control_bus &=~(1<<en);
	_delay_ms(1);
}
void send_str_4bits(char *string)
{
	while(*string!='\0')
     580:	89 91       	ld	r24, Y+
     582:	81 11       	cpse	r24, r1
     584:	fb cf       	rjmp	.-10     	; 0x57c <send_str_4bits+0xe>
	{
		send_char_4bits(*string++);
	}
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <goto_XY_4bits>:
void goto_XY_4bits(uint8_t x,uint8_t y)
{
	if (y==1)
     58c:	61 30       	cpi	r22, 0x01	; 1
     58e:	21 f4       	brne	.+8      	; 0x598 <goto_XY_4bits+0xc>
	{
		send_cmd_4bits(firstline+x);
     590:	80 58       	subi	r24, 0x80	; 128
     592:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     596:	08 95       	ret
	}
	else if(y==2)
     598:	62 30       	cpi	r22, 0x02	; 2
     59a:	19 f4       	brne	.+6      	; 0x5a2 <goto_XY_4bits+0x16>
	{
		send_cmd_4bits(secondline+x);
     59c:	80 54       	subi	r24, 0x40	; 64
     59e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <send_cmd_4bits>
     5a2:	08 95       	ret

000005a4 <send_str_4bits_withXY>:
	}
}
void send_str_4bits_withXY(uint8_t x,uint8_t y,char *string)
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ea 01       	movw	r28, r20
	goto_XY_4bits(x,y);
     5aa:	0e 94 c6 02 	call	0x58c	; 0x58c <goto_XY_4bits>
	send_str_4bits(string);
     5ae:	ce 01       	movw	r24, r28
     5b0:	0e 94 b7 02 	call	0x56e	; 0x56e <send_str_4bits>
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <send_int_withXY>:
void send_int_withXY(uint8_t x,uint8_t y,int value,uint8_t no_digits)
{
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	d8 2e       	mov	r13, r24
     5d0:	c6 2e       	mov	r12, r22
     5d2:	ca 01       	movw	r24, r20
	char stringToDisplay[no_digits];
	itoa(value,stringToDisplay,10);
	send_str_4bits_withXY(x,y,stringToDisplay);
	//send_str_4bits(" ");
}
     5d4:	ed b6       	in	r14, 0x3d	; 61
     5d6:	fe b6       	in	r15, 0x3e	; 62
	goto_XY_4bits(x,y);
	send_str_4bits(string);
}
void send_int_withXY(uint8_t x,uint8_t y,int value,uint8_t no_digits)
{
	char stringToDisplay[no_digits];
     5d8:	4d b7       	in	r20, 0x3d	; 61
     5da:	5e b7       	in	r21, 0x3e	; 62
     5dc:	42 1b       	sub	r20, r18
     5de:	51 09       	sbc	r21, r1
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	5e bf       	out	0x3e, r21	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	4d bf       	out	0x3d, r20	; 61
     5ea:	0d b7       	in	r16, 0x3d	; 61
     5ec:	1e b7       	in	r17, 0x3e	; 62
     5ee:	0f 5f       	subi	r16, 0xFF	; 255
     5f0:	1f 4f       	sbci	r17, 0xFF	; 255
	itoa(value,stringToDisplay,10);
     5f2:	4a e0       	ldi	r20, 0x0A	; 10
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	60 2f       	mov	r22, r16
     5f8:	71 2f       	mov	r23, r17
     5fa:	0e 94 2c 08 	call	0x1058	; 0x1058 <itoa>
	send_str_4bits_withXY(x,y,stringToDisplay);
     5fe:	40 2f       	mov	r20, r16
     600:	51 2f       	mov	r21, r17
     602:	6c 2d       	mov	r22, r12
     604:	8d 2d       	mov	r24, r13
     606:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	//send_str_4bits(" ");
}
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	fe be       	out	0x3e, r15	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	ed be       	out	0x3d, r14	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <Display_speeds_distance>:
	}
}
void Display_speeds_distance()
{
	//Calculate_speeds_distance();
	if(inst_speed>35)
     626:	80 91 2a 01 	lds	r24, 0x012A
     62a:	90 91 2b 01 	lds	r25, 0x012B
     62e:	84 97       	sbiw	r24, 0x24	; 36
     630:	3c f0       	brlt	.+14     	; 0x640 <Display_speeds_distance+0x1a>
	{
		send_int_withXY(0,1,37,2);
     632:	22 e0       	ldi	r18, 0x02	; 2
     634:	45 e2       	ldi	r20, 0x25	; 37
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
	}
	if(inst_speed>9)
     640:	80 91 2a 01 	lds	r24, 0x012A
     644:	90 91 2b 01 	lds	r25, 0x012B
     648:	0a 97       	sbiw	r24, 0x0a	; 10
     64a:	54 f0       	brlt	.+20     	; 0x660 <Display_speeds_distance+0x3a>
	{
		send_int_withXY(0,1,inst_speed,2);
     64c:	40 91 2a 01 	lds	r20, 0x012A
     650:	50 91 2b 01 	lds	r21, 0x012B
     654:	22 e0       	ldi	r18, 0x02	; 2
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     65e:	0f c0       	rjmp	.+30     	; 0x67e <Display_speeds_distance+0x58>
	}
	else
	{
		send_str_4bits_withXY(0,1,"0");
     660:	48 e0       	ldi	r20, 0x08	; 8
     662:	51 e0       	ldi	r21, 0x01	; 1
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
		send_int_withXY(1,1,inst_speed,1);
     66c:	40 91 2a 01 	lds	r20, 0x012A
     670:	50 91 2b 01 	lds	r21, 0x012B
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
	}
	if(avg_speed>25)
     67e:	80 91 28 01 	lds	r24, 0x0128
     682:	90 91 29 01 	lds	r25, 0x0129
     686:	4a 97       	sbiw	r24, 0x1a	; 26
     688:	3c f0       	brlt	.+14     	; 0x698 <Display_speeds_distance+0x72>
	{
		send_int_withXY(9,1,27,2);
     68a:	22 e0       	ldi	r18, 0x02	; 2
     68c:	4b e1       	ldi	r20, 0x1B	; 27
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	89 e0       	ldi	r24, 0x09	; 9
     694:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
	}
	if(avg_speed>9)
     698:	80 91 28 01 	lds	r24, 0x0128
     69c:	90 91 29 01 	lds	r25, 0x0129
     6a0:	0a 97       	sbiw	r24, 0x0a	; 10
     6a2:	54 f0       	brlt	.+20     	; 0x6b8 <Display_speeds_distance+0x92>
	{
		send_int_withXY(9,1,avg_speed,2);
     6a4:	40 91 28 01 	lds	r20, 0x0128
     6a8:	50 91 29 01 	lds	r21, 0x0129
     6ac:	22 e0       	ldi	r18, 0x02	; 2
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	89 e0       	ldi	r24, 0x09	; 9
     6b2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <Display_speeds_distance+0xb0>
	}
	else
	{
		send_str_4bits_withXY(9,1,"0");
     6b8:	48 e0       	ldi	r20, 0x08	; 8
     6ba:	51 e0       	ldi	r21, 0x01	; 1
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	89 e0       	ldi	r24, 0x09	; 9
     6c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
		send_int_withXY(10,1,avg_speed,1);
     6c4:	40 91 28 01 	lds	r20, 0x0128
     6c8:	50 91 29 01 	lds	r21, 0x0129
     6cc:	21 e0       	ldi	r18, 0x01	; 1
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	8a e0       	ldi	r24, 0x0A	; 10
     6d2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
	}
	if(laps>9)
     6d6:	80 91 46 01 	lds	r24, 0x0146
     6da:	8a 30       	cpi	r24, 0x0A	; 10
     6dc:	48 f0       	brcs	.+18     	; 0x6f0 <Display_speeds_distance+0xca>
	{
		send_int_withXY(6,2,laps,2);
     6de:	40 91 46 01 	lds	r20, 0x0146
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	62 e0       	ldi	r22, 0x02	; 2
     6e8:	86 e0       	ldi	r24, 0x06	; 6
     6ea:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     6ee:	08 95       	ret
	}
	else
	{
		send_str_4bits_withXY(6,2,"0");
     6f0:	48 e0       	ldi	r20, 0x08	; 8
     6f2:	51 e0       	ldi	r21, 0x01	; 1
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
		send_int_withXY(7,2,laps,1);
     6fc:	40 91 46 01 	lds	r20, 0x0146
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	62 e0       	ldi	r22, 0x02	; 2
     706:	87 e0       	ldi	r24, 0x07	; 7
     708:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     70c:	08 95       	ret

0000070e <Display_constants>:
	send_cmd_4bits(0x01);
	_delay_ms(2);
}
void Display_constants()
{
	 send_str_4bits_withXY(2,1," Km/h");		//for instantaneous speed
     70e:	4a e0       	ldi	r20, 0x0A	; 10
     710:	51 e0       	ldi	r21, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(7,1,"  ");
     71a:	40 e1       	ldi	r20, 0x10	; 16
     71c:	51 e0       	ldi	r21, 0x01	; 1
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	87 e0       	ldi	r24, 0x07	; 7
     722:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(11,1," Km/h");
     726:	4a e0       	ldi	r20, 0x0A	; 10
     728:	51 e0       	ldi	r21, 0x01	; 1
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	8b e0       	ldi	r24, 0x0B	; 11
     72e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(2,2,":");		//for stopwatch
     732:	43 e1       	ldi	r20, 0x13	; 19
     734:	51 e0       	ldi	r21, 0x01	; 1
     736:	62 e0       	ldi	r22, 0x02	; 2
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(5,2,"  ");
     73e:	40 e1       	ldi	r20, 0x10	; 16
     740:	51 e0       	ldi	r21, 0x01	; 1
     742:	62 e0       	ldi	r22, 0x02	; 2
     744:	85 e0       	ldi	r24, 0x05	; 5
     746:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(8,2,"LAPs");
     74a:	45 e1       	ldi	r20, 0x15	; 21
     74c:	51 e0       	ldi	r21, 0x01	; 1
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	 send_str_4bits_withXY(15,2,"%");		//for Throttle
     756:	4a e1       	ldi	r20, 0x1A	; 26
     758:	51 e0       	ldi	r21, 0x01	; 1
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	8f e0       	ldi	r24, 0x0F	; 15
     75e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
     762:	08 95       	ret

00000764 <init_ThrottleThumb>:

//================Thumb Throttle Functions implementation
void init_ThrottleThumb()
{  
   //voltage reference:(with AVCC reference):
    sbi(ADMUX,REFS0);   
     764:	ec e7       	ldi	r30, 0x7C	; 124
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	80 64       	ori	r24, 0x40	; 64
     76c:	80 83       	st	Z, r24
    //cbi(ADMUX,REFS1);

    //select ADC3 Channel:
    sbi(ADMUX,MUX0);
     76e:	80 81       	ld	r24, Z
     770:	81 60       	ori	r24, 0x01	; 1
     772:	80 83       	st	Z, r24
    sbi(ADMUX,MUX1);
     774:	80 81       	ld	r24, Z
     776:	82 60       	ori	r24, 0x02	; 2
     778:	80 83       	st	Z, r24
    cbi(ADMUX,MUX2);
     77a:	80 81       	ld	r24, Z
     77c:	8b 7f       	andi	r24, 0xFB	; 251
     77e:	80 83       	st	Z, r24
    cbi(ADMUX,MUX3);
     780:	80 81       	ld	r24, Z
     782:	87 7f       	andi	r24, 0xF7	; 247
     784:	80 83       	st	Z, r24

    cbi(ADMUX,ADLAR);    //right adjustment
     786:	80 81       	ld	r24, Z
     788:	8f 7d       	andi	r24, 0xDF	; 223
     78a:	80 83       	st	Z, r24

    //prescaler selector: (128 division factor):
    sbi(ADCSRA,ADPS0);
     78c:	ea e7       	ldi	r30, 0x7A	; 122
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	81 60       	ori	r24, 0x01	; 1
     794:	80 83       	st	Z, r24
    sbi(ADCSRA,ADPS1);
     796:	80 81       	ld	r24, Z
     798:	82 60       	ori	r24, 0x02	; 2
     79a:	80 83       	st	Z, r24
    sbi(ADCSRA,ADPS2);
     79c:	80 81       	ld	r24, Z
     79e:	84 60       	ori	r24, 0x04	; 4
     7a0:	80 83       	st	Z, r24
    sbi(ADCSRA,ADEN);	   //enable ADC
     7a2:	80 81       	ld	r24, Z
     7a4:	80 68       	ori	r24, 0x80	; 128
     7a6:	80 83       	st	Z, r24
	sbi(ADCSRA,ADIE);	   //enable ADC interrupt
     7a8:	80 81       	ld	r24, Z
     7aa:	88 60       	ori	r24, 0x08	; 8
     7ac:	80 83       	st	Z, r24
	sbi(ADCSRA,ADSC);	   //start first conversion
     7ae:	80 81       	ld	r24, Z
     7b0:	80 64       	ori	r24, 0x40	; 64
     7b2:	80 83       	st	Z, r24

    //consumption reduction:
        //disable digital inputs:
        DIDR0=0xff;
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	80 93 7e 00 	sts	0x007E, r24
        //POWER reduction:
        sbi(SMCR,SE);   //ENABLE SLEEP MODE
     7ba:	83 b7       	in	r24, 0x33	; 51
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	83 bf       	out	0x33, r24	; 51
        sbi(SMCR,SM0);  //ADC noise cancellation
     7c0:	83 b7       	in	r24, 0x33	; 51
     7c2:	82 60       	ori	r24, 0x02	; 2
     7c4:	83 bf       	out	0x33, r24	; 51
     7c6:	08 95       	ret

000007c8 <Read_Throttle>:
	/* adcx is the analog pin we want to use.  ADMUX's first few bits are
	 * the binary representations of the numbers of the pins so we can
	 * just 'OR' the pin's number with ADMUX to select that pin.
	 * We first zero the four bits by setting ADMUX equal to its higher
	 * four bits. */
	ADMUX	&=	0xf0;
     7c8:	ec e7       	ldi	r30, 0x7C	; 124
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	90 81       	ld	r25, Z
     7ce:	90 7f       	andi	r25, 0xF0	; 240
     7d0:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
     7d2:	90 81       	ld	r25, Z
     7d4:	89 2b       	or	r24, r25
     7d6:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     7d8:	ea e7       	ldi	r30, 0x7A	; 122
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	80 64       	ori	r24, 0x40	; 64
     7e0:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
     7e2:	80 81       	ld	r24, Z
     7e4:	86 fd       	sbrc	r24, 6
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <Read_Throttle+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     7e8:	20 91 78 00 	lds	r18, 0x0078
     7ec:	30 91 79 00 	lds	r19, 0x0079
}
     7f0:	82 2f       	mov	r24, r18
     7f2:	93 2f       	mov	r25, r19
     7f4:	08 95       	ret

000007f6 <Display_throttle>:
void Display_throttle()
{
   digital_throt_sensor_read=Read_Throttle(3);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Read_Throttle>
     7fc:	90 93 23 01 	sts	0x0123, r25
     800:	80 93 22 01 	sts	0x0122, r24
   lcd_throttle_value=floorf(((digital_throt_sensor_read-161)/(1023.0))*99*1.45);
     804:	60 91 22 01 	lds	r22, 0x0122
     808:	70 91 23 01 	lds	r23, 0x0123
     80c:	61 5a       	subi	r22, 0xA1	; 161
     80e:	71 09       	sbc	r23, r1
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 ec       	ldi	r19, 0xC0	; 192
     81c:	4f e7       	ldi	r20, 0x7F	; 127
     81e:	54 e4       	ldi	r21, 0x44	; 68
     820:	0e 94 07 06 	call	0xc0e	; 0xc0e <__divsf3>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	46 ec       	ldi	r20, 0xC6	; 198
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     830:	2a e9       	ldi	r18, 0x9A	; 154
     832:	39 e9       	ldi	r19, 0x99	; 153
     834:	49 eb       	ldi	r20, 0xB9	; 185
     836:	5f e3       	ldi	r21, 0x3F	; 63
     838:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     83c:	0e 94 dd 06 	call	0xdba	; 0xdba <floor>
     840:	60 93 24 01 	sts	0x0124, r22
     844:	70 93 25 01 	sts	0x0125, r23
     848:	80 93 26 01 	sts	0x0126, r24
     84c:	90 93 27 01 	sts	0x0127, r25
   if(lcd_throttle_value>=99)
     850:	60 91 24 01 	lds	r22, 0x0124
     854:	70 91 25 01 	lds	r23, 0x0125
     858:	80 91 26 01 	lds	r24, 0x0126
     85c:	90 91 27 01 	lds	r25, 0x0127
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	46 ec       	ldi	r20, 0xC6	; 198
     866:	52 e4       	ldi	r21, 0x42	; 66
     868:	0e 94 81 07 	call	0xf02	; 0xf02 <__gesf2>
     86c:	88 23       	and	r24, r24
     86e:	3c f0       	brlt	.+14     	; 0x87e <Display_throttle+0x88>
   {
	   send_int_withXY(13,2,99,2);
     870:	22 e0       	ldi	r18, 0x02	; 2
     872:	43 e6       	ldi	r20, 0x63	; 99
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	8d e0       	ldi	r24, 0x0D	; 13
     87a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
   }
   
   if(lcd_throttle_value>9)
     87e:	60 91 24 01 	lds	r22, 0x0124
     882:	70 91 25 01 	lds	r23, 0x0125
     886:	80 91 26 01 	lds	r24, 0x0126
     88a:	90 91 27 01 	lds	r25, 0x0127
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e1       	ldi	r20, 0x10	; 16
     894:	51 e4       	ldi	r21, 0x41	; 65
     896:	0e 94 81 07 	call	0xf02	; 0xf02 <__gesf2>
     89a:	18 16       	cp	r1, r24
     89c:	8c f4       	brge	.+34     	; 0x8c0 <Display_throttle+0xca>
   {
	   send_int_withXY(13,2,lcd_throttle_value,2);
     89e:	60 91 24 01 	lds	r22, 0x0124
     8a2:	70 91 25 01 	lds	r23, 0x0125
     8a6:	80 91 26 01 	lds	r24, 0x0126
     8aa:	90 91 27 01 	lds	r25, 0x0127
     8ae:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixsfsi>
     8b2:	22 e0       	ldi	r18, 0x02	; 2
     8b4:	ab 01       	movw	r20, r22
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	8d e0       	ldi	r24, 0x0D	; 13
     8ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     8be:	08 95       	ret
   }
   else
   {
	   send_str_4bits_withXY(13,2,"0");
     8c0:	48 e0       	ldi	r20, 0x08	; 8
     8c2:	51 e0       	ldi	r21, 0x01	; 1
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	8d e0       	ldi	r24, 0x0D	; 13
     8c8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
	   send_int_withXY(14,2,lcd_throttle_value,1);
     8cc:	60 91 24 01 	lds	r22, 0x0124
     8d0:	70 91 25 01 	lds	r23, 0x0125
     8d4:	80 91 26 01 	lds	r24, 0x0126
     8d8:	90 91 27 01 	lds	r25, 0x0127
     8dc:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixsfsi>
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	ab 01       	movw	r20, r22
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	8e e0       	ldi	r24, 0x0E	; 14
     8e8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     8ec:	08 95       	ret

000008ee <init_servo>:

//===============Servo Functions implementation
void init_servo()
{
	//set OC1A FOR generating PWM
	sbi(DDRB,PB1);
     8ee:	21 9a       	sbi	0x04, 1	; 4
	cbi(PORTB,PB1);
     8f0:	29 98       	cbi	0x05, 1	; 5

	//SELECT MODE:
	//fast PWM: (with top = ICR1 & update its value @ BOTTOM , TOV flag set on TOP)
	sbi(TCCR1A,WGM11);
     8f2:	e0 e8       	ldi	r30, 0x80	; 128
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	82 60       	ori	r24, 0x02	; 2
     8fa:	80 83       	st	Z, r24
	cbi(TCCR1A,WGM10);
     8fc:	80 81       	ld	r24, Z
     8fe:	8e 7f       	andi	r24, 0xFE	; 254
     900:	80 83       	st	Z, r24
	sbi(TCCR1B,WGM13);
     902:	a1 e8       	ldi	r26, 0x81	; 129
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	8c 91       	ld	r24, X
     908:	80 61       	ori	r24, 0x10	; 16
     90a:	8c 93       	st	X, r24
	sbi(TCCR1B,WGM12);
     90c:	8c 91       	ld	r24, X
     90e:	88 60       	ori	r24, 0x08	; 8
     910:	8c 93       	st	X, r24
	// non inverting mode : to control on servo motion @ last 2ms in period
	sbi(TCCR1A,COM1A0);
     912:	80 81       	ld	r24, Z
     914:	80 64       	ori	r24, 0x40	; 64
     916:	80 83       	st	Z, r24
	sbi(TCCR1A,COM1A1);
     918:	80 81       	ld	r24, Z
     91a:	80 68       	ori	r24, 0x80	; 128
     91c:	80 83       	st	Z, r24

	//PRECALING (64):(to have 40000 cycle per second which means that every ms has 250 cycles)
	sbi(TCCR1B,CS11);
     91e:	8c 91       	ld	r24, X
     920:	82 60       	ori	r24, 0x02	; 2
     922:	8c 93       	st	X, r24
	//sbi(TCCR1B,CS10);
	//setting top value equal 39999 @which starting a new clock
	ICR1=39999;
     924:	8f e3       	ldi	r24, 0x3F	; 63
     926:	9c e9       	ldi	r25, 0x9C	; 156
     928:	90 93 87 00 	sts	0x0087, r25
     92c:	80 93 86 00 	sts	0x0086, r24
     930:	08 95       	ret

00000932 <move_servo>:
	
}
void move_servo()
{
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
	
	OCR1A=(ICR1-max_deg)+(duty_cycle*(digital_throt_sensor_read-150));
     93e:	60 91 86 00 	lds	r22, 0x0086
     942:	70 91 87 00 	lds	r23, 0x0087
     946:	c0 91 22 01 	lds	r28, 0x0122
     94a:	d0 91 23 01 	lds	r29, 0x0123
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     956:	20 91 00 01 	lds	r18, 0x0100
     95a:	30 91 01 01 	lds	r19, 0x0101
     95e:	40 91 02 01 	lds	r20, 0x0102
     962:	50 91 03 01 	lds	r21, 0x0103
     966:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__subsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	be 01       	movw	r22, r28
     970:	66 59       	subi	r22, 0x96	; 150
     972:	71 09       	sbc	r23, r1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     97c:	20 91 47 01 	lds	r18, 0x0147
     980:	30 91 48 01 	lds	r19, 0x0148
     984:	40 91 49 01 	lds	r20, 0x0149
     988:	50 91 4a 01 	lds	r21, 0x014A
     98c:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
     994:	c7 01       	movw	r24, r14
     996:	b6 01       	movw	r22, r12
     998:	0e 94 90 05 	call	0xb20	; 0xb20 <__addsf3>
     99c:	0e 94 74 06 	call	0xce8	; 0xce8 <__fixunssfsi>
     9a0:	70 93 89 00 	sts	0x0089, r23
     9a4:	60 93 88 00 	sts	0x0088, r22

}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	08 95       	ret

000009b6 <__vector_21>:
	//UART_send_online();
}  
   return 0;
}
ISR(ADC_vect)							//on place 22 in interrupt vector table
{
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
	//Get Here After Every ADC conversion
	move_servo();
     9d8:	0e 94 99 04 	call	0x932	; 0x932 <move_servo>
	sbi(ADCSRA,ADSC);					//To Start New ADC conversion
     9dc:	ea e7       	ldi	r30, 0x7A	; 122
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	80 64       	ori	r24, 0x40	; 64
     9e4:	80 83       	st	Z, r24
}					
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <init_timer0>:
//=============================================

//=============Stop Watch Functions implementation
void init_timer0()
{
	sbi(TCCR0B,CS02); 		//PREscaler 256
     a08:	85 b5       	in	r24, 0x25	; 37
     a0a:	84 60       	ori	r24, 0x04	; 4
     a0c:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK0,TOIE0);		//enable overflow interrupt
     a0e:	ee e6       	ldi	r30, 0x6E	; 110
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	81 60       	ori	r24, 0x01	; 1
     a16:	80 83       	st	Z, r24
     a18:	08 95       	ret

00000a1a <Display_time>:
	
}
void Display_time()
{
	if(minutes>9)
     a1a:	80 91 1e 01 	lds	r24, 0x011E
     a1e:	90 91 1f 01 	lds	r25, 0x011F
     a22:	0a 97       	sbiw	r24, 0x0a	; 10
     a24:	50 f0       	brcs	.+20     	; 0xa3a <Display_time+0x20>
		send_int_withXY(0,2,minutes,2);
     a26:	40 91 1e 01 	lds	r20, 0x011E
     a2a:	50 91 1f 01 	lds	r21, 0x011F
     a2e:	22 e0       	ldi	r18, 0x02	; 2
     a30:	62 e0       	ldi	r22, 0x02	; 2
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     a38:	0f c0       	rjmp	.+30     	; 0xa58 <Display_time+0x3e>
	else
	{
		send_str_4bits_withXY(0,2,"0");
     a3a:	48 e0       	ldi	r20, 0x08	; 8
     a3c:	51 e0       	ldi	r21, 0x01	; 1
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
		send_int_withXY(1,2,minutes,1);
     a46:	40 91 1e 01 	lds	r20, 0x011E
     a4a:	50 91 1f 01 	lds	r21, 0x011F
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
	}
	if(seconds>9)
     a58:	80 91 20 01 	lds	r24, 0x0120
     a5c:	90 91 21 01 	lds	r25, 0x0121
     a60:	0a 97       	sbiw	r24, 0x0a	; 10
     a62:	50 f0       	brcs	.+20     	; 0xa78 <Display_time+0x5e>
		send_int_withXY(3,2,seconds,2);
     a64:	40 91 20 01 	lds	r20, 0x0120
     a68:	50 91 21 01 	lds	r21, 0x0121
     a6c:	22 e0       	ldi	r18, 0x02	; 2
     a6e:	62 e0       	ldi	r22, 0x02	; 2
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     a76:	08 95       	ret
	else
	{
		send_str_4bits_withXY(3,2,"0");
     a78:	48 e0       	ldi	r20, 0x08	; 8
     a7a:	51 e0       	ldi	r21, 0x01	; 1
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <send_str_4bits_withXY>
		send_int_withXY(4,2,seconds,1);
     a84:	40 91 20 01 	lds	r20, 0x0120
     a88:	50 91 21 01 	lds	r21, 0x0121
     a8c:	21 e0       	ldi	r18, 0x01	; 1
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	0e 94 dd 02 	call	0x5ba	; 0x5ba <send_int_withXY>
     a96:	08 95       	ret

00000a98 <main>:
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	89 e6       	ldi	r24, 0x69	; 105
     a9c:	98 e1       	ldi	r25, 0x18	; 24
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0x6>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <main+0x10>
     aa8:	00 00       	nop

int main(void)
{ 
   _delay_ms(500);
   //Indication LED:
   sbi(DDRB,PB0);				
     aaa:	20 9a       	sbi	0x04, 0	; 4
   sbi(PORTB,PB0);
     aac:	28 9a       	sbi	0x05, 0	; 5
   //=======================
   sei(); 									//turn on global interrupts
     aae:	78 94       	sei
   //LCD Initialization
   lcd_init_4bits();
     ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_init_4bits>
   //=================
   //===Stop Watch Initialization:
   init_timer0();
     ab4:	0e 94 04 05 	call	0xa08	; 0xa08 <init_timer0>
   //====================
   //Speed Sensor Initialization:
   init_timer2();								//initialize timer0 with ctc mode and overflow every 16ms
     ab8:	0e 94 b3 00 	call	0x166	; 0x166 <init_timer2>
   init_ext_interrupts();						//Initialize Pin PD3 For Speed sensor signal
     abc:	0e 94 ce 00 	call	0x19c	; 0x19c <init_ext_interrupts>
   //=============================
   //=====Throttle Sensor:
   init_ThrottleThumb();
     ac0:	0e 94 b2 03 	call	0x764	; 0x764 <init_ThrottleThumb>
   //=========================
   //=======servo:
   init_servo();								//Initialize Servo with 50 HZ And 45 degree motion.
     ac4:	0e 94 77 04 	call	0x8ee	; 0x8ee <init_servo>
   duty_cycle=(max_deg-min_deg)/(1024);			//by cross multiplication.
     ac8:	20 91 04 01 	lds	r18, 0x0104
     acc:	30 91 05 01 	lds	r19, 0x0105
     ad0:	40 91 06 01 	lds	r20, 0x0106
     ad4:	50 91 07 01 	lds	r21, 0x0107
     ad8:	60 91 00 01 	lds	r22, 0x0100
     adc:	70 91 01 01 	lds	r23, 0x0101
     ae0:	80 91 02 01 	lds	r24, 0x0102
     ae4:	90 91 03 01 	lds	r25, 0x0103
     ae8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__subsf3>
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e8       	ldi	r20, 0x80	; 128
     af2:	5a e3       	ldi	r21, 0x3A	; 58
     af4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3>
     af8:	60 93 47 01 	sts	0x0147, r22
     afc:	70 93 48 01 	sts	0x0148, r23
     b00:	80 93 49 01 	sts	0x0149, r24
     b04:	90 93 4a 01 	sts	0x014A, r25
   //============================
   //UART_init();
   
while (1)
{
	Display_constants();						//Display Written Words On LCD
     b08:	0e 94 87 03 	call	0x70e	; 0x70e <Display_constants>
	Calculate_speeds_distance();				//By Calculating Frequency of Wheel
     b0c:	0e 94 27 01 	call	0x24e	; 0x24e <Calculate_speeds_distance>
	Display_speeds_distance();			
     b10:	0e 94 13 03 	call	0x626	; 0x626 <Display_speeds_distance>
	Display_time();								//Display Stop Watch ON LCD
     b14:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Display_time>
	Display_throttle();							//Display Throttle Position
     b18:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Display_throttle>
     b1c:	f5 cf       	rjmp	.-22     	; 0xb08 <main+0x70>

00000b1e <__subsf3>:
     b1e:	50 58       	subi	r21, 0x80	; 128

00000b20 <__addsf3>:
     b20:	bb 27       	eor	r27, r27
     b22:	aa 27       	eor	r26, r26
     b24:	0e d0       	rcall	.+28     	; 0xb42 <__addsf3x>
     b26:	9c c1       	rjmp	.+824    	; 0xe60 <__fp_round>
     b28:	8d d1       	rcall	.+794    	; 0xe44 <__fp_pscA>
     b2a:	30 f0       	brcs	.+12     	; 0xb38 <__addsf3+0x18>
     b2c:	92 d1       	rcall	.+804    	; 0xe52 <__fp_pscB>
     b2e:	20 f0       	brcs	.+8      	; 0xb38 <__addsf3+0x18>
     b30:	31 f4       	brne	.+12     	; 0xb3e <__addsf3+0x1e>
     b32:	9f 3f       	cpi	r25, 0xFF	; 255
     b34:	11 f4       	brne	.+4      	; 0xb3a <__addsf3+0x1a>
     b36:	1e f4       	brtc	.+6      	; 0xb3e <__addsf3+0x1e>
     b38:	82 c1       	rjmp	.+772    	; 0xe3e <__fp_nan>
     b3a:	0e f4       	brtc	.+2      	; 0xb3e <__addsf3+0x1e>
     b3c:	e0 95       	com	r30
     b3e:	e7 fb       	bst	r30, 7
     b40:	4f c1       	rjmp	.+670    	; 0xde0 <__fp_inf>

00000b42 <__addsf3x>:
     b42:	e9 2f       	mov	r30, r25
     b44:	9e d1       	rcall	.+828    	; 0xe82 <__fp_split3>
     b46:	80 f3       	brcs	.-32     	; 0xb28 <__addsf3+0x8>
     b48:	ba 17       	cp	r27, r26
     b4a:	62 07       	cpc	r22, r18
     b4c:	73 07       	cpc	r23, r19
     b4e:	84 07       	cpc	r24, r20
     b50:	95 07       	cpc	r25, r21
     b52:	18 f0       	brcs	.+6      	; 0xb5a <__addsf3x+0x18>
     b54:	71 f4       	brne	.+28     	; 0xb72 <__addsf3x+0x30>
     b56:	9e f5       	brtc	.+102    	; 0xbbe <__addsf3x+0x7c>
     b58:	cd c1       	rjmp	.+922    	; 0xef4 <__fp_zero>
     b5a:	0e f4       	brtc	.+2      	; 0xb5e <__addsf3x+0x1c>
     b5c:	e0 95       	com	r30
     b5e:	0b 2e       	mov	r0, r27
     b60:	ba 2f       	mov	r27, r26
     b62:	a0 2d       	mov	r26, r0
     b64:	0b 01       	movw	r0, r22
     b66:	b9 01       	movw	r22, r18
     b68:	90 01       	movw	r18, r0
     b6a:	0c 01       	movw	r0, r24
     b6c:	ca 01       	movw	r24, r20
     b6e:	a0 01       	movw	r20, r0
     b70:	11 24       	eor	r1, r1
     b72:	ff 27       	eor	r31, r31
     b74:	59 1b       	sub	r21, r25
     b76:	99 f0       	breq	.+38     	; 0xb9e <__addsf3x+0x5c>
     b78:	59 3f       	cpi	r21, 0xF9	; 249
     b7a:	50 f4       	brcc	.+20     	; 0xb90 <__addsf3x+0x4e>
     b7c:	50 3e       	cpi	r21, 0xE0	; 224
     b7e:	68 f1       	brcs	.+90     	; 0xbda <__addsf3x+0x98>
     b80:	1a 16       	cp	r1, r26
     b82:	f0 40       	sbci	r31, 0x00	; 0
     b84:	a2 2f       	mov	r26, r18
     b86:	23 2f       	mov	r18, r19
     b88:	34 2f       	mov	r19, r20
     b8a:	44 27       	eor	r20, r20
     b8c:	58 5f       	subi	r21, 0xF8	; 248
     b8e:	f3 cf       	rjmp	.-26     	; 0xb76 <__addsf3x+0x34>
     b90:	46 95       	lsr	r20
     b92:	37 95       	ror	r19
     b94:	27 95       	ror	r18
     b96:	a7 95       	ror	r26
     b98:	f0 40       	sbci	r31, 0x00	; 0
     b9a:	53 95       	inc	r21
     b9c:	c9 f7       	brne	.-14     	; 0xb90 <__addsf3x+0x4e>
     b9e:	7e f4       	brtc	.+30     	; 0xbbe <__addsf3x+0x7c>
     ba0:	1f 16       	cp	r1, r31
     ba2:	ba 0b       	sbc	r27, r26
     ba4:	62 0b       	sbc	r22, r18
     ba6:	73 0b       	sbc	r23, r19
     ba8:	84 0b       	sbc	r24, r20
     baa:	ba f0       	brmi	.+46     	; 0xbda <__addsf3x+0x98>
     bac:	91 50       	subi	r25, 0x01	; 1
     bae:	a1 f0       	breq	.+40     	; 0xbd8 <__addsf3x+0x96>
     bb0:	ff 0f       	add	r31, r31
     bb2:	bb 1f       	adc	r27, r27
     bb4:	66 1f       	adc	r22, r22
     bb6:	77 1f       	adc	r23, r23
     bb8:	88 1f       	adc	r24, r24
     bba:	c2 f7       	brpl	.-16     	; 0xbac <__addsf3x+0x6a>
     bbc:	0e c0       	rjmp	.+28     	; 0xbda <__addsf3x+0x98>
     bbe:	ba 0f       	add	r27, r26
     bc0:	62 1f       	adc	r22, r18
     bc2:	73 1f       	adc	r23, r19
     bc4:	84 1f       	adc	r24, r20
     bc6:	48 f4       	brcc	.+18     	; 0xbda <__addsf3x+0x98>
     bc8:	87 95       	ror	r24
     bca:	77 95       	ror	r23
     bcc:	67 95       	ror	r22
     bce:	b7 95       	ror	r27
     bd0:	f7 95       	ror	r31
     bd2:	9e 3f       	cpi	r25, 0xFE	; 254
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <__addsf3x+0x96>
     bd6:	b3 cf       	rjmp	.-154    	; 0xb3e <__addsf3+0x1e>
     bd8:	93 95       	inc	r25
     bda:	88 0f       	add	r24, r24
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <__addsf3x+0x9e>
     bde:	99 27       	eor	r25, r25
     be0:	ee 0f       	add	r30, r30
     be2:	97 95       	ror	r25
     be4:	87 95       	ror	r24
     be6:	08 95       	ret

00000be8 <ceil>:
     be8:	6e d1       	rcall	.+732    	; 0xec6 <__fp_trunc>
     bea:	80 f0       	brcs	.+32     	; 0xc0c <ceil+0x24>
     bec:	9f 37       	cpi	r25, 0x7F	; 127
     bee:	40 f4       	brcc	.+16     	; 0xc00 <ceil+0x18>
     bf0:	91 11       	cpse	r25, r1
     bf2:	0e f4       	brtc	.+2      	; 0xbf6 <ceil+0xe>
     bf4:	80 c1       	rjmp	.+768    	; 0xef6 <__fp_szero>
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	9f e3       	ldi	r25, 0x3F	; 63
     bfe:	08 95       	ret
     c00:	26 f0       	brts	.+8      	; 0xc0a <ceil+0x22>
     c02:	1b 16       	cp	r1, r27
     c04:	61 1d       	adc	r22, r1
     c06:	71 1d       	adc	r23, r1
     c08:	81 1d       	adc	r24, r1
     c0a:	f0 c0       	rjmp	.+480    	; 0xdec <__fp_mintl>
     c0c:	0a c1       	rjmp	.+532    	; 0xe22 <__fp_mpack>

00000c0e <__divsf3>:
     c0e:	0c d0       	rcall	.+24     	; 0xc28 <__divsf3x>
     c10:	27 c1       	rjmp	.+590    	; 0xe60 <__fp_round>
     c12:	1f d1       	rcall	.+574    	; 0xe52 <__fp_pscB>
     c14:	40 f0       	brcs	.+16     	; 0xc26 <__divsf3+0x18>
     c16:	16 d1       	rcall	.+556    	; 0xe44 <__fp_pscA>
     c18:	30 f0       	brcs	.+12     	; 0xc26 <__divsf3+0x18>
     c1a:	21 f4       	brne	.+8      	; 0xc24 <__divsf3+0x16>
     c1c:	5f 3f       	cpi	r21, 0xFF	; 255
     c1e:	19 f0       	breq	.+6      	; 0xc26 <__divsf3+0x18>
     c20:	df c0       	rjmp	.+446    	; 0xde0 <__fp_inf>
     c22:	51 11       	cpse	r21, r1
     c24:	68 c1       	rjmp	.+720    	; 0xef6 <__fp_szero>
     c26:	0b c1       	rjmp	.+534    	; 0xe3e <__fp_nan>

00000c28 <__divsf3x>:
     c28:	2c d1       	rcall	.+600    	; 0xe82 <__fp_split3>
     c2a:	98 f3       	brcs	.-26     	; 0xc12 <__divsf3+0x4>

00000c2c <__divsf3_pse>:
     c2c:	99 23       	and	r25, r25
     c2e:	c9 f3       	breq	.-14     	; 0xc22 <__divsf3+0x14>
     c30:	55 23       	and	r21, r21
     c32:	b1 f3       	breq	.-20     	; 0xc20 <__divsf3+0x12>
     c34:	95 1b       	sub	r25, r21
     c36:	55 0b       	sbc	r21, r21
     c38:	bb 27       	eor	r27, r27
     c3a:	aa 27       	eor	r26, r26
     c3c:	62 17       	cp	r22, r18
     c3e:	73 07       	cpc	r23, r19
     c40:	84 07       	cpc	r24, r20
     c42:	38 f0       	brcs	.+14     	; 0xc52 <__divsf3_pse+0x26>
     c44:	9f 5f       	subi	r25, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	aa 1f       	adc	r26, r26
     c50:	a9 f3       	breq	.-22     	; 0xc3c <__divsf3_pse+0x10>
     c52:	33 d0       	rcall	.+102    	; 0xcba <__divsf3_pse+0x8e>
     c54:	0e 2e       	mov	r0, r30
     c56:	3a f0       	brmi	.+14     	; 0xc66 <__divsf3_pse+0x3a>
     c58:	e0 e8       	ldi	r30, 0x80	; 128
     c5a:	30 d0       	rcall	.+96     	; 0xcbc <__divsf3_pse+0x90>
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	50 40       	sbci	r21, 0x00	; 0
     c60:	e6 95       	lsr	r30
     c62:	00 1c       	adc	r0, r0
     c64:	ca f7       	brpl	.-14     	; 0xc58 <__divsf3_pse+0x2c>
     c66:	29 d0       	rcall	.+82     	; 0xcba <__divsf3_pse+0x8e>
     c68:	fe 2f       	mov	r31, r30
     c6a:	27 d0       	rcall	.+78     	; 0xcba <__divsf3_pse+0x8e>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	bb 1f       	adc	r27, r27
     c74:	26 17       	cp	r18, r22
     c76:	37 07       	cpc	r19, r23
     c78:	48 07       	cpc	r20, r24
     c7a:	ab 07       	cpc	r26, r27
     c7c:	b0 e8       	ldi	r27, 0x80	; 128
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__divsf3_pse+0x56>
     c80:	bb 0b       	sbc	r27, r27
     c82:	80 2d       	mov	r24, r0
     c84:	bf 01       	movw	r22, r30
     c86:	ff 27       	eor	r31, r31
     c88:	93 58       	subi	r25, 0x83	; 131
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	2a f0       	brmi	.+10     	; 0xc98 <__divsf3_pse+0x6c>
     c8e:	9e 3f       	cpi	r25, 0xFE	; 254
     c90:	51 05       	cpc	r21, r1
     c92:	68 f0       	brcs	.+26     	; 0xcae <__divsf3_pse+0x82>
     c94:	a5 c0       	rjmp	.+330    	; 0xde0 <__fp_inf>
     c96:	2f c1       	rjmp	.+606    	; 0xef6 <__fp_szero>
     c98:	5f 3f       	cpi	r21, 0xFF	; 255
     c9a:	ec f3       	brlt	.-6      	; 0xc96 <__divsf3_pse+0x6a>
     c9c:	98 3e       	cpi	r25, 0xE8	; 232
     c9e:	dc f3       	brlt	.-10     	; 0xc96 <__divsf3_pse+0x6a>
     ca0:	86 95       	lsr	r24
     ca2:	77 95       	ror	r23
     ca4:	67 95       	ror	r22
     ca6:	b7 95       	ror	r27
     ca8:	f7 95       	ror	r31
     caa:	9f 5f       	subi	r25, 0xFF	; 255
     cac:	c9 f7       	brne	.-14     	; 0xca0 <__divsf3_pse+0x74>
     cae:	88 0f       	add	r24, r24
     cb0:	91 1d       	adc	r25, r1
     cb2:	96 95       	lsr	r25
     cb4:	87 95       	ror	r24
     cb6:	97 f9       	bld	r25, 7
     cb8:	08 95       	ret
     cba:	e1 e0       	ldi	r30, 0x01	; 1
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	bb 1f       	adc	r27, r27
     cc4:	62 17       	cp	r22, r18
     cc6:	73 07       	cpc	r23, r19
     cc8:	84 07       	cpc	r24, r20
     cca:	ba 07       	cpc	r27, r26
     ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__divsf3_pse+0xaa>
     cce:	62 1b       	sub	r22, r18
     cd0:	73 0b       	sbc	r23, r19
     cd2:	84 0b       	sbc	r24, r20
     cd4:	ba 0b       	sbc	r27, r26
     cd6:	ee 1f       	adc	r30, r30
     cd8:	88 f7       	brcc	.-30     	; 0xcbc <__divsf3_pse+0x90>
     cda:	e0 95       	com	r30
     cdc:	08 95       	ret

00000cde <__fixsfsi>:
     cde:	04 d0       	rcall	.+8      	; 0xce8 <__fixunssfsi>
     ce0:	68 94       	set
     ce2:	b1 11       	cpse	r27, r1
     ce4:	08 c1       	rjmp	.+528    	; 0xef6 <__fp_szero>
     ce6:	08 95       	ret

00000ce8 <__fixunssfsi>:
     ce8:	d4 d0       	rcall	.+424    	; 0xe92 <__fp_splitA>
     cea:	88 f0       	brcs	.+34     	; 0xd0e <__fixunssfsi+0x26>
     cec:	9f 57       	subi	r25, 0x7F	; 127
     cee:	90 f0       	brcs	.+36     	; 0xd14 <__fixunssfsi+0x2c>
     cf0:	b9 2f       	mov	r27, r25
     cf2:	99 27       	eor	r25, r25
     cf4:	b7 51       	subi	r27, 0x17	; 23
     cf6:	a0 f0       	brcs	.+40     	; 0xd20 <__fixunssfsi+0x38>
     cf8:	d1 f0       	breq	.+52     	; 0xd2e <__fixunssfsi+0x46>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	1a f0       	brmi	.+6      	; 0xd0a <__fixunssfsi+0x22>
     d04:	ba 95       	dec	r27
     d06:	c9 f7       	brne	.-14     	; 0xcfa <__fixunssfsi+0x12>
     d08:	12 c0       	rjmp	.+36     	; 0xd2e <__fixunssfsi+0x46>
     d0a:	b1 30       	cpi	r27, 0x01	; 1
     d0c:	81 f0       	breq	.+32     	; 0xd2e <__fixunssfsi+0x46>
     d0e:	f2 d0       	rcall	.+484    	; 0xef4 <__fp_zero>
     d10:	b1 e0       	ldi	r27, 0x01	; 1
     d12:	08 95       	ret
     d14:	ef c0       	rjmp	.+478    	; 0xef4 <__fp_zero>
     d16:	67 2f       	mov	r22, r23
     d18:	78 2f       	mov	r23, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	b8 5f       	subi	r27, 0xF8	; 248
     d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x46>
     d20:	b9 3f       	cpi	r27, 0xF9	; 249
     d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x2e>
     d24:	86 95       	lsr	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b3 95       	inc	r27
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x3c>
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x56>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	08 95       	ret

00000d40 <__floatunsisf>:
     d40:	e8 94       	clt
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
     d44:	97 fb       	bst	r25, 7
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	99 23       	and	r25, r25
     d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
     d5a:	f9 2f       	mov	r31, r25
     d5c:	96 e9       	ldi	r25, 0x96	; 150
     d5e:	bb 27       	eor	r27, r27
     d60:	93 95       	inc	r25
     d62:	f6 95       	lsr	r31
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f1 11       	cpse	r31, r1
     d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
     d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
     d72:	bb 0f       	add	r27, r27
     d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
     d76:	60 ff       	sbrs	r22, 0
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
     d84:	88 23       	and	r24, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
     d88:	96 e9       	ldi	r25, 0x96	; 150
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
     d8c:	77 23       	and	r23, r23
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
     d90:	9e e8       	ldi	r25, 0x8E	; 142
     d92:	87 2f       	mov	r24, r23
     d94:	76 2f       	mov	r23, r22
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
     d98:	66 23       	and	r22, r22
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
     d9c:	96 e8       	ldi	r25, 0x86	; 134
     d9e:	86 2f       	mov	r24, r22
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
     da6:	9a 95       	dec	r25
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
     db0:	88 0f       	add	r24, r24
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <floor>:
     dba:	85 d0       	rcall	.+266    	; 0xec6 <__fp_trunc>
     dbc:	80 f0       	brcs	.+32     	; 0xdde <floor+0x24>
     dbe:	9f 37       	cpi	r25, 0x7F	; 127
     dc0:	40 f4       	brcc	.+16     	; 0xdd2 <floor+0x18>
     dc2:	91 11       	cpse	r25, r1
     dc4:	0e f0       	brts	.+2      	; 0xdc8 <floor+0xe>
     dc6:	97 c0       	rjmp	.+302    	; 0xef6 <__fp_szero>
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e8       	ldi	r24, 0x80	; 128
     dce:	9f eb       	ldi	r25, 0xBF	; 191
     dd0:	08 95       	ret
     dd2:	26 f4       	brtc	.+8      	; 0xddc <floor+0x22>
     dd4:	1b 16       	cp	r1, r27
     dd6:	61 1d       	adc	r22, r1
     dd8:	71 1d       	adc	r23, r1
     dda:	81 1d       	adc	r24, r1
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <__fp_mintl>
     dde:	21 c0       	rjmp	.+66     	; 0xe22 <__fp_mpack>

00000de0 <__fp_inf>:
     de0:	97 f9       	bld	r25, 7
     de2:	9f 67       	ori	r25, 0x7F	; 127
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	08 95       	ret

00000dec <__fp_mintl>:
     dec:	88 23       	and	r24, r24
     dee:	71 f4       	brne	.+28     	; 0xe0c <__fp_mintl+0x20>
     df0:	77 23       	and	r23, r23
     df2:	21 f0       	breq	.+8      	; 0xdfc <__fp_mintl+0x10>
     df4:	98 50       	subi	r25, 0x08	; 8
     df6:	87 2b       	or	r24, r23
     df8:	76 2f       	mov	r23, r22
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <__fp_mintl+0x1e>
     dfc:	66 23       	and	r22, r22
     dfe:	11 f4       	brne	.+4      	; 0xe04 <__fp_mintl+0x18>
     e00:	99 27       	eor	r25, r25
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <__fp_mintl+0x32>
     e04:	90 51       	subi	r25, 0x10	; 16
     e06:	86 2b       	or	r24, r22
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	2a f0       	brmi	.+10     	; 0xe18 <__fp_mintl+0x2c>
     e0e:	9a 95       	dec	r25
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	da f7       	brpl	.-10     	; 0xe0e <__fp_mintl+0x22>
     e18:	88 0f       	add	r24, r24
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	97 f9       	bld	r25, 7
     e20:	08 95       	ret

00000e22 <__fp_mpack>:
     e22:	9f 3f       	cpi	r25, 0xFF	; 255
     e24:	31 f0       	breq	.+12     	; 0xe32 <__fp_mpack_finite+0xc>

00000e26 <__fp_mpack_finite>:
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	20 f4       	brcc	.+8      	; 0xe32 <__fp_mpack_finite+0xc>
     e2a:	87 95       	ror	r24
     e2c:	77 95       	ror	r23
     e2e:	67 95       	ror	r22
     e30:	b7 95       	ror	r27
     e32:	88 0f       	add	r24, r24
     e34:	91 1d       	adc	r25, r1
     e36:	96 95       	lsr	r25
     e38:	87 95       	ror	r24
     e3a:	97 f9       	bld	r25, 7
     e3c:	08 95       	ret

00000e3e <__fp_nan>:
     e3e:	9f ef       	ldi	r25, 0xFF	; 255
     e40:	80 ec       	ldi	r24, 0xC0	; 192
     e42:	08 95       	ret

00000e44 <__fp_pscA>:
     e44:	00 24       	eor	r0, r0
     e46:	0a 94       	dec	r0
     e48:	16 16       	cp	r1, r22
     e4a:	17 06       	cpc	r1, r23
     e4c:	18 06       	cpc	r1, r24
     e4e:	09 06       	cpc	r0, r25
     e50:	08 95       	ret

00000e52 <__fp_pscB>:
     e52:	00 24       	eor	r0, r0
     e54:	0a 94       	dec	r0
     e56:	12 16       	cp	r1, r18
     e58:	13 06       	cpc	r1, r19
     e5a:	14 06       	cpc	r1, r20
     e5c:	05 06       	cpc	r0, r21
     e5e:	08 95       	ret

00000e60 <__fp_round>:
     e60:	09 2e       	mov	r0, r25
     e62:	03 94       	inc	r0
     e64:	00 0c       	add	r0, r0
     e66:	11 f4       	brne	.+4      	; 0xe6c <__fp_round+0xc>
     e68:	88 23       	and	r24, r24
     e6a:	52 f0       	brmi	.+20     	; 0xe80 <__fp_round+0x20>
     e6c:	bb 0f       	add	r27, r27
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fp_round+0x20>
     e70:	bf 2b       	or	r27, r31
     e72:	11 f4       	brne	.+4      	; 0xe78 <__fp_round+0x18>
     e74:	60 ff       	sbrs	r22, 0
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <__fp_round+0x20>
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	08 95       	ret

00000e82 <__fp_split3>:
     e82:	57 fd       	sbrc	r21, 7
     e84:	90 58       	subi	r25, 0x80	; 128
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	59 f0       	breq	.+22     	; 0xea2 <__fp_splitA+0x10>
     e8c:	5f 3f       	cpi	r21, 0xFF	; 255
     e8e:	71 f0       	breq	.+28     	; 0xeac <__fp_splitA+0x1a>
     e90:	47 95       	ror	r20

00000e92 <__fp_splitA>:
     e92:	88 0f       	add	r24, r24
     e94:	97 fb       	bst	r25, 7
     e96:	99 1f       	adc	r25, r25
     e98:	61 f0       	breq	.+24     	; 0xeb2 <__fp_splitA+0x20>
     e9a:	9f 3f       	cpi	r25, 0xFF	; 255
     e9c:	79 f0       	breq	.+30     	; 0xebc <__fp_splitA+0x2a>
     e9e:	87 95       	ror	r24
     ea0:	08 95       	ret
     ea2:	12 16       	cp	r1, r18
     ea4:	13 06       	cpc	r1, r19
     ea6:	14 06       	cpc	r1, r20
     ea8:	55 1f       	adc	r21, r21
     eaa:	f2 cf       	rjmp	.-28     	; 0xe90 <__fp_split3+0xe>
     eac:	46 95       	lsr	r20
     eae:	f1 df       	rcall	.-30     	; 0xe92 <__fp_splitA>
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <__fp_splitA+0x30>
     eb2:	16 16       	cp	r1, r22
     eb4:	17 06       	cpc	r1, r23
     eb6:	18 06       	cpc	r1, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	f1 cf       	rjmp	.-30     	; 0xe9e <__fp_splitA+0xc>
     ebc:	86 95       	lsr	r24
     ebe:	71 05       	cpc	r23, r1
     ec0:	61 05       	cpc	r22, r1
     ec2:	08 94       	sec
     ec4:	08 95       	ret

00000ec6 <__fp_trunc>:
     ec6:	e5 df       	rcall	.-54     	; 0xe92 <__fp_splitA>
     ec8:	a0 f0       	brcs	.+40     	; 0xef2 <__fp_trunc+0x2c>
     eca:	be e7       	ldi	r27, 0x7E	; 126
     ecc:	b9 17       	cp	r27, r25
     ece:	88 f4       	brcc	.+34     	; 0xef2 <__fp_trunc+0x2c>
     ed0:	bb 27       	eor	r27, r27
     ed2:	9f 38       	cpi	r25, 0x8F	; 143
     ed4:	60 f4       	brcc	.+24     	; 0xeee <__fp_trunc+0x28>
     ed6:	16 16       	cp	r1, r22
     ed8:	b1 1d       	adc	r27, r1
     eda:	67 2f       	mov	r22, r23
     edc:	78 2f       	mov	r23, r24
     ede:	88 27       	eor	r24, r24
     ee0:	98 5f       	subi	r25, 0xF8	; 248
     ee2:	f7 cf       	rjmp	.-18     	; 0xed2 <__fp_trunc+0xc>
     ee4:	86 95       	lsr	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b1 1d       	adc	r27, r1
     eec:	93 95       	inc	r25
     eee:	96 39       	cpi	r25, 0x96	; 150
     ef0:	c8 f3       	brcs	.-14     	; 0xee4 <__fp_trunc+0x1e>
     ef2:	08 95       	ret

00000ef4 <__fp_zero>:
     ef4:	e8 94       	clt

00000ef6 <__fp_szero>:
     ef6:	bb 27       	eor	r27, r27
     ef8:	66 27       	eor	r22, r22
     efa:	77 27       	eor	r23, r23
     efc:	cb 01       	movw	r24, r22
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__gesf2>:
     f02:	66 d0       	rcall	.+204    	; 0xfd0 <__fp_cmp>
     f04:	08 f4       	brcc	.+2      	; 0xf08 <__gesf2+0x6>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__mulsf3>:
     f0a:	0b d0       	rcall	.+22     	; 0xf22 <__mulsf3x>
     f0c:	a9 cf       	rjmp	.-174    	; 0xe60 <__fp_round>
     f0e:	9a df       	rcall	.-204    	; 0xe44 <__fp_pscA>
     f10:	28 f0       	brcs	.+10     	; 0xf1c <__mulsf3+0x12>
     f12:	9f df       	rcall	.-194    	; 0xe52 <__fp_pscB>
     f14:	18 f0       	brcs	.+6      	; 0xf1c <__mulsf3+0x12>
     f16:	95 23       	and	r25, r21
     f18:	09 f0       	breq	.+2      	; 0xf1c <__mulsf3+0x12>
     f1a:	62 cf       	rjmp	.-316    	; 0xde0 <__fp_inf>
     f1c:	90 cf       	rjmp	.-224    	; 0xe3e <__fp_nan>
     f1e:	11 24       	eor	r1, r1
     f20:	ea cf       	rjmp	.-44     	; 0xef6 <__fp_szero>

00000f22 <__mulsf3x>:
     f22:	af df       	rcall	.-162    	; 0xe82 <__fp_split3>
     f24:	a0 f3       	brcs	.-24     	; 0xf0e <__mulsf3+0x4>

00000f26 <__mulsf3_pse>:
     f26:	95 9f       	mul	r25, r21
     f28:	d1 f3       	breq	.-12     	; 0xf1e <__mulsf3+0x14>
     f2a:	95 0f       	add	r25, r21
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	55 1f       	adc	r21, r21
     f30:	62 9f       	mul	r22, r18
     f32:	f0 01       	movw	r30, r0
     f34:	72 9f       	mul	r23, r18
     f36:	bb 27       	eor	r27, r27
     f38:	f0 0d       	add	r31, r0
     f3a:	b1 1d       	adc	r27, r1
     f3c:	63 9f       	mul	r22, r19
     f3e:	aa 27       	eor	r26, r26
     f40:	f0 0d       	add	r31, r0
     f42:	b1 1d       	adc	r27, r1
     f44:	aa 1f       	adc	r26, r26
     f46:	64 9f       	mul	r22, r20
     f48:	66 27       	eor	r22, r22
     f4a:	b0 0d       	add	r27, r0
     f4c:	a1 1d       	adc	r26, r1
     f4e:	66 1f       	adc	r22, r22
     f50:	82 9f       	mul	r24, r18
     f52:	22 27       	eor	r18, r18
     f54:	b0 0d       	add	r27, r0
     f56:	a1 1d       	adc	r26, r1
     f58:	62 1f       	adc	r22, r18
     f5a:	73 9f       	mul	r23, r19
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	62 1f       	adc	r22, r18
     f62:	83 9f       	mul	r24, r19
     f64:	a0 0d       	add	r26, r0
     f66:	61 1d       	adc	r22, r1
     f68:	22 1f       	adc	r18, r18
     f6a:	74 9f       	mul	r23, r20
     f6c:	33 27       	eor	r19, r19
     f6e:	a0 0d       	add	r26, r0
     f70:	61 1d       	adc	r22, r1
     f72:	23 1f       	adc	r18, r19
     f74:	84 9f       	mul	r24, r20
     f76:	60 0d       	add	r22, r0
     f78:	21 1d       	adc	r18, r1
     f7a:	82 2f       	mov	r24, r18
     f7c:	76 2f       	mov	r23, r22
     f7e:	6a 2f       	mov	r22, r26
     f80:	11 24       	eor	r1, r1
     f82:	9f 57       	subi	r25, 0x7F	; 127
     f84:	50 40       	sbci	r21, 0x00	; 0
     f86:	8a f0       	brmi	.+34     	; 0xfaa <__mulsf3_pse+0x84>
     f88:	e1 f0       	breq	.+56     	; 0xfc2 <__mulsf3_pse+0x9c>
     f8a:	88 23       	and	r24, r24
     f8c:	4a f0       	brmi	.+18     	; 0xfa0 <__mulsf3_pse+0x7a>
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	bb 1f       	adc	r27, r27
     f94:	66 1f       	adc	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	50 40       	sbci	r21, 0x00	; 0
     f9e:	a9 f7       	brne	.-22     	; 0xf8a <__mulsf3_pse+0x64>
     fa0:	9e 3f       	cpi	r25, 0xFE	; 254
     fa2:	51 05       	cpc	r21, r1
     fa4:	70 f0       	brcs	.+28     	; 0xfc2 <__mulsf3_pse+0x9c>
     fa6:	1c cf       	rjmp	.-456    	; 0xde0 <__fp_inf>
     fa8:	a6 cf       	rjmp	.-180    	; 0xef6 <__fp_szero>
     faa:	5f 3f       	cpi	r21, 0xFF	; 255
     fac:	ec f3       	brlt	.-6      	; 0xfa8 <__mulsf3_pse+0x82>
     fae:	98 3e       	cpi	r25, 0xE8	; 232
     fb0:	dc f3       	brlt	.-10     	; 0xfa8 <__mulsf3_pse+0x82>
     fb2:	86 95       	lsr	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	f7 95       	ror	r31
     fbc:	e7 95       	ror	r30
     fbe:	9f 5f       	subi	r25, 0xFF	; 255
     fc0:	c1 f7       	brne	.-16     	; 0xfb2 <__mulsf3_pse+0x8c>
     fc2:	fe 2b       	or	r31, r30
     fc4:	88 0f       	add	r24, r24
     fc6:	91 1d       	adc	r25, r1
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	97 f9       	bld	r25, 7
     fce:	08 95       	ret

00000fd0 <__fp_cmp>:
     fd0:	99 0f       	add	r25, r25
     fd2:	00 08       	sbc	r0, r0
     fd4:	55 0f       	add	r21, r21
     fd6:	aa 0b       	sbc	r26, r26
     fd8:	e0 e8       	ldi	r30, 0x80	; 128
     fda:	fe ef       	ldi	r31, 0xFE	; 254
     fdc:	16 16       	cp	r1, r22
     fde:	17 06       	cpc	r1, r23
     fe0:	e8 07       	cpc	r30, r24
     fe2:	f9 07       	cpc	r31, r25
     fe4:	c0 f0       	brcs	.+48     	; 0x1016 <__fp_cmp+0x46>
     fe6:	12 16       	cp	r1, r18
     fe8:	13 06       	cpc	r1, r19
     fea:	e4 07       	cpc	r30, r20
     fec:	f5 07       	cpc	r31, r21
     fee:	98 f0       	brcs	.+38     	; 0x1016 <__fp_cmp+0x46>
     ff0:	62 1b       	sub	r22, r18
     ff2:	73 0b       	sbc	r23, r19
     ff4:	84 0b       	sbc	r24, r20
     ff6:	95 0b       	sbc	r25, r21
     ff8:	39 f4       	brne	.+14     	; 0x1008 <__fp_cmp+0x38>
     ffa:	0a 26       	eor	r0, r26
     ffc:	61 f0       	breq	.+24     	; 0x1016 <__fp_cmp+0x46>
     ffe:	23 2b       	or	r18, r19
    1000:	24 2b       	or	r18, r20
    1002:	25 2b       	or	r18, r21
    1004:	21 f4       	brne	.+8      	; 0x100e <__fp_cmp+0x3e>
    1006:	08 95       	ret
    1008:	0a 26       	eor	r0, r26
    100a:	09 f4       	brne	.+2      	; 0x100e <__fp_cmp+0x3e>
    100c:	a1 40       	sbci	r26, 0x01	; 1
    100e:	a6 95       	lsr	r26
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	81 1d       	adc	r24, r1
    1014:	81 1d       	adc	r24, r1
    1016:	08 95       	ret

00001018 <__udivmodhi4>:
    1018:	aa 1b       	sub	r26, r26
    101a:	bb 1b       	sub	r27, r27
    101c:	51 e1       	ldi	r21, 0x11	; 17
    101e:	07 c0       	rjmp	.+14     	; 0x102e <__udivmodhi4_ep>

00001020 <__udivmodhi4_loop>:
    1020:	aa 1f       	adc	r26, r26
    1022:	bb 1f       	adc	r27, r27
    1024:	a6 17       	cp	r26, r22
    1026:	b7 07       	cpc	r27, r23
    1028:	10 f0       	brcs	.+4      	; 0x102e <__udivmodhi4_ep>
    102a:	a6 1b       	sub	r26, r22
    102c:	b7 0b       	sbc	r27, r23

0000102e <__udivmodhi4_ep>:
    102e:	88 1f       	adc	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	5a 95       	dec	r21
    1034:	a9 f7       	brne	.-22     	; 0x1020 <__udivmodhi4_loop>
    1036:	80 95       	com	r24
    1038:	90 95       	com	r25
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	08 95       	ret

00001040 <__umulhisi3>:
    1040:	a2 9f       	mul	r26, r18
    1042:	b0 01       	movw	r22, r0
    1044:	b3 9f       	mul	r27, r19
    1046:	c0 01       	movw	r24, r0
    1048:	a3 9f       	mul	r26, r19
    104a:	01 d0       	rcall	.+2      	; 0x104e <__umulhisi3+0xe>
    104c:	b2 9f       	mul	r27, r18
    104e:	70 0d       	add	r23, r0
    1050:	81 1d       	adc	r24, r1
    1052:	11 24       	eor	r1, r1
    1054:	91 1d       	adc	r25, r1
    1056:	08 95       	ret

00001058 <itoa>:
    1058:	fb 01       	movw	r30, r22
    105a:	9f 01       	movw	r18, r30
    105c:	e8 94       	clt
    105e:	42 30       	cpi	r20, 0x02	; 2
    1060:	c4 f0       	brlt	.+48     	; 0x1092 <itoa+0x3a>
    1062:	45 32       	cpi	r20, 0x25	; 37
    1064:	b4 f4       	brge	.+44     	; 0x1092 <itoa+0x3a>
    1066:	4a 30       	cpi	r20, 0x0A	; 10
    1068:	29 f4       	brne	.+10     	; 0x1074 <itoa+0x1c>
    106a:	97 fb       	bst	r25, 7
    106c:	1e f4       	brtc	.+6      	; 0x1074 <itoa+0x1c>
    106e:	90 95       	com	r25
    1070:	81 95       	neg	r24
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	64 2f       	mov	r22, r20
    1076:	77 27       	eor	r23, r23
    1078:	0e 94 0c 08 	call	0x1018	; 0x1018 <__udivmodhi4>
    107c:	80 5d       	subi	r24, 0xD0	; 208
    107e:	8a 33       	cpi	r24, 0x3A	; 58
    1080:	0c f0       	brlt	.+2      	; 0x1084 <itoa+0x2c>
    1082:	89 5d       	subi	r24, 0xD9	; 217
    1084:	81 93       	st	Z+, r24
    1086:	cb 01       	movw	r24, r22
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	a1 f7       	brne	.-24     	; 0x1074 <itoa+0x1c>
    108c:	16 f4       	brtc	.+4      	; 0x1092 <itoa+0x3a>
    108e:	5d e2       	ldi	r21, 0x2D	; 45
    1090:	51 93       	st	Z+, r21
    1092:	10 82       	st	Z, r1
    1094:	c9 01       	movw	r24, r18
    1096:	0c 94 4d 08 	jmp	0x109a	; 0x109a <strrev>

0000109a <strrev>:
    109a:	dc 01       	movw	r26, r24
    109c:	fc 01       	movw	r30, r24
    109e:	67 2f       	mov	r22, r23
    10a0:	71 91       	ld	r23, Z+
    10a2:	77 23       	and	r23, r23
    10a4:	e1 f7       	brne	.-8      	; 0x109e <strrev+0x4>
    10a6:	32 97       	sbiw	r30, 0x02	; 2
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <strrev+0x18>
    10aa:	7c 91       	ld	r23, X
    10ac:	6d 93       	st	X+, r22
    10ae:	70 83       	st	Z, r23
    10b0:	62 91       	ld	r22, -Z
    10b2:	ae 17       	cp	r26, r30
    10b4:	bf 07       	cpc	r27, r31
    10b6:	c8 f3       	brcs	.-14     	; 0x10aa <strrev+0x10>
    10b8:	08 95       	ret

000010ba <_exit>:
    10ba:	f8 94       	cli

000010bc <__stop_program>:
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <__stop_program>
